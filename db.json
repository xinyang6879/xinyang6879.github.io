{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","path":"js/sidebar.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1741252106519},{"_id":"source/_posts/【AST】-解析attrs.md","hash":"7d06f7de98c191bc159c12d429763af778346a59","modified":1741252106520},{"_id":"source/_posts/【RN】环境搭建.md","hash":"6468a23827e137fe8847e134cf1a686c12482318","modified":1755070515651},{"_id":"source/_posts/【wasb】环境搭建.md","hash":"318df61fb4adde63ec6ecb936ed74c10654ba241","modified":1741252106521},{"_id":"source/_posts/【手写】call、apply、bind.md","hash":"e53e243ac2034bdb9d65354ed3aaff043746ceae","modified":1741252106521},{"_id":"source/_posts/手写题.md","hash":"68681c1fca05018c4ecede5c1f0d95489084a880","modified":1741252106524},{"_id":"source/_posts/HTML/【HTML】Shadow DOM.md","hash":"763e713b3a7afadcaa876129c4e040ebf73c2770","modified":1741252106511},{"_id":"source/_posts/HTTP/【Htpp】header.md","hash":"1f53d09e9ab151a8e028eb5cfd46700e3c68fae7","modified":1744193012270},{"_id":"source/_posts/HTML/小点.md","hash":"da35fd7a438383967d8dfb2cff6cd2e71d6486fe","modified":1746780475264},{"_id":"source/_posts/HTML/【HTML】templates and slots.md","hash":"535a3642420762e27e8048fff06e0e10e9c99ebd","modified":1741252106511},{"_id":"source/_posts/HTML/【HTML】记录.md","hash":"329016957350347c1e89bb54401bf5c89292d337","modified":1755070435507},{"_id":"source/_posts/HTTP/小点.md","hash":"8471ab15ecb0e8353b839d88841513f1d6d0a764","modified":1747732670154},{"_id":"source/_posts/devTools/Chrome--performance.md","hash":"62ed675bedcc85079e0d8cc41b18bc2eeec18563","modified":1741252106517},{"_id":"source/_posts/css/【css】BFC.md","hash":"c6fca328584e8b0f159440d05b6a4a41fde8e341","modified":1741252106514},{"_id":"source/_posts/devTools/【devTools】layers.md","hash":"bee163d115435eb8651f962b9641fa9969bac11a","modified":1741252106518},{"_id":"source/_posts/HTTP/【前端缓存】随机数位置区别.md","hash":"6692c9d8af2de9e9e341895b17a051ff28823937","modified":1741252106511},{"_id":"source/_posts/HTTP/【http】队头阻塞.md","hash":"21dd84ddaa33f8dbe0eea5ad826151b4a2d67fbf","modified":1742548825583},{"_id":"source/_posts/css/【css】border-raduis.md","hash":"3c45a4600f1b2b52c5608460b29b13bffa3173ab","modified":1741252106515},{"_id":"source/_posts/devTools/【devTools】performance.md","hash":"0224415cbb6ed15fbc52fcf26af3cf259656ec07","modified":1741252106518},{"_id":"source/_posts/css/【css】contain.md","hash":"e199ed13760ea433f7113f00a7e78e3a0751118e","modified":1741252106515},{"_id":"source/_posts/devTools/【devTools】常用面板.md","hash":"0208e3e2ef88eac0848efb752b39dab48da0c269","modified":1741252106519},{"_id":"source/_posts/css/【css】不常用属性总结.md","hash":"0eab30731407b8861b2f18545f5050035da51791","modified":1741252106515},{"_id":"source/_posts/css/【css】层叠上下文.md","hash":"c625a865ac09f45228dfea2281140dfd6cfe67b8","modified":1741252106515},{"_id":"source/_posts/css/【css】属性值定义语法.md","hash":"3a1a95d4b7a430d25baf4c27984f309474152f2e","modified":1741252106516},{"_id":"source/_posts/css/【css】滚动贴合.md","hash":"7ac5c2ab10925cd201e71785fb3f5d776c0863b2","modified":1741252106516},{"_id":"source/_posts/css/【css】记录小点.md","hash":"d32db5eb5e92578a39487c941f698ad2917287ad","modified":1746244142371},{"_id":"source/_posts/css/小点.md","hash":"bd5e4cad5b7d1e54908c1a75fc953403e25b8c9f","modified":1746320766798},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1755069885387},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1755069885419},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1755069885326},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1755069885389},{"_id":"node_modules/hexo-theme-landscape/languages/de-DE.yml","hash":"d29d1c4256b7ed9df42f511c2ff0a23ad5fd6c1f","modified":1755069885421},{"_id":"node_modules/hexo-theme-landscape/languages/en-GB.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1755069885425},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1755069885423},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1755069885426},{"_id":"node_modules/hexo-theme-landscape/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1755069885425},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1755069885429},{"_id":"node_modules/hexo-theme-landscape/languages/es-ES.yml","hash":"7008a8fc91f18d2a735864817b8ebda30c7a2c66","modified":1755069885427},{"_id":"node_modules/hexo-theme-landscape/languages/hu-HU.yml","hash":"712d18664898fa21ba38d4973e90ef41a324ea25","modified":1755069885435},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1755069885433},{"_id":"node_modules/hexo-theme-landscape/languages/en-US.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1755069885425},{"_id":"node_modules/hexo-theme-landscape/languages/fr-FR.yml","hash":"8d09dbdab00a30a2870b56f7c0a7ca7deafa7b88","modified":1755069885431},{"_id":"node_modules/hexo-theme-landscape/languages/it-IT.yml","hash":"2cb6dc2fab9bd2dbe1c8bb869a9e8bf85a564fdd","modified":1755069885438},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1755069885436},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1755069885440},{"_id":"node_modules/hexo-theme-landscape/languages/ja-JP.yml","hash":"08481267e0c112e1f6855620f2837ec4c4a98bbd","modified":1755069885441},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1755069885443},{"_id":"node_modules/hexo-theme-landscape/languages/ko-KR.yml","hash":"19209ad8f9d4057e8df808937f950eb265e1db69","modified":1755069885444},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1755069885445},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1755069885449},{"_id":"node_modules/hexo-theme-landscape/languages/mn-MN.yml","hash":"b9e5f3e7c0c2f779cf2cfded6db847b5941637ca","modified":1755069885448},{"_id":"node_modules/hexo-theme-landscape/languages/nl-NL.yml","hash":"5ebbc30021f05d99938f96dfff280392df7f91f0","modified":1755069885451},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1755069885453},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1755069885455},{"_id":"node_modules/hexo-theme-landscape/languages/pt-PT.yml","hash":"0f852b6b228e6ea59aa3540574bb89b233f2a098","modified":1755069885457},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1755069885459},{"_id":"node_modules/hexo-theme-landscape/languages/ru-RU.yml","hash":"360d11a28bb768afb1dd15f63fa7fd3a8cc547ee","modified":1755069885461},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1755069885462},{"_id":"node_modules/hexo-theme-landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1755069885464},{"_id":"node_modules/hexo-theme-landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1755069885466},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1755069885469},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1755069885470},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1755069885355},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1755069885338},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1755069885467},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1755069885338},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1755069885357},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1755069885363},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1755069885363},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1755069885379},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1755069885338},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1755069885333},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1755069885330},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1755069885339},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1755069885332},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1755069885350},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1755069885345},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1755069885348},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1755069885351},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1755069885354},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1755069885359},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1755069885336},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1755069885367},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1755069885342},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1755069885366},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1755069885392},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1755069885371},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1755069885417},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1755069885393},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1755069885328},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1755069885373},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1755069885385},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1755069885344},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1755069885347},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1755069885361},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1755069885395},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1755069885341},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1755069885374},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1755069885369},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1755069885396},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1755069885403},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1755069885398},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1755069885400},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1755069885405},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1755069885410},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1755069885402},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1755069885412},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1755069885415},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1755069885407},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1755069885414},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1755069885384},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1755069885382},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1755069885377},{"_id":"node_modules/hexo-theme-next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1755070852736},{"_id":"node_modules/hexo-theme-next/README.md","hash":"6f1bf93dbccc8545872fe27b4693fda59cdbfb89","modified":1755070852742},{"_id":"node_modules/hexo-theme-next/package.json","hash":"4fc25e5879f5d8588baf89c934020b53e43dab9d","modified":1755070852728},{"_id":"node_modules/hexo-theme-next/_config.yml","hash":"5c1f546125066b78f62a828763ea9a28b4bf8f85","modified":1755070852988},{"_id":"node_modules/hexo-theme-next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1755070852732},{"_id":"node_modules/hexo-theme-next/_vendors.yml","hash":"f59b9b842006ffb180ea541728265b7d1316c2f7","modified":1755070852990},{"_id":"node_modules/hexo-theme-next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1755070852987},{"_id":"node_modules/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1755070852730},{"_id":"node_modules/hexo-theme-next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1755070852992},{"_id":"node_modules/hexo-theme-next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1755070852994},{"_id":"node_modules/hexo-theme-next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1755070852999},{"_id":"node_modules/hexo-theme-next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1755070852995},{"_id":"node_modules/hexo-theme-next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1755070853000},{"_id":"node_modules/hexo-theme-next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1755070853005},{"_id":"node_modules/hexo-theme-next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1755070852996},{"_id":"node_modules/hexo-theme-next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1755070852998},{"_id":"node_modules/hexo-theme-next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1755070852741},{"_id":"node_modules/hexo-theme-next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1755070853003},{"_id":"node_modules/hexo-theme-next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1755070853006},{"_id":"node_modules/hexo-theme-next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1755070852993},{"_id":"node_modules/hexo-theme-next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1755070853002},{"_id":"node_modules/hexo-theme-next/languages/pt.yml","hash":"b62faaa767a45a613dd042b5f1903675eb5a8cf9","modified":1755070853010},{"_id":"node_modules/hexo-theme-next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1755070853014},{"_id":"node_modules/hexo-theme-next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1755070853008},{"_id":"node_modules/hexo-theme-next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1755070853012},{"_id":"node_modules/hexo-theme-next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1755070853009},{"_id":"node_modules/hexo-theme-next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1755070853015},{"_id":"node_modules/hexo-theme-next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1755070853016},{"_id":"node_modules/hexo-theme-next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1755070853017},{"_id":"node_modules/hexo-theme-next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1755070853021},{"_id":"node_modules/hexo-theme-next/languages/zh-TW.yml","hash":"5c0f00cdac3f4727b880dd223f622a535736fa8e","modified":1755070853025},{"_id":"node_modules/hexo-theme-next/languages/zh-HK.yml","hash":"8eb6a9f231ce1bfa54cc54418ccf14f01dcc9a31","modified":1755070853024},{"_id":"node_modules/hexo-theme-next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1755070853022},{"_id":"node_modules/hexo-theme-next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1755070853019},{"_id":"node_modules/hexo-theme-next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1755070852791},{"_id":"node_modules/hexo-theme-next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1755070852813},{"_id":"node_modules/hexo-theme-next/layout/_layout.njk","hash":"b17d44bd7379c23241053a0b7fbd38c9c43cc239","modified":1755070852744},{"_id":"node_modules/hexo-theme-next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1755070852750},{"_id":"node_modules/hexo-theme-next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1755070852759},{"_id":"node_modules/hexo-theme-next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1755070852830},{"_id":"node_modules/hexo-theme-next/docs/ru/README.md","hash":"30e929e1138445534a6f46d64667c17273337acf","modified":1755070852738},{"_id":"node_modules/hexo-theme-next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1755070852837},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1755070852734},{"_id":"node_modules/hexo-theme-next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1755070852819},{"_id":"node_modules/hexo-theme-next/layout/_macro/post.njk","hash":"ec9bb9c5ede773c02f0c8d8475245a8a437a2b71","modified":1755070852827},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1755070852734},{"_id":"node_modules/hexo-theme-next/docs/zh-CN/README.md","hash":"93064dbd1a461d55c7c07a04626294c8150b4d1b","modified":1755070852740},{"_id":"node_modules/hexo-theme-next/layout/_macro/sidebar.njk","hash":"85f3a2ab22601a9606f2f630289db1363b98018f","modified":1755070852833},{"_id":"node_modules/hexo-theme-next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1755070852809},{"_id":"node_modules/hexo-theme-next/layout/_scripts/index.njk","hash":"2a7dfffebad19b67dc9e3b2a6b2986d0630ef930","modified":1755070852783},{"_id":"node_modules/hexo-theme-next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1755070852746},{"_id":"node_modules/hexo-theme-next/layout/_scripts/vendors.njk","hash":"7261e24287984853c8ef08cda8bbc80cacf9bd6f","modified":1755070852843},{"_id":"node_modules/hexo-theme-next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1755070852830},{"_id":"node_modules/hexo-theme-next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1755070852769},{"_id":"node_modules/hexo-theme-next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1755070852786},{"_id":"node_modules/hexo-theme-next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1755070852635},{"_id":"node_modules/hexo-theme-next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1755070852675},{"_id":"node_modules/hexo-theme-next/source/css/_colors.styl","hash":"ebfe0954e3931431f46f913abe08d0212e06e7c2","modified":1755070852852},{"_id":"node_modules/hexo-theme-next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1755070852657},{"_id":"node_modules/hexo-theme-next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1755070852684},{"_id":"node_modules/hexo-theme-next/source/css/_mixins.styl","hash":"e21309d4165ebb6645084eed8dd749846ae981f1","modified":1755070852867},{"_id":"node_modules/hexo-theme-next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1755070852704},{"_id":"node_modules/hexo-theme-next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1755070852765},{"_id":"node_modules/hexo-theme-next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1755070852933},{"_id":"node_modules/hexo-theme-next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1755070852772},{"_id":"node_modules/hexo-theme-next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1755070852922},{"_id":"node_modules/hexo-theme-next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1755070852815},{"_id":"node_modules/hexo-theme-next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1755070852611},{"_id":"node_modules/hexo-theme-next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1755070852794},{"_id":"node_modules/hexo-theme-next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1755070852624},{"_id":"node_modules/hexo-theme-next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1755070852631},{"_id":"node_modules/hexo-theme-next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1755070852847},{"_id":"node_modules/hexo-theme-next/source/js/motion.js","hash":"6f751f5c9499a39d7c5e1d323db3260342dd9431","modified":1755070852685},{"_id":"node_modules/hexo-theme-next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1755070852626},{"_id":"node_modules/hexo-theme-next/source/js/next-boot.js","hash":"63fb503dc8c640e8974be233bb51921e794c2953","modified":1755070852690},{"_id":"node_modules/hexo-theme-next/scripts/helpers/engine.js","hash":"83235f2879567eb8686431c9554a4b99f14ab665","modified":1755070852642},{"_id":"node_modules/hexo-theme-next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1755070852709},{"_id":"node_modules/hexo-theme-next/source/js/pjax.js","hash":"694b271819aab37ce473b15db9e6aded971d82e5","modified":1755070852703},{"_id":"node_modules/hexo-theme-next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1755070852614},{"_id":"node_modules/hexo-theme-next/source/js/schedule.js","hash":"9c41a73ed3e8db8ca4cb53633b6f616279a5a7bd","modified":1755070852708},{"_id":"node_modules/hexo-theme-next/scripts/helpers/font.js","hash":"4c84d45daac86396edf656d2a8abe6e7583491ea","modified":1755070852648},{"_id":"node_modules/hexo-theme-next/source/js/utils.js","hash":"6734719bb74e4d9818992b0e4a745c2a1aefd5e2","modified":1755070852715},{"_id":"node_modules/hexo-theme-next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1755070852688},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-config.js","hash":"4bc2eb87f3fa26981652f517d1ab3f81de2ab89d","modified":1755070852691},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1755070852693},{"_id":"node_modules/hexo-theme-next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1755070852615},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1755070852695},{"_id":"node_modules/hexo-theme-next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1755070852652},{"_id":"node_modules/hexo-theme-next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1755070852692},{"_id":"node_modules/hexo-theme-next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1755070852617},{"_id":"node_modules/hexo-theme-next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1755070852658},{"_id":"node_modules/hexo-theme-next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1755070852665},{"_id":"node_modules/hexo-theme-next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1755070852680},{"_id":"node_modules/hexo-theme-next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1755070852669},{"_id":"node_modules/hexo-theme-next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1755070852697},{"_id":"node_modules/hexo-theme-next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1755070852724},{"_id":"node_modules/hexo-theme-next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1755070852700},{"_id":"node_modules/hexo-theme-next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1755070852711},{"_id":"node_modules/hexo-theme-next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1755070852721},{"_id":"node_modules/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1755070852849},{"_id":"node_modules/hexo-theme-next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1755070852604},{"_id":"node_modules/hexo-theme-next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1755070852984},{"_id":"node_modules/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1755070852850},{"_id":"node_modules/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1755070852851},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1755070852763},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1755070852774},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1755070852776},{"_id":"node_modules/hexo-theme-next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1755070852986},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1755070852801},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1755070852785},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1755070852818},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"1efeeda00db08a3c033798228dd0092ee532cc36","modified":1755070852808},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1755070852751},{"_id":"node_modules/hexo-theme-next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1755070852841},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1755070852761},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1755070852760},{"_id":"node_modules/hexo-theme-next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1755070852840},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1755070852800},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1755070852788},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1755070852797},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1755070852767},{"_id":"node_modules/hexo-theme-next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1755070852793},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1755070852766},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1755070852773},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1755070852842},{"_id":"node_modules/hexo-theme-next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1755070852792},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/config.js","hash":"00af4f5f9a79eaccf051f9e372d233d65d44c8a5","modified":1755070852630},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1755070852655},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1755070852620},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1755070852715},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1755070852627},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1755070852639},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1755070852687},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1755070852633},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1755070852720},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1755070852636},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1755070852649},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1755070852661},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1755070852670},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"55c2468b2b7f035881d494085527d6554f37b556","modified":1755070852755},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1755070852807},{"_id":"node_modules/hexo-theme-next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1755070852717},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1755070852770},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1755070852817},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1755070852790},{"_id":"node_modules/hexo-theme-next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1755070852795},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1755070852798},{"_id":"node_modules/hexo-theme-next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1755070852845},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1755070852893},{"_id":"node_modules/hexo-theme-next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1755070852747},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head-unique.njk","hash":"93c1d103d9d16581c944c51f3d0638f57c80ee41","modified":1755070852777},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1755070852926},{"_id":"node_modules/hexo-theme-next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1755070852779},{"_id":"node_modules/hexo-theme-next/source/css/_variables/base.styl","hash":"b724edca546373d5eaf9b3602868f971c9094cf6","modified":1755070852879},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1755070852930},{"_id":"node_modules/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1755070852938},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1755070852751},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1755070852780},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1755070852802},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1755070852836},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1755070852753},{"_id":"node_modules/hexo-theme-next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1755070852806},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1755070852757},{"_id":"node_modules/hexo-theme-next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1755070852660},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1755070852810},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1755070852831},{"_id":"node_modules/hexo-theme-next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1755070852782},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1755070852820},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1755070852822},{"_id":"node_modules/hexo-theme-next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1755070852839},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1755070852823},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1755070852821},{"_id":"node_modules/hexo-theme-next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1755070852834},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1755070852826},{"_id":"node_modules/hexo-theme-next/source/js/third-party/addtoany.js","hash":"a772605646dcfb67620a10ee8ef23c38a6d19d80","modified":1755070852606},{"_id":"node_modules/hexo-theme-next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1755070852825},{"_id":"node_modules/hexo-theme-next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1755070852644},{"_id":"node_modules/hexo-theme-next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1755070852699},{"_id":"node_modules/hexo-theme-next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1755070852706},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1755070852853},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1755070852857},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1755070852863},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1755070852915},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1755070852855},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1755070852869},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"bcbf498d8d3ecea84324f0a59b7f95f389a52b8d","modified":1755070852914},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1755070852861},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"a03f16ffc7dfdbdc6053f9fd68d77257ba0c559e","modified":1755070852865},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e792a6233e1d4dbc5fd2f10ae97b7a790b82568b","modified":1755070852872},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1755070852875},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1755070852864},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1755070852854},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1755070852917},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1755070852859},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1755070852876},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1755070852871},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1755070852899},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1755070852874},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1755070852953},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"f316ba87f8d3299677fbf8345e1e993c35210e2e","modified":1755070852877},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1755070852885},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1755070852887},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1755070852911},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1755070852936},{"_id":"node_modules/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1755070852916},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1755070852975},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1755070852931},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1755070852907},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1755070852980},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/mobile.styl","hash":"48b2dfc04df6409c6e0736ccc11462ad97d349b1","modified":1755070852928},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1755070852609},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqus.js","hash":"3631db0315bdeaa420091a9febb6fa3421a2bdb4","modified":1755070852638},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1755070852651},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1755070852654},{"_id":"node_modules/hexo-theme-next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1755070852678},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/changyan.js","hash":"6c65d5a585b7dd75e5f0fa6ef2dc85d0bcd1e58f","modified":1755070852621},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/gitalk.js","hash":"03eb13679fc701c2ab91e502ccd26aacc37e7999","modified":1755070852650},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/disqusjs.js","hash":"e01b42846ffcabc676c3bdd9d89e8cafc084e20b","modified":1755070852640},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1755070852676},{"_id":"node_modules/hexo-theme-next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1755070852664},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/local-search.js","hash":"3968d972f47b79acc6c3fe44028bad77c9c5aab7","modified":1755070852673},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/isso.js","hash":"917d1a2bbae6cc8817ce37abc17800b1740b2517","modified":1755070852662},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/utterances.js","hash":"743f389fc5669e486c8804d7199a11542ff9bc11","modified":1755070852718},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/firestore.js","hash":"fec1c5c913237112b2cc6fb7d1e73b789bf508f8","modified":1755070852646},{"_id":"node_modules/hexo-theme-next/source/js/third-party/comments/livere.js","hash":"e35e5a90a70a96117509368423726c6a56041ea2","modified":1755070852672},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1755070852713},{"_id":"node_modules/hexo-theme-next/source/js/third-party/search/algolia-search.js","hash":"6b3fa841e48d8637a33530dd48c8ab1ef317323c","modified":1755070852607},{"_id":"node_modules/hexo-theme-next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1755070852623},{"_id":"node_modules/hexo-theme-next/source/js/third-party/statistics/lean-analytics.js","hash":"171889aaab60704f87cfe9a05871f493ac292b47","modified":1755070852667},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/mermaid.js","hash":"ae1c0c6c079594936de1aea756eb58992f8fb0e0","modified":1755070852682},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/pdf.js","hash":"7e6ad201d2c9d682261209db5dba07e9608fb42a","modified":1755070852701},{"_id":"node_modules/hexo-theme-next/source/js/third-party/tags/wavedrom.js","hash":"71efb52a4c44c64c2b17edd4638d54ec884bd4c7","modified":1755070852726},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1755070852900},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1755070852886},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1755070852884},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1755070852955},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1755070852979},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1755070852941},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1755070852901},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-body.styl","hash":"93f014809d6442da23f8b7d729f7375e2badba7d","modified":1755070852939},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-footer.styl","hash":"0f4830e19026317ed850f3be2979556e38f97f4a","modified":1755070852943},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-header.styl","hash":"424de4f64b12c521e8c6bfbc711d7961490ab36e","modified":1755070852946},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-followme.styl","hash":"026cd5735fd2a75bb60b7bf8bd09139583d602b9","modified":1755070852942},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1755070852948},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1755070852945},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1755070852950},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1755070852890},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1755070852951},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1755070852894},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/search.styl","hash":"1874e2b5d86cdeeaf2ccdc2669146a2b0c72d9db","modified":1755070852956},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1755070852923},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1755070852903},{"_id":"node_modules/hexo-theme-next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1755070852982},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"5c31f3a86e4e6fbf2f8419415620461fa8a63c56","modified":1755070852889},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1755070852905},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1755070852892},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/highlight/index.styl","hash":"9b0217e1caecd91e05572c7e8e52d32016ca312f","modified":1755070852910},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1755070852896},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1755070852882},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1755070852906},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1755070852880},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1755070852972},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1755070852924},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1755070852973},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1755070852918},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1755070852912},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1755070852898},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"49329a7144f3413d1c832e52a1f4954171ef11e1","modified":1755070852920},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1755070852937},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1755070852926},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/note.styl","hash":"8213015d9cae45d2c9945f8aba9d8db39c734efc","modified":1755070852934},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/tabs.styl","hash":"c3be8b0738f693e750486bb71769c3dbbec174cc","modified":1755070852977},{"_id":"node_modules/hexo-theme-next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1755070852983},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1755070852954},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1755070852961},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/index.styl","hash":"21acb11e397526132605eef23bde7b307aa1eab5","modified":1755070852909},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1755070852965},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1755070852957},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"ce36bf1602233298e0351b4babc592315529eb26","modified":1755070852963},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-copyright.styl","hash":"56805b77fe236fac19e19c716a49363bcf986311","modified":1755070852966},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1755070852969},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1755070852974},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1755070852971},{"_id":"node_modules/hexo-theme-next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1755070852970}],"Category":[{"name":"vue","_id":"cme9nh6wx0002bofm4ds4d841"},{"name":"webAssembly","_id":"cme9nh6x30007bofm0hlkb0y0"},{"name":"js","_id":"cme9nh6x6000cbofmfn67dska"},{"name":"HTML","_id":"cme9nh6xc000kbofmh76a8khb"},{"name":"http","_id":"cme9nh6xh000zbofmai0231lv"},{"name":"HTTP","_id":"cme9nh6xj0016bofm7188ce79"},{"name":"浏览器","_id":"cme9nh6xj0018bofmc3li8iw1"},{"name":"css","_id":"cme9nh6xk001cbofmgcifcztw"},{"name":"React Native","_id":"cme9no52e0000u4fm3kpx3jdw"}],"Data":[],"Page":[],"Post":[{"title":"解析 attrs","time":"2022-12-8 20:55","_content":"\n# 【AST】-解析 attrs\n\n## 考虑情况\n\n- 普通情况\n\n```js\nclass=\"a\"\n```\n\n- 空格情况\n\n```js\nclass=\"a b c\"\n```\n\n- 无引号情况\n\n```js\ndata = 1;\n```\n\n- 无赋值情况\n\n```js\ndata - a;\n```\n\n## 方案\n\n### 前情\n\n1、attrs 作为一整串字符串传入，因为第二种(空格)情况的存在，不能通过空格进行数组分割\n\n2、存在第二种(无引号)的情况，不能完全通过引号作为标志位进行分割\n\n### 结论\n\n- 以引号和等于同时作为标志位，对字符串进行切分。引号为第一准则，等号为附用\n\n- 在切分 key 与 value 时，以等号作为分割符，但还需要检查 key 中是否存在空格，如果有空格，则表示存在第四种(无赋值情况)情况\n\n## 代码\n\n```js\nfunction getKeyValue(strs) {\n  // 存放key-value/attr字符的数组\n  let res = [];\n  // 是否是有双引号的标志位\n  let is_start = false;\n  // 是否是有等号的标志位\n  let is_equal = false;\n  // 存放每个key-value的字符\n  let str = \"\";\n  // 遍历整个attrs字符串\n  for (let i = 0; i < strs.length; i++) {\n    str += strs[i];\n    // 如果当前的字符是引号，那么表示一个attr值的开始或者结束，class=\"(开始)a\"(结束)\n    if (strs[i] === `\"`) {\n      // 如果之前已经出现了引号，那么表示这个引号是attr的结束位，class=\"a\"(结束)\n      if (is_start) {\n        // 那么就需要将当前收集的字符存到attr的数组中\n        str = str.replaceAll('\"', \"\");\n        res.push(str);\n        // 需要重新收集，那么一切回到初始\n        is_start = false;\n        is_equal = false;\n        str = \"\";\n      } else {\n        // 如果之前没有引号，那么表示这个引号是attr值的开始位，class=\"(开始)a\"\n        is_start = true;\n      }\n    }\n    // 如果有=，但是没有\"表示开始，那么就表示是x=1的形式\n    if (strs[i] === \"=\" && !is_start) {\n      is_equal = true;\n    }\n    // 如果当时是空格，并且是出现过等号且没有出现过引号，那么表示是data=1的情况\n    if (strs[i] === \" \" && is_equal && !is_start) {\n      // 那么就需要将当前收集的字符存到attr的数组中\n      res.push(str);\n      // 需要重新收集，那么一切回到初始\n      is_start = false;\n      is_equal = false;\n      str = \"\";\n    }\n  }\n  // 数据已经遍历完成，但是str还没有结束\n  if (str) {\n    res.push(str);\n  }\n  const data = res.reduce((pre, cur) => {\n    // 通过等号将attr的str分隔开\n    let [key, val = \"\"] = cur.split(\"=\");\n    // 去掉key的左右空格\n    key = key.trim();\n    // 如果key还存在空格，那么就表示是data-b data=1的情况\n    if (key.includes(\" \")) {\n      // 需要将key以空格分割开\n      const keys = key.split(\" \");\n      // 将在最后一个key之前的key都放入attrs数组里面\n      for (let i = 0; i < keys.length - 1; i++) {\n        pre.push({ key: keys[i].trim(), val: \"\" });\n      }\n      // 最后一个key作为对于的value值\n      key = keys[keys.length - 1].trim();\n    }\n    // 在attrs里面添加attr的key及value\n    pre.push({ key: key.trim(), val: val.trim() });\n    return pre;\n  }, []);\n  return data;\n}\n\ngetKeyValue( ` class=\"a b  c \"   id=\"d \" data-b data-c data=1   data-a=\"111\" data-d`);\n\n// 输出\n// res(keyvalue)数组：\n [' class=a b  c ', '   id=d ', ' data-b data-c data=1 ', '  data-a=111', ' data-d']\n// data结果：\n[\n    {key: 'class', val: 'a b  c'},\n    {key: 'id', val: 'd'},\n    {key: 'data-b', val: ''},\n    {key: 'data-c', val: ''},\n    {key: 'data', val: '1'},\n    {key: 'data-a', val: '111'},\n    {key: 'data-d', val: ''},\n]\n```\n","source":"_posts/【AST】-解析attrs.md","raw":"---\ntitle: 解析 attrs\ntime: 2022-12-8 20:55\ncategories: vue\ntag: vue\n---\n\n# 【AST】-解析 attrs\n\n## 考虑情况\n\n- 普通情况\n\n```js\nclass=\"a\"\n```\n\n- 空格情况\n\n```js\nclass=\"a b c\"\n```\n\n- 无引号情况\n\n```js\ndata = 1;\n```\n\n- 无赋值情况\n\n```js\ndata - a;\n```\n\n## 方案\n\n### 前情\n\n1、attrs 作为一整串字符串传入，因为第二种(空格)情况的存在，不能通过空格进行数组分割\n\n2、存在第二种(无引号)的情况，不能完全通过引号作为标志位进行分割\n\n### 结论\n\n- 以引号和等于同时作为标志位，对字符串进行切分。引号为第一准则，等号为附用\n\n- 在切分 key 与 value 时，以等号作为分割符，但还需要检查 key 中是否存在空格，如果有空格，则表示存在第四种(无赋值情况)情况\n\n## 代码\n\n```js\nfunction getKeyValue(strs) {\n  // 存放key-value/attr字符的数组\n  let res = [];\n  // 是否是有双引号的标志位\n  let is_start = false;\n  // 是否是有等号的标志位\n  let is_equal = false;\n  // 存放每个key-value的字符\n  let str = \"\";\n  // 遍历整个attrs字符串\n  for (let i = 0; i < strs.length; i++) {\n    str += strs[i];\n    // 如果当前的字符是引号，那么表示一个attr值的开始或者结束，class=\"(开始)a\"(结束)\n    if (strs[i] === `\"`) {\n      // 如果之前已经出现了引号，那么表示这个引号是attr的结束位，class=\"a\"(结束)\n      if (is_start) {\n        // 那么就需要将当前收集的字符存到attr的数组中\n        str = str.replaceAll('\"', \"\");\n        res.push(str);\n        // 需要重新收集，那么一切回到初始\n        is_start = false;\n        is_equal = false;\n        str = \"\";\n      } else {\n        // 如果之前没有引号，那么表示这个引号是attr值的开始位，class=\"(开始)a\"\n        is_start = true;\n      }\n    }\n    // 如果有=，但是没有\"表示开始，那么就表示是x=1的形式\n    if (strs[i] === \"=\" && !is_start) {\n      is_equal = true;\n    }\n    // 如果当时是空格，并且是出现过等号且没有出现过引号，那么表示是data=1的情况\n    if (strs[i] === \" \" && is_equal && !is_start) {\n      // 那么就需要将当前收集的字符存到attr的数组中\n      res.push(str);\n      // 需要重新收集，那么一切回到初始\n      is_start = false;\n      is_equal = false;\n      str = \"\";\n    }\n  }\n  // 数据已经遍历完成，但是str还没有结束\n  if (str) {\n    res.push(str);\n  }\n  const data = res.reduce((pre, cur) => {\n    // 通过等号将attr的str分隔开\n    let [key, val = \"\"] = cur.split(\"=\");\n    // 去掉key的左右空格\n    key = key.trim();\n    // 如果key还存在空格，那么就表示是data-b data=1的情况\n    if (key.includes(\" \")) {\n      // 需要将key以空格分割开\n      const keys = key.split(\" \");\n      // 将在最后一个key之前的key都放入attrs数组里面\n      for (let i = 0; i < keys.length - 1; i++) {\n        pre.push({ key: keys[i].trim(), val: \"\" });\n      }\n      // 最后一个key作为对于的value值\n      key = keys[keys.length - 1].trim();\n    }\n    // 在attrs里面添加attr的key及value\n    pre.push({ key: key.trim(), val: val.trim() });\n    return pre;\n  }, []);\n  return data;\n}\n\ngetKeyValue( ` class=\"a b  c \"   id=\"d \" data-b data-c data=1   data-a=\"111\" data-d`);\n\n// 输出\n// res(keyvalue)数组：\n [' class=a b  c ', '   id=d ', ' data-b data-c data=1 ', '  data-a=111', ' data-d']\n// data结果：\n[\n    {key: 'class', val: 'a b  c'},\n    {key: 'id', val: 'd'},\n    {key: 'data-b', val: ''},\n    {key: 'data-c', val: ''},\n    {key: 'data', val: '1'},\n    {key: 'data-a', val: '111'},\n    {key: 'data-d', val: ''},\n]\n```\n","slug":"【AST】-解析attrs","published":1,"date":"2025-08-13T07:28:27.588Z","updated":"2025-03-06T09:08:26.520Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6wm0000bofm6l69faab","content":"<h1 id=\"【AST】-解析-attrs\"><a href=\"#【AST】-解析-attrs\" class=\"headerlink\" title=\"【AST】-解析 attrs\"></a>【AST】-解析 attrs</h1><h2 id=\"考虑情况\"><a href=\"#考虑情况\" class=\"headerlink\" title=\"考虑情况\"></a>考虑情况</h2><ul>\n<li>普通情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span>=<span class=\"string\">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>空格情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span>=<span class=\"string\">&quot;a b c&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无引号情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无赋值情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data - a;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><h3 id=\"前情\"><a href=\"#前情\" class=\"headerlink\" title=\"前情\"></a>前情</h3><p>1、attrs 作为一整串字符串传入，因为第二种(空格)情况的存在，不能通过空格进行数组分割</p>\n<p>2、存在第二种(无引号)的情况，不能完全通过引号作为标志位进行分割</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li><p>以引号和等于同时作为标志位，对字符串进行切分。引号为第一准则，等号为附用</p>\n</li>\n<li><p>在切分 key 与 value 时，以等号作为分割符，但还需要检查 key 中是否存在空格，如果有空格，则表示存在第四种(无赋值情况)情况</p>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getKeyValue</span>(<span class=\"params\">strs</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存放key-value/attr字符的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"comment\">// 是否是有双引号的标志位</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> is_start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 是否是有等号的标志位</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> is_equal = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 存放每个key-value的字符</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历整个attrs字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strs.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    str += strs[i];</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前的字符是引号，那么表示一个attr值的开始或者结束，class=&quot;(开始)a&quot;(结束)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs[i] === <span class=\"string\">`&quot;`</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果之前已经出现了引号，那么表示这个引号是attr的结束位，class=&quot;a&quot;(结束)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_start) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 那么就需要将当前收集的字符存到attr的数组中</span></span><br><span class=\"line\">        str = str.<span class=\"title function_\">replaceAll</span>(<span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        res.<span class=\"title function_\">push</span>(str);</span><br><span class=\"line\">        <span class=\"comment\">// 需要重新收集，那么一切回到初始</span></span><br><span class=\"line\">        is_start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        is_equal = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前没有引号，那么表示这个引号是attr值的开始位，class=&quot;(开始)a&quot;</span></span><br><span class=\"line\">        is_start = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有=，但是没有&quot;表示开始，那么就表示是x=1的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs[i] === <span class=\"string\">&quot;=&quot;</span> &amp;&amp; !is_start) &#123;</span><br><span class=\"line\">      is_equal = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当时是空格，并且是出现过等号且没有出现过引号，那么表示是data=1的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs[i] === <span class=\"string\">&quot; &quot;</span> &amp;&amp; is_equal &amp;&amp; !is_start) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 那么就需要将当前收集的字符存到attr的数组中</span></span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(str);</span><br><span class=\"line\">      <span class=\"comment\">// 需要重新收集，那么一切回到初始</span></span><br><span class=\"line\">      is_start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      is_equal = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数据已经遍历完成，但是str还没有结束</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = res.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过等号将attr的str分隔开</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [key, val = <span class=\"string\">&quot;&quot;</span>] = cur.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 去掉key的左右空格</span></span><br><span class=\"line\">    key = key.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 如果key还存在空格，那么就表示是data-b data=1的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot; &quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要将key以空格分割开</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys = key.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 将在最后一个key之前的key都放入attrs数组里面</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        pre.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">key</span>: keys[i].<span class=\"title function_\">trim</span>(), <span class=\"attr\">val</span>: <span class=\"string\">&quot;&quot;</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 最后一个key作为对于的value值</span></span><br><span class=\"line\">      key = keys[keys.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在attrs里面添加attr的key及value</span></span><br><span class=\"line\">    pre.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">key</span>: key.<span class=\"title function_\">trim</span>(), <span class=\"attr\">val</span>: val.<span class=\"title function_\">trim</span>() &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getKeyValue</span>( <span class=\"string\">` class=&quot;a b  c &quot;   id=&quot;d &quot; data-b data-c data=1   data-a=&quot;111&quot; data-d`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// res(keyvalue)数组：</span></span><br><span class=\"line\"> [<span class=\"string\">&#x27; class=a b  c &#x27;</span>, <span class=\"string\">&#x27;   id=d &#x27;</span>, <span class=\"string\">&#x27; data-b data-c data=1 &#x27;</span>, <span class=\"string\">&#x27;  data-a=111&#x27;</span>, <span class=\"string\">&#x27; data-d&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// data结果：</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;class&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;a b  c&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;d&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-b&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-c&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;1&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-a&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;111&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-d&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h1 id=\"【AST】-解析-attrs\"><a href=\"#【AST】-解析-attrs\" class=\"headerlink\" title=\"【AST】-解析 attrs\"></a>【AST】-解析 attrs</h1><h2 id=\"考虑情况\"><a href=\"#考虑情况\" class=\"headerlink\" title=\"考虑情况\"></a>考虑情况</h2><ul>\n<li>普通情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span>=<span class=\"string\">&quot;a&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>空格情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span>=<span class=\"string\">&quot;a b c&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无引号情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>无赋值情况</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data - a;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h2><h3 id=\"前情\"><a href=\"#前情\" class=\"headerlink\" title=\"前情\"></a>前情</h3><p>1、attrs 作为一整串字符串传入，因为第二种(空格)情况的存在，不能通过空格进行数组分割</p>\n<p>2、存在第二种(无引号)的情况，不能完全通过引号作为标志位进行分割</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><ul>\n<li><p>以引号和等于同时作为标志位，对字符串进行切分。引号为第一准则，等号为附用</p>\n</li>\n<li><p>在切分 key 与 value 时，以等号作为分割符，但还需要检查 key 中是否存在空格，如果有空格，则表示存在第四种(无赋值情况)情况</p>\n</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getKeyValue</span>(<span class=\"params\">strs</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 存放key-value/attr字符的数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\">  <span class=\"comment\">// 是否是有双引号的标志位</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> is_start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 是否是有等号的标志位</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> is_equal = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 存放每个key-value的字符</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 遍历整个attrs字符串</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strs.<span class=\"property\">length</span>; i++) &#123;</span><br><span class=\"line\">    str += strs[i];</span><br><span class=\"line\">    <span class=\"comment\">// 如果当前的字符是引号，那么表示一个attr值的开始或者结束，class=&quot;(开始)a&quot;(结束)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs[i] === <span class=\"string\">`&quot;`</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 如果之前已经出现了引号，那么表示这个引号是attr的结束位，class=&quot;a&quot;(结束)</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (is_start) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 那么就需要将当前收集的字符存到attr的数组中</span></span><br><span class=\"line\">        str = str.<span class=\"title function_\">replaceAll</span>(<span class=\"string\">&#x27;&quot;&#x27;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">        res.<span class=\"title function_\">push</span>(str);</span><br><span class=\"line\">        <span class=\"comment\">// 需要重新收集，那么一切回到初始</span></span><br><span class=\"line\">        is_start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        is_equal = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果之前没有引号，那么表示这个引号是attr值的开始位，class=&quot;(开始)a&quot;</span></span><br><span class=\"line\">        is_start = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果有=，但是没有&quot;表示开始，那么就表示是x=1的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs[i] === <span class=\"string\">&quot;=&quot;</span> &amp;&amp; !is_start) &#123;</span><br><span class=\"line\">      is_equal = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果当时是空格，并且是出现过等号且没有出现过引号，那么表示是data=1的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (strs[i] === <span class=\"string\">&quot; &quot;</span> &amp;&amp; is_equal &amp;&amp; !is_start) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 那么就需要将当前收集的字符存到attr的数组中</span></span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(str);</span><br><span class=\"line\">      <span class=\"comment\">// 需要重新收集，那么一切回到初始</span></span><br><span class=\"line\">      is_start = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      is_equal = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      str = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 数据已经遍历完成，但是str还没有结束</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (str) &#123;</span><br><span class=\"line\">    res.<span class=\"title function_\">push</span>(str);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> data = res.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">pre, cur</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过等号将attr的str分隔开</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> [key, val = <span class=\"string\">&quot;&quot;</span>] = cur.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;=&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 去掉key的左右空格</span></span><br><span class=\"line\">    key = key.<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 如果key还存在空格，那么就表示是data-b data=1的情况</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (key.<span class=\"title function_\">includes</span>(<span class=\"string\">&quot; &quot;</span>)) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 需要将key以空格分割开</span></span><br><span class=\"line\">      <span class=\"keyword\">const</span> keys = key.<span class=\"title function_\">split</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 将在最后一个key之前的key都放入attrs数组里面</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; keys.<span class=\"property\">length</span> - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        pre.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">key</span>: keys[i].<span class=\"title function_\">trim</span>(), <span class=\"attr\">val</span>: <span class=\"string\">&quot;&quot;</span> &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 最后一个key作为对于的value值</span></span><br><span class=\"line\">      key = keys[keys.<span class=\"property\">length</span> - <span class=\"number\">1</span>].<span class=\"title function_\">trim</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 在attrs里面添加attr的key及value</span></span><br><span class=\"line\">    pre.<span class=\"title function_\">push</span>(&#123; <span class=\"attr\">key</span>: key.<span class=\"title function_\">trim</span>(), <span class=\"attr\">val</span>: val.<span class=\"title function_\">trim</span>() &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">getKeyValue</span>( <span class=\"string\">` class=&quot;a b  c &quot;   id=&quot;d &quot; data-b data-c data=1   data-a=&quot;111&quot; data-d`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 输出</span></span><br><span class=\"line\"><span class=\"comment\">// res(keyvalue)数组：</span></span><br><span class=\"line\"> [<span class=\"string\">&#x27; class=a b  c &#x27;</span>, <span class=\"string\">&#x27;   id=d &#x27;</span>, <span class=\"string\">&#x27; data-b data-c data=1 &#x27;</span>, <span class=\"string\">&#x27;  data-a=111&#x27;</span>, <span class=\"string\">&#x27; data-d&#x27;</span>]</span><br><span class=\"line\"><span class=\"comment\">// data结果：</span></span><br><span class=\"line\">[</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;class&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;a b  c&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;id&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;d&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-b&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-c&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;1&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-a&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;111&#x27;</span>&#125;,</span><br><span class=\"line\">    &#123;<span class=\"attr\">key</span>: <span class=\"string\">&#x27;data-d&#x27;</span>, <span class=\"attr\">val</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;,</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"date":"2025-08-13T07:26:35.563Z","updated":"2025-03-06T09:08:26.519Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6wv0001bofmgtg6dgfo","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"【wasb】环境搭建","time":"2023-09-09T05:41:58.000Z","_content":"# 【webAsb】- Emscripten环境搭建\n\n## 依赖环境\n\n- python\n\n- git\n\n这两项环境是必要的，否则无法进行安装\n\n## 安装\n\n### 下载项目\n\n``` js\ngit clone https://github.com/juj/emsdk.git\n```\n下载emscripten项目\n\n### 安装依赖包等\n\n``` js\ncd emsdk // 进入项目目录中\nemsdk update // 安装各种工具\nemsdk install latest //下载各种包，时间比较长\nemsdk activate latest //生成 ~/.emscripten 文件，激活配置\n```\n\n[![pP6oCWT.png](https://s1.ax1x.com/2023/09/09/pP6oCWT.png)](https://imgse.com/i/pP6oCWT)\n\n### 配置环境变量\n\n可以先执行`emsdk_env`脚本，这个脚本默认会写入环境变量，但是也会有不成功的情况。\n\n在非emsdk目录下执行`emcc --version`，判断是否报错，如果报错，就证明环境并未配置成功；如果未报错，那么环境已经配置完成啦\n\n#### 环境未配置成功\n\n- 执行 `emcmdprompt.bat`命令\n\n  [![pP6xUSA.png](https://s1.ax1x.com/2023/09/09/pP6xUSA.png)](https://imgse.com/i/pP6xUSA)\n\n- 将带有`PATH +=`的路径写入环境变量的Path中\n\n  [![pP6zKhQ.png](https://s1.ax1x.com/2023/09/09/pP6zKhQ.png)](https://imgse.com/i/pP6zKhQ)\n\n- 将下面带有键值对的写入系统变量中\n\n  记住不能有空格，否则会执行不成功\n\n  [![pP6z1cn.png](https://s1.ax1x.com/2023/09/09/pP6z1cn.png)](https://imgse.com/i/pP6z1cn)\n\n- 在非`emsdk`目录下执行`emcc --version`\n\n  [![pP6zJBV.png](https://s1.ax1x.com/2023/09/09/pP6zJBV.png)](https://imgse.com/i/pP6zJBV)\n\n  环境配置成功\n\n## 配置c++环境\n\n### 安装配置c/c++\n\n- 安装\n\n  安装c/c++编译器：https://sourceforge.net/projects/mingw-w64/\n\n- 配置\n\n  在环境变量的Path中，把解压的mingw的bin目录加入进去\n\n### 测试\n\n在cmd输入`gcc -v`，没有报错即可\n\n[![pPIgD91.png](https://z1.ax1x.com/2023/09/21/pPIgD91.png)](https://imgse.com/i/pPIgD91)\n\n[参链](https://blog.csdn.net/weixin_43180456/article/details/126374156)\n\n## 测试\n\n### 编写测试程序\n\n建立一个cpp文件，写入c的代码\n\n``` c++\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    cout << \"Hello, world!\" << endl;\n    return 0;\n}\n```\n\n### 生成js代码\n\n> `emcc test.cpp -o test.html`\n\n会生成`html`，`js`和`wasm`文件，html默认引入js文件，js的作用是引入wasm文件\n\n - `-s` 表明编译到 Wasm，否则编译到 Asm.js（Wasm 的前身）， 最初 emscripten 是用于编译到 Asm.js 的。\n\n - `SIDE_MODULE` 表明编译为副模块。有副模块就有主模块，简单理解副模块会去除 C 标准库函数，因为副模块会在运行时被链接到一个主模块，而主模块有C标准库函数。SIDE_MODULE的值可选 1 或者 2，前者会自动导出代码里所有的函数，而后者需要手动声明。\n\n - `-o` xxxx 导出选项，导出的文件可选 .html、.js、.wasm，区别在于前面两者会帮你把胶水代码写好 ，而 .wasm 则需要在 JS 自己编写胶水代码了，但是前面两者代码冗余，比如编译为 JS 文件时，JS 文件会包含两千多行代码，不过这是学习 Wasm 的现成实例。\n\n### 搭建本地服务器\n\n在代码路径中，搭建本地服务。在浏览器访问本地的文件会报错\n\n- `pnpm init`\n\n  创建package.json文件\n  \n- `pnpm i http-server`\n\n  安装`http-server`\n\n- `http-server -o`\n\n  起本地服务，在浏览器打开html文件\n  \n### 验收\n\n用`http-server`起了本地服务后，在浏览器访问对应的域名加上生成的html文件，正常运行项目\n\n[![pPIfE5Q.png](https://z1.ax1x.com/2023/09/21/pPIfE5Q.png)](https://imgse.com/i/pPIfE5Q)\n\n## 参链\n\n[Emscripten编译器安装教程，亲测成功编译出第一个WebAssembly](http://www.taodudu.cc/news/show-5750307.html?action=onClick)","source":"_posts/【wasb】环境搭建.md","raw":"---\ntitle: 【wasb】环境搭建\ntime: 2023-09-09 13:41:58\ncategories: webAssembly\n---\n# 【webAsb】- Emscripten环境搭建\n\n## 依赖环境\n\n- python\n\n- git\n\n这两项环境是必要的，否则无法进行安装\n\n## 安装\n\n### 下载项目\n\n``` js\ngit clone https://github.com/juj/emsdk.git\n```\n下载emscripten项目\n\n### 安装依赖包等\n\n``` js\ncd emsdk // 进入项目目录中\nemsdk update // 安装各种工具\nemsdk install latest //下载各种包，时间比较长\nemsdk activate latest //生成 ~/.emscripten 文件，激活配置\n```\n\n[![pP6oCWT.png](https://s1.ax1x.com/2023/09/09/pP6oCWT.png)](https://imgse.com/i/pP6oCWT)\n\n### 配置环境变量\n\n可以先执行`emsdk_env`脚本，这个脚本默认会写入环境变量，但是也会有不成功的情况。\n\n在非emsdk目录下执行`emcc --version`，判断是否报错，如果报错，就证明环境并未配置成功；如果未报错，那么环境已经配置完成啦\n\n#### 环境未配置成功\n\n- 执行 `emcmdprompt.bat`命令\n\n  [![pP6xUSA.png](https://s1.ax1x.com/2023/09/09/pP6xUSA.png)](https://imgse.com/i/pP6xUSA)\n\n- 将带有`PATH +=`的路径写入环境变量的Path中\n\n  [![pP6zKhQ.png](https://s1.ax1x.com/2023/09/09/pP6zKhQ.png)](https://imgse.com/i/pP6zKhQ)\n\n- 将下面带有键值对的写入系统变量中\n\n  记住不能有空格，否则会执行不成功\n\n  [![pP6z1cn.png](https://s1.ax1x.com/2023/09/09/pP6z1cn.png)](https://imgse.com/i/pP6z1cn)\n\n- 在非`emsdk`目录下执行`emcc --version`\n\n  [![pP6zJBV.png](https://s1.ax1x.com/2023/09/09/pP6zJBV.png)](https://imgse.com/i/pP6zJBV)\n\n  环境配置成功\n\n## 配置c++环境\n\n### 安装配置c/c++\n\n- 安装\n\n  安装c/c++编译器：https://sourceforge.net/projects/mingw-w64/\n\n- 配置\n\n  在环境变量的Path中，把解压的mingw的bin目录加入进去\n\n### 测试\n\n在cmd输入`gcc -v`，没有报错即可\n\n[![pPIgD91.png](https://z1.ax1x.com/2023/09/21/pPIgD91.png)](https://imgse.com/i/pPIgD91)\n\n[参链](https://blog.csdn.net/weixin_43180456/article/details/126374156)\n\n## 测试\n\n### 编写测试程序\n\n建立一个cpp文件，写入c的代码\n\n``` c++\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    cout << \"Hello, world!\" << endl;\n    return 0;\n}\n```\n\n### 生成js代码\n\n> `emcc test.cpp -o test.html`\n\n会生成`html`，`js`和`wasm`文件，html默认引入js文件，js的作用是引入wasm文件\n\n - `-s` 表明编译到 Wasm，否则编译到 Asm.js（Wasm 的前身）， 最初 emscripten 是用于编译到 Asm.js 的。\n\n - `SIDE_MODULE` 表明编译为副模块。有副模块就有主模块，简单理解副模块会去除 C 标准库函数，因为副模块会在运行时被链接到一个主模块，而主模块有C标准库函数。SIDE_MODULE的值可选 1 或者 2，前者会自动导出代码里所有的函数，而后者需要手动声明。\n\n - `-o` xxxx 导出选项，导出的文件可选 .html、.js、.wasm，区别在于前面两者会帮你把胶水代码写好 ，而 .wasm 则需要在 JS 自己编写胶水代码了，但是前面两者代码冗余，比如编译为 JS 文件时，JS 文件会包含两千多行代码，不过这是学习 Wasm 的现成实例。\n\n### 搭建本地服务器\n\n在代码路径中，搭建本地服务。在浏览器访问本地的文件会报错\n\n- `pnpm init`\n\n  创建package.json文件\n  \n- `pnpm i http-server`\n\n  安装`http-server`\n\n- `http-server -o`\n\n  起本地服务，在浏览器打开html文件\n  \n### 验收\n\n用`http-server`起了本地服务后，在浏览器访问对应的域名加上生成的html文件，正常运行项目\n\n[![pPIfE5Q.png](https://z1.ax1x.com/2023/09/21/pPIfE5Q.png)](https://imgse.com/i/pPIfE5Q)\n\n## 参链\n\n[Emscripten编译器安装教程，亲测成功编译出第一个WebAssembly](http://www.taodudu.cc/news/show-5750307.html?action=onClick)","slug":"【wasb】环境搭建","published":1,"date":"2025-08-13T07:28:27.597Z","updated":"2025-03-06T09:08:26.521Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6wz0004bofmaak91x9m","content":"<h1 id=\"【webAsb】-Emscripten环境搭建\"><a href=\"#【webAsb】-Emscripten环境搭建\" class=\"headerlink\" title=\"【webAsb】- Emscripten环境搭建\"></a>【webAsb】- Emscripten环境搭建</h1><h2 id=\"依赖环境\"><a href=\"#依赖环境\" class=\"headerlink\" title=\"依赖环境\"></a>依赖环境</h2><ul>\n<li><p>python</p>\n</li>\n<li><p>git</p>\n</li>\n</ul>\n<p>这两项环境是必要的，否则无法进行安装</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"下载项目\"><a href=\"#下载项目\" class=\"headerlink\" title=\"下载项目\"></a>下载项目</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone <span class=\"attr\">https</span>:<span class=\"comment\">//github.com/juj/emsdk.git</span></span><br></pre></td></tr></table></figure>\n<p>下载emscripten项目</p>\n<h3 id=\"安装依赖包等\"><a href=\"#安装依赖包等\" class=\"headerlink\" title=\"安装依赖包等\"></a>安装依赖包等</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd emsdk <span class=\"comment\">// 进入项目目录中</span></span><br><span class=\"line\">emsdk update <span class=\"comment\">// 安装各种工具</span></span><br><span class=\"line\">emsdk install latest <span class=\"comment\">//下载各种包，时间比较长</span></span><br><span class=\"line\">emsdk activate latest <span class=\"comment\">//生成 ~/.emscripten 文件，激活配置</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pP6oCWT\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6oCWT.png\" alt=\"pP6oCWT.png\"></a></p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>可以先执行<code>emsdk_env</code>脚本，这个脚本默认会写入环境变量，但是也会有不成功的情况。</p>\n<p>在非emsdk目录下执行<code>emcc --version</code>，判断是否报错，如果报错，就证明环境并未配置成功；如果未报错，那么环境已经配置完成啦</p>\n<h4 id=\"环境未配置成功\"><a href=\"#环境未配置成功\" class=\"headerlink\" title=\"环境未配置成功\"></a>环境未配置成功</h4><ul>\n<li><p>执行 <code>emcmdprompt.bat</code>命令</p>\n<p><a href=\"https://imgse.com/i/pP6xUSA\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6xUSA.png\" alt=\"pP6xUSA.png\"></a></p>\n</li>\n<li><p>将带有<code>PATH +=</code>的路径写入环境变量的Path中</p>\n<p><a href=\"https://imgse.com/i/pP6zKhQ\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6zKhQ.png\" alt=\"pP6zKhQ.png\"></a></p>\n</li>\n<li><p>将下面带有键值对的写入系统变量中</p>\n<p>记住不能有空格，否则会执行不成功</p>\n<p><a href=\"https://imgse.com/i/pP6z1cn\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6z1cn.png\" alt=\"pP6z1cn.png\"></a></p>\n</li>\n<li><p>在非<code>emsdk</code>目录下执行<code>emcc --version</code></p>\n<p><a href=\"https://imgse.com/i/pP6zJBV\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6zJBV.png\" alt=\"pP6zJBV.png\"></a></p>\n<p>环境配置成功</p>\n</li>\n</ul>\n<h2 id=\"配置c-环境\"><a href=\"#配置c-环境\" class=\"headerlink\" title=\"配置c++环境\"></a>配置c++环境</h2><h3 id=\"安装配置c-c\"><a href=\"#安装配置c-c\" class=\"headerlink\" title=\"安装配置c&#x2F;c++\"></a>安装配置c&#x2F;c++</h3><ul>\n<li><p>安装</p>\n<p>安装c&#x2F;c++编译器：<a href=\"https://sourceforge.net/projects/mingw-w64/\">https://sourceforge.net/projects/mingw-w64/</a></p>\n</li>\n<li><p>配置</p>\n<p>在环境变量的Path中，把解压的mingw的bin目录加入进去</p>\n</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在cmd输入<code>gcc -v</code>，没有报错即可</p>\n<p><a href=\"https://imgse.com/i/pPIgD91\"><img src=\"https://z1.ax1x.com/2023/09/21/pPIgD91.png\" alt=\"pPIgD91.png\"></a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43180456/article/details/126374156\">参链</a></p>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"编写测试程序\"><a href=\"#编写测试程序\" class=\"headerlink\" title=\"编写测试程序\"></a>编写测试程序</h3><p>建立一个cpp文件，写入c的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成js代码\"><a href=\"#生成js代码\" class=\"headerlink\" title=\"生成js代码\"></a>生成js代码</h3><blockquote>\n<p><code>emcc test.cpp -o test.html</code></p>\n</blockquote>\n<p>会生成<code>html</code>，<code>js</code>和<code>wasm</code>文件，html默认引入js文件，js的作用是引入wasm文件</p>\n<ul>\n<li><p><code>-s</code> 表明编译到 Wasm，否则编译到 Asm.js（Wasm 的前身）， 最初 emscripten 是用于编译到 Asm.js 的。</p>\n</li>\n<li><p><code>SIDE_MODULE</code> 表明编译为副模块。有副模块就有主模块，简单理解副模块会去除 C 标准库函数，因为副模块会在运行时被链接到一个主模块，而主模块有C标准库函数。SIDE_MODULE的值可选 1 或者 2，前者会自动导出代码里所有的函数，而后者需要手动声明。</p>\n</li>\n<li><p><code>-o</code> xxxx 导出选项，导出的文件可选 .html、.js、.wasm，区别在于前面两者会帮你把胶水代码写好 ，而 .wasm 则需要在 JS 自己编写胶水代码了，但是前面两者代码冗余，比如编译为 JS 文件时，JS 文件会包含两千多行代码，不过这是学习 Wasm 的现成实例。</p>\n</li>\n</ul>\n<h3 id=\"搭建本地服务器\"><a href=\"#搭建本地服务器\" class=\"headerlink\" title=\"搭建本地服务器\"></a>搭建本地服务器</h3><p>在代码路径中，搭建本地服务。在浏览器访问本地的文件会报错</p>\n<ul>\n<li><p><code>pnpm init</code></p>\n<p>创建package.json文件</p>\n</li>\n<li><p><code>pnpm i http-server</code></p>\n<p>安装<code>http-server</code></p>\n</li>\n<li><p><code>http-server -o</code></p>\n<p>起本地服务，在浏览器打开html文件</p>\n</li>\n</ul>\n<h3 id=\"验收\"><a href=\"#验收\" class=\"headerlink\" title=\"验收\"></a>验收</h3><p>用<code>http-server</code>起了本地服务后，在浏览器访问对应的域名加上生成的html文件，正常运行项目</p>\n<p><a href=\"https://imgse.com/i/pPIfE5Q\"><img src=\"https://z1.ax1x.com/2023/09/21/pPIfE5Q.png\" alt=\"pPIfE5Q.png\"></a></p>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"http://www.taodudu.cc/news/show-5750307.html?action=onClick\">Emscripten编译器安装教程，亲测成功编译出第一个WebAssembly</a></p>\n","excerpt":"","more":"<h1 id=\"【webAsb】-Emscripten环境搭建\"><a href=\"#【webAsb】-Emscripten环境搭建\" class=\"headerlink\" title=\"【webAsb】- Emscripten环境搭建\"></a>【webAsb】- Emscripten环境搭建</h1><h2 id=\"依赖环境\"><a href=\"#依赖环境\" class=\"headerlink\" title=\"依赖环境\"></a>依赖环境</h2><ul>\n<li><p>python</p>\n</li>\n<li><p>git</p>\n</li>\n</ul>\n<p>这两项环境是必要的，否则无法进行安装</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"下载项目\"><a href=\"#下载项目\" class=\"headerlink\" title=\"下载项目\"></a>下载项目</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone <span class=\"attr\">https</span>:<span class=\"comment\">//github.com/juj/emsdk.git</span></span><br></pre></td></tr></table></figure>\n<p>下载emscripten项目</p>\n<h3 id=\"安装依赖包等\"><a href=\"#安装依赖包等\" class=\"headerlink\" title=\"安装依赖包等\"></a>安装依赖包等</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd emsdk <span class=\"comment\">// 进入项目目录中</span></span><br><span class=\"line\">emsdk update <span class=\"comment\">// 安装各种工具</span></span><br><span class=\"line\">emsdk install latest <span class=\"comment\">//下载各种包，时间比较长</span></span><br><span class=\"line\">emsdk activate latest <span class=\"comment\">//生成 ~/.emscripten 文件，激活配置</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pP6oCWT\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6oCWT.png\" alt=\"pP6oCWT.png\"></a></p>\n<h3 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h3><p>可以先执行<code>emsdk_env</code>脚本，这个脚本默认会写入环境变量，但是也会有不成功的情况。</p>\n<p>在非emsdk目录下执行<code>emcc --version</code>，判断是否报错，如果报错，就证明环境并未配置成功；如果未报错，那么环境已经配置完成啦</p>\n<h4 id=\"环境未配置成功\"><a href=\"#环境未配置成功\" class=\"headerlink\" title=\"环境未配置成功\"></a>环境未配置成功</h4><ul>\n<li><p>执行 <code>emcmdprompt.bat</code>命令</p>\n<p><a href=\"https://imgse.com/i/pP6xUSA\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6xUSA.png\" alt=\"pP6xUSA.png\"></a></p>\n</li>\n<li><p>将带有<code>PATH +=</code>的路径写入环境变量的Path中</p>\n<p><a href=\"https://imgse.com/i/pP6zKhQ\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6zKhQ.png\" alt=\"pP6zKhQ.png\"></a></p>\n</li>\n<li><p>将下面带有键值对的写入系统变量中</p>\n<p>记住不能有空格，否则会执行不成功</p>\n<p><a href=\"https://imgse.com/i/pP6z1cn\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6z1cn.png\" alt=\"pP6z1cn.png\"></a></p>\n</li>\n<li><p>在非<code>emsdk</code>目录下执行<code>emcc --version</code></p>\n<p><a href=\"https://imgse.com/i/pP6zJBV\"><img src=\"https://s1.ax1x.com/2023/09/09/pP6zJBV.png\" alt=\"pP6zJBV.png\"></a></p>\n<p>环境配置成功</p>\n</li>\n</ul>\n<h2 id=\"配置c-环境\"><a href=\"#配置c-环境\" class=\"headerlink\" title=\"配置c++环境\"></a>配置c++环境</h2><h3 id=\"安装配置c-c\"><a href=\"#安装配置c-c\" class=\"headerlink\" title=\"安装配置c&#x2F;c++\"></a>安装配置c&#x2F;c++</h3><ul>\n<li><p>安装</p>\n<p>安装c&#x2F;c++编译器：<a href=\"https://sourceforge.net/projects/mingw-w64/\">https://sourceforge.net/projects/mingw-w64/</a></p>\n</li>\n<li><p>配置</p>\n<p>在环境变量的Path中，把解压的mingw的bin目录加入进去</p>\n</li>\n</ul>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在cmd输入<code>gcc -v</code>，没有报错即可</p>\n<p><a href=\"https://imgse.com/i/pPIgD91\"><img src=\"https://z1.ax1x.com/2023/09/21/pPIgD91.png\" alt=\"pPIgD91.png\"></a></p>\n<p><a href=\"https://blog.csdn.net/weixin_43180456/article/details/126374156\">参链</a></p>\n<h2 id=\"测试-1\"><a href=\"#测试-1\" class=\"headerlink\" title=\"测试\"></a>测试</h2><h3 id=\"编写测试程序\"><a href=\"#编写测试程序\" class=\"headerlink\" title=\"编写测试程序\"></a>编写测试程序</h3><p>建立一个cpp文件，写入c的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;Hello, world!&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成js代码\"><a href=\"#生成js代码\" class=\"headerlink\" title=\"生成js代码\"></a>生成js代码</h3><blockquote>\n<p><code>emcc test.cpp -o test.html</code></p>\n</blockquote>\n<p>会生成<code>html</code>，<code>js</code>和<code>wasm</code>文件，html默认引入js文件，js的作用是引入wasm文件</p>\n<ul>\n<li><p><code>-s</code> 表明编译到 Wasm，否则编译到 Asm.js（Wasm 的前身）， 最初 emscripten 是用于编译到 Asm.js 的。</p>\n</li>\n<li><p><code>SIDE_MODULE</code> 表明编译为副模块。有副模块就有主模块，简单理解副模块会去除 C 标准库函数，因为副模块会在运行时被链接到一个主模块，而主模块有C标准库函数。SIDE_MODULE的值可选 1 或者 2，前者会自动导出代码里所有的函数，而后者需要手动声明。</p>\n</li>\n<li><p><code>-o</code> xxxx 导出选项，导出的文件可选 .html、.js、.wasm，区别在于前面两者会帮你把胶水代码写好 ，而 .wasm 则需要在 JS 自己编写胶水代码了，但是前面两者代码冗余，比如编译为 JS 文件时，JS 文件会包含两千多行代码，不过这是学习 Wasm 的现成实例。</p>\n</li>\n</ul>\n<h3 id=\"搭建本地服务器\"><a href=\"#搭建本地服务器\" class=\"headerlink\" title=\"搭建本地服务器\"></a>搭建本地服务器</h3><p>在代码路径中，搭建本地服务。在浏览器访问本地的文件会报错</p>\n<ul>\n<li><p><code>pnpm init</code></p>\n<p>创建package.json文件</p>\n</li>\n<li><p><code>pnpm i http-server</code></p>\n<p>安装<code>http-server</code></p>\n</li>\n<li><p><code>http-server -o</code></p>\n<p>起本地服务，在浏览器打开html文件</p>\n</li>\n</ul>\n<h3 id=\"验收\"><a href=\"#验收\" class=\"headerlink\" title=\"验收\"></a>验收</h3><p>用<code>http-server</code>起了本地服务后，在浏览器访问对应的域名加上生成的html文件，正常运行项目</p>\n<p><a href=\"https://imgse.com/i/pPIfE5Q\"><img src=\"https://z1.ax1x.com/2023/09/21/pPIfE5Q.png\" alt=\"pPIfE5Q.png\"></a></p>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"http://www.taodudu.cc/news/show-5750307.html?action=onClick\">Emscripten编译器安装教程，亲测成功编译出第一个WebAssembly</a></p>\n"},{"title":"【手写】call、apply、bind","_content":"\n## _call_\n\ncall 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象\n\n### 内部流程\n\n[es 文档](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call)上编写的流程如下:\n\n- 让一个函数 func 指向 this\n\n- 如果这个函数 func 不能被调用，那么抛出 TypeError\n\n- 准备尾调用 PrepareForTailCall\n\n- 返回执行结果\n\n思路\n\n- 判断需要改变的 context 是否为空，如果为空，那么就默认指为 window。保留这个新的 context，作为后面函数调用时需要的 this 指向\n\n- 将当前的 this 指向赋值给上一步保留的 context，作为 context 的一个属性\n\n- 调用第一步保留的 context 的第二步赋值的属性函数，将所需要的参数传递给上一步新赋值的属性\n\n### 实现\n\n- call\n\n```js\nfunction call_handle_writing(fn) {\n  // ctx指向obj，因为fn为非空\n  const ctx = fn || window;\n  //   ctx.cb指向的是fn1\n  ctx.cb = this;\n  //   获取参数\n  const args = [...arguments].slice(1);\n  //   调用fn1函数，但是由于是ctx调用的，那么fn1被调用的时候的this指向是ctx\n  const res = ctx.cb(...args);\n  return res;\n}\n\nFunction.prototype.call_handle_writing = call_handle_writing;\n```\n\n- 使用\n\n```js\nfunction fn1() {\n  this.a = 1;\n  console.log(\"out\", this, arguments);\n}\nlet obj = {\n  a: 100,\n};\nfn1.call_handle_writing(obj, 1, 2, 3);\n```\n\n## apply\n\n### 实现流程\n\n> 1.  Let func be the this value.\n> 2.  If IsCallable(func) is false, throw a TypeError exception.\n> 3.  If argArray is either undefined or null, then\n>     > a. Perform PrepareForTailCall().<br />\n>     > b. Return ? <font color=red>Call(func, thisArg).</font>\n> 4.  Let argList be ? CreateListFromArrayLike(argArray).\n> 5.  Perform PrepareForTailCall().\n> 6.  Return ? Call(func, thisArg, argList).\n\n其实就是接受一个数组作为参数，实际最后的调用时，调用的也是 call 方法\n\napply 调用 call 的时候，会用到扩展运算符，将参数放到 call 的参数中，因此这在一定程度上，导致了 apply 的性能会稍低于 call\n\n### 具体实现\n\n```js\nfunction apply_handle_writing(fn, params) {\n  if (Array.isArray(params)) {\n    return this.call_handle_writing(fn, ...params);\n  }\n  return this.call_handle_writing(fn);\n}\nFunction.prototype.apply_handle_writing = apply_handle_writing;\n```\n\n## bind\n\n### 内部流程\n\n> 1. Let Target be the this value.\n> 2. If IsCallable(Target) is false, throw a TypeError exception.\n> 3. Let F be ? BoundFunctionCreate(Target, thisArg, args).\n> 4. Let L be 0.\n> 5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n> 6. If targetHasLength is true, then\n>    > a. Let targetLen be ? Get(Target, \"length\").<br/>\n>    > b. If targetLen is a Number, then<br/>\n>    >\n>    > > i. If targetLen is +∞𝔽, set L to +∞.<br/>\n>    > >\n>    > > > ii. Else if targetLen is -∞𝔽, set L to 0.<br/>\n>    > > > iii. Else,\n> 7. Let targetLenAsInt be ! ToIntegerOrInfinity(targetLen).\n> 8. Assert: targetLenAsInt is finite.\n> 9. Let argCount be the number of elements in args.\n> 10. Set L to max(targetLenAsInt - argCount, 0).\n> 11. Perform SetFunctionLength(F, L).\n> 12. Let targetName be ? Get(Target, \"name\").\n> 13. If targetName is not a String, set targetName to the empty String.\n> 14. Perform SetFunctionName(F, targetName, \"bound\").\n> 15. Return F.\n\n考虑场景：\n\n```js\nfunction A() {}\nA.prototype.say = function () {};\nfunction B() {}\nconst C = A.bind(B);\nconst c = new C();\n```\n\n- 调用 bind 后，使用`new`去创建一个实例，那么在`new`的时候不应该改变`this`指向\n\n  在返回的函数中，用`instanceof`判断是否是通过`new`方法进行调用的\n\n- 调用 bind 后，在 c 上面可以调用 A 上 `prototype` 的方法\n\n  采用继承的方式，在返回的函数上，继承 A\n\n### 具体实现\n\n```js\nfunction bind_handle_writing(fn) {\n  const that = this;\n  const args = [...arguments].slice(1);\n  function cb() {\n    const params = [...arguments, ...args];\n    fn = this instanceof cb ? this : fn;\n    return that.call(fn, ...params);\n  }\n  // 用一个中间函数，在原型链上加一层，防止属性覆盖\n  const buf = function () {};\n  buf.prototype = this.prototype;\n  cb.prototype = Object.create(this.prototype);\n  return cb;\n}\nFunction.prototype.bind_handle_writing = bind_handle_writing;\n```\n\n### 参考链接\n\n[如何手写一个 bind 方法](https://www.jianshu.com/p/b540e1e17f54)\n","source":"_posts/【手写】call、apply、bind.md","raw":"---\ntitle: 【手写】call、apply、bind\ncategories: js\n---\n\n## _call_\n\ncall 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象\n\n### 内部流程\n\n[es 文档](https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call)上编写的流程如下:\n\n- 让一个函数 func 指向 this\n\n- 如果这个函数 func 不能被调用，那么抛出 TypeError\n\n- 准备尾调用 PrepareForTailCall\n\n- 返回执行结果\n\n思路\n\n- 判断需要改变的 context 是否为空，如果为空，那么就默认指为 window。保留这个新的 context，作为后面函数调用时需要的 this 指向\n\n- 将当前的 this 指向赋值给上一步保留的 context，作为 context 的一个属性\n\n- 调用第一步保留的 context 的第二步赋值的属性函数，将所需要的参数传递给上一步新赋值的属性\n\n### 实现\n\n- call\n\n```js\nfunction call_handle_writing(fn) {\n  // ctx指向obj，因为fn为非空\n  const ctx = fn || window;\n  //   ctx.cb指向的是fn1\n  ctx.cb = this;\n  //   获取参数\n  const args = [...arguments].slice(1);\n  //   调用fn1函数，但是由于是ctx调用的，那么fn1被调用的时候的this指向是ctx\n  const res = ctx.cb(...args);\n  return res;\n}\n\nFunction.prototype.call_handle_writing = call_handle_writing;\n```\n\n- 使用\n\n```js\nfunction fn1() {\n  this.a = 1;\n  console.log(\"out\", this, arguments);\n}\nlet obj = {\n  a: 100,\n};\nfn1.call_handle_writing(obj, 1, 2, 3);\n```\n\n## apply\n\n### 实现流程\n\n> 1.  Let func be the this value.\n> 2.  If IsCallable(func) is false, throw a TypeError exception.\n> 3.  If argArray is either undefined or null, then\n>     > a. Perform PrepareForTailCall().<br />\n>     > b. Return ? <font color=red>Call(func, thisArg).</font>\n> 4.  Let argList be ? CreateListFromArrayLike(argArray).\n> 5.  Perform PrepareForTailCall().\n> 6.  Return ? Call(func, thisArg, argList).\n\n其实就是接受一个数组作为参数，实际最后的调用时，调用的也是 call 方法\n\napply 调用 call 的时候，会用到扩展运算符，将参数放到 call 的参数中，因此这在一定程度上，导致了 apply 的性能会稍低于 call\n\n### 具体实现\n\n```js\nfunction apply_handle_writing(fn, params) {\n  if (Array.isArray(params)) {\n    return this.call_handle_writing(fn, ...params);\n  }\n  return this.call_handle_writing(fn);\n}\nFunction.prototype.apply_handle_writing = apply_handle_writing;\n```\n\n## bind\n\n### 内部流程\n\n> 1. Let Target be the this value.\n> 2. If IsCallable(Target) is false, throw a TypeError exception.\n> 3. Let F be ? BoundFunctionCreate(Target, thisArg, args).\n> 4. Let L be 0.\n> 5. Let targetHasLength be ? HasOwnProperty(Target, \"length\").\n> 6. If targetHasLength is true, then\n>    > a. Let targetLen be ? Get(Target, \"length\").<br/>\n>    > b. If targetLen is a Number, then<br/>\n>    >\n>    > > i. If targetLen is +∞𝔽, set L to +∞.<br/>\n>    > >\n>    > > > ii. Else if targetLen is -∞𝔽, set L to 0.<br/>\n>    > > > iii. Else,\n> 7. Let targetLenAsInt be ! ToIntegerOrInfinity(targetLen).\n> 8. Assert: targetLenAsInt is finite.\n> 9. Let argCount be the number of elements in args.\n> 10. Set L to max(targetLenAsInt - argCount, 0).\n> 11. Perform SetFunctionLength(F, L).\n> 12. Let targetName be ? Get(Target, \"name\").\n> 13. If targetName is not a String, set targetName to the empty String.\n> 14. Perform SetFunctionName(F, targetName, \"bound\").\n> 15. Return F.\n\n考虑场景：\n\n```js\nfunction A() {}\nA.prototype.say = function () {};\nfunction B() {}\nconst C = A.bind(B);\nconst c = new C();\n```\n\n- 调用 bind 后，使用`new`去创建一个实例，那么在`new`的时候不应该改变`this`指向\n\n  在返回的函数中，用`instanceof`判断是否是通过`new`方法进行调用的\n\n- 调用 bind 后，在 c 上面可以调用 A 上 `prototype` 的方法\n\n  采用继承的方式，在返回的函数上，继承 A\n\n### 具体实现\n\n```js\nfunction bind_handle_writing(fn) {\n  const that = this;\n  const args = [...arguments].slice(1);\n  function cb() {\n    const params = [...arguments, ...args];\n    fn = this instanceof cb ? this : fn;\n    return that.call(fn, ...params);\n  }\n  // 用一个中间函数，在原型链上加一层，防止属性覆盖\n  const buf = function () {};\n  buf.prototype = this.prototype;\n  cb.prototype = Object.create(this.prototype);\n  return cb;\n}\nFunction.prototype.bind_handle_writing = bind_handle_writing;\n```\n\n### 参考链接\n\n[如何手写一个 bind 方法](https://www.jianshu.com/p/b540e1e17f54)\n","slug":"【手写】call、apply、bind","published":1,"date":"2025-08-13T07:28:27.599Z","updated":"2025-03-06T09:08:26.521Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x10005bofm9kjdhl5h","content":"<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a><em>call</em></h2><p>call 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象</p>\n<h3 id=\"内部流程\"><a href=\"#内部流程\" class=\"headerlink\" title=\"内部流程\"></a>内部流程</h3><p><a href=\"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call\">es 文档</a>上编写的流程如下:</p>\n<ul>\n<li><p>让一个函数 func 指向 this</p>\n</li>\n<li><p>如果这个函数 func 不能被调用，那么抛出 TypeError</p>\n</li>\n<li><p>准备尾调用 PrepareForTailCall</p>\n</li>\n<li><p>返回执行结果</p>\n</li>\n</ul>\n<p>思路</p>\n<ul>\n<li><p>判断需要改变的 context 是否为空，如果为空，那么就默认指为 window。保留这个新的 context，作为后面函数调用时需要的 this 指向</p>\n</li>\n<li><p>将当前的 this 指向赋值给上一步保留的 context，作为 context 的一个属性</p>\n</li>\n<li><p>调用第一步保留的 context 的第二步赋值的属性函数，将所需要的参数传递给上一步新赋值的属性</p>\n</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li>call</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">call_handle_writing</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ctx指向obj，因为fn为非空</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = fn || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">//   ctx.cb指向的是fn1</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cb</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">//   获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">//   调用fn1函数，但是由于是ctx调用的，那么fn1被调用的时候的this指向是ctx</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = ctx.<span class=\"title function_\">cb</span>(...args);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">call_handle_writing</span> = call_handle_writing;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;out&quot;</span>, <span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn1.<span class=\"title function_\">call_handle_writing</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><h3 id=\"实现流程\"><a href=\"#实现流程\" class=\"headerlink\" title=\"实现流程\"></a>实现流程</h3><blockquote>\n<ol>\n<li>Let func be the this value.</li>\n<li>If IsCallable(func) is false, throw a TypeError exception.</li>\n<li>If argArray is either undefined or null, then<blockquote>\n<p>a. Perform PrepareForTailCall().<br /><br>b. Return ? <font color=red>Call(func, thisArg).</font></p>\n</blockquote>\n</li>\n<li>Let argList be ? CreateListFromArrayLike(argArray).</li>\n<li>Perform PrepareForTailCall().</li>\n<li>Return ? Call(func, thisArg, argList).</li>\n</ol>\n</blockquote>\n<p>其实就是接受一个数组作为参数，实际最后的调用时，调用的也是 call 方法</p>\n<p>apply 调用 call 的时候，会用到扩展运算符，将参数放到 call 的参数中，因此这在一定程度上，导致了 apply 的性能会稍低于 call</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">apply_handle_writing</span>(<span class=\"params\">fn, params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(params)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">call_handle_writing</span>(fn, ...params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">call_handle_writing</span>(fn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply_handle_writing</span> = apply_handle_writing;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><h3 id=\"内部流程-1\"><a href=\"#内部流程-1\" class=\"headerlink\" title=\"内部流程\"></a>内部流程</h3><blockquote>\n<ol>\n<li>Let Target be the this value.</li>\n<li>If IsCallable(Target) is false, throw a TypeError exception.</li>\n<li>Let F be ? BoundFunctionCreate(Target, thisArg, args).</li>\n<li>Let L be 0.</li>\n<li>Let targetHasLength be ? HasOwnProperty(Target, “length”).</li>\n<li>If targetHasLength is true, then<blockquote>\n<p>a. Let targetLen be ? Get(Target, “length”).<br/><br>b. If targetLen is a Number, then<br/></p>\n<blockquote>\n<p>i. If targetLen is +∞𝔽, set L to +∞.<br/></p>\n<blockquote>\n<p>ii. Else if targetLen is -∞𝔽, set L to 0.<br/><br>iii. Else,</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>Let targetLenAsInt be ! ToIntegerOrInfinity(targetLen).</li>\n<li>Assert: targetLenAsInt is finite.</li>\n<li>Let argCount be the number of elements in args.</li>\n<li>Set L to max(targetLenAsInt - argCount, 0).</li>\n<li>Perform SetFunctionLength(F, L).</li>\n<li>Let targetName be ? Get(Target, “name”).</li>\n<li>If targetName is not a String, set targetName to the empty String.</li>\n<li>Perform SetFunctionName(F, targetName, “bound”).</li>\n<li>Return F.</li>\n</ol>\n</blockquote>\n<p>考虑场景：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> C = A.<span class=\"title function_\">bind</span>(B);</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>调用 bind 后，使用<code>new</code>去创建一个实例，那么在<code>new</code>的时候不应该改变<code>this</code>指向</p>\n<p>在返回的函数中，用<code>instanceof</code>判断是否是通过<code>new</code>方法进行调用的</p>\n</li>\n<li><p>调用 bind 后，在 c 上面可以调用 A 上 <code>prototype</code> 的方法</p>\n<p>采用继承的方式，在返回的函数上，继承 A</p>\n</li>\n</ul>\n<h3 id=\"具体实现-1\"><a href=\"#具体实现-1\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bind_handle_writing</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">cb</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = [...<span class=\"variable language_\">arguments</span>, ...args];</span><br><span class=\"line\">    fn = <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> cb ? <span class=\"variable language_\">this</span> : fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> that.<span class=\"title function_\">call</span>(fn, ...params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 用一个中间函数，在原型链上加一层，防止属性覆盖</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buf = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">  buf.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">  cb.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind_handle_writing</span> = bind_handle_writing;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.jianshu.com/p/b540e1e17f54\">如何手写一个 bind 方法</a></p>\n","excerpt":"","more":"<h2 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a><em>call</em></h2><p>call 可以改变调用函数时的 this 指向，当调用但什么都不传入时，默认是 window 对象</p>\n<h3 id=\"内部流程\"><a href=\"#内部流程\" class=\"headerlink\" title=\"内部流程\"></a>内部流程</h3><p><a href=\"https://tc39.es/ecma262/multipage/fundamental-objects.html#sec-function.prototype.call\">es 文档</a>上编写的流程如下:</p>\n<ul>\n<li><p>让一个函数 func 指向 this</p>\n</li>\n<li><p>如果这个函数 func 不能被调用，那么抛出 TypeError</p>\n</li>\n<li><p>准备尾调用 PrepareForTailCall</p>\n</li>\n<li><p>返回执行结果</p>\n</li>\n</ul>\n<p>思路</p>\n<ul>\n<li><p>判断需要改变的 context 是否为空，如果为空，那么就默认指为 window。保留这个新的 context，作为后面函数调用时需要的 this 指向</p>\n</li>\n<li><p>将当前的 this 指向赋值给上一步保留的 context，作为 context 的一个属性</p>\n</li>\n<li><p>调用第一步保留的 context 的第二步赋值的属性函数，将所需要的参数传递给上一步新赋值的属性</p>\n</li>\n</ul>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><ul>\n<li>call</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">call_handle_writing</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ctx指向obj，因为fn为非空</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ctx = fn || <span class=\"variable language_\">window</span>;</span><br><span class=\"line\">  <span class=\"comment\">//   ctx.cb指向的是fn1</span></span><br><span class=\"line\">  ctx.<span class=\"property\">cb</span> = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"comment\">//   获取参数</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"comment\">//   调用fn1函数，但是由于是ctx调用的，那么fn1被调用的时候的this指向是ctx</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = ctx.<span class=\"title function_\">cb</span>(...args);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">call_handle_writing</span> = call_handle_writing;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;out&quot;</span>, <span class=\"variable language_\">this</span>, <span class=\"variable language_\">arguments</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">fn1.<span class=\"title function_\">call_handle_writing</span>(obj, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply\"></a>apply</h2><h3 id=\"实现流程\"><a href=\"#实现流程\" class=\"headerlink\" title=\"实现流程\"></a>实现流程</h3><blockquote>\n<ol>\n<li>Let func be the this value.</li>\n<li>If IsCallable(func) is false, throw a TypeError exception.</li>\n<li>If argArray is either undefined or null, then<blockquote>\n<p>a. Perform PrepareForTailCall().<br /><br>b. Return ? <font color=red>Call(func, thisArg).</font></p>\n</blockquote>\n</li>\n<li>Let argList be ? CreateListFromArrayLike(argArray).</li>\n<li>Perform PrepareForTailCall().</li>\n<li>Return ? Call(func, thisArg, argList).</li>\n</ol>\n</blockquote>\n<p>其实就是接受一个数组作为参数，实际最后的调用时，调用的也是 call 方法</p>\n<p>apply 调用 call 的时候，会用到扩展运算符，将参数放到 call 的参数中，因此这在一定程度上，导致了 apply 的性能会稍低于 call</p>\n<h3 id=\"具体实现\"><a href=\"#具体实现\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">apply_handle_writing</span>(<span class=\"params\">fn, params</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(params)) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">call_handle_writing</span>(fn, ...params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">call_handle_writing</span>(fn);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">apply_handle_writing</span> = apply_handle_writing;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"bind\"><a href=\"#bind\" class=\"headerlink\" title=\"bind\"></a>bind</h2><h3 id=\"内部流程-1\"><a href=\"#内部流程-1\" class=\"headerlink\" title=\"内部流程\"></a>内部流程</h3><blockquote>\n<ol>\n<li>Let Target be the this value.</li>\n<li>If IsCallable(Target) is false, throw a TypeError exception.</li>\n<li>Let F be ? BoundFunctionCreate(Target, thisArg, args).</li>\n<li>Let L be 0.</li>\n<li>Let targetHasLength be ? HasOwnProperty(Target, “length”).</li>\n<li>If targetHasLength is true, then<blockquote>\n<p>a. Let targetLen be ? Get(Target, “length”).<br/><br>b. If targetLen is a Number, then<br/></p>\n<blockquote>\n<p>i. If targetLen is +∞𝔽, set L to +∞.<br/></p>\n<blockquote>\n<p>ii. Else if targetLen is -∞𝔽, set L to 0.<br/><br>iii. Else,</p>\n</blockquote>\n</blockquote>\n</blockquote>\n</li>\n<li>Let targetLenAsInt be ! ToIntegerOrInfinity(targetLen).</li>\n<li>Assert: targetLenAsInt is finite.</li>\n<li>Let argCount be the number of elements in args.</li>\n<li>Set L to max(targetLenAsInt - argCount, 0).</li>\n<li>Perform SetFunctionLength(F, L).</li>\n<li>Let targetName be ? Get(Target, “name”).</li>\n<li>If targetName is not a String, set targetName to the empty String.</li>\n<li>Perform SetFunctionName(F, targetName, “bound”).</li>\n<li>Return F.</li>\n</ol>\n</blockquote>\n<p>考虑场景：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\">A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">say</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">B</span>(<span class=\"params\"></span>) &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> C = A.<span class=\"title function_\">bind</span>(B);</span><br><span class=\"line\"><span class=\"keyword\">const</span> c = <span class=\"keyword\">new</span> <span class=\"title function_\">C</span>();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>调用 bind 后，使用<code>new</code>去创建一个实例，那么在<code>new</code>的时候不应该改变<code>this</code>指向</p>\n<p>在返回的函数中，用<code>instanceof</code>判断是否是通过<code>new</code>方法进行调用的</p>\n</li>\n<li><p>调用 bind 后，在 c 上面可以调用 A 上 <code>prototype</code> 的方法</p>\n<p>采用继承的方式，在返回的函数上，继承 A</p>\n</li>\n</ul>\n<h3 id=\"具体实现-1\"><a href=\"#具体实现-1\" class=\"headerlink\" title=\"具体实现\"></a>具体实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bind_handle_writing</span>(<span class=\"params\">fn</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> that = <span class=\"variable language_\">this</span>;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> args = [...<span class=\"variable language_\">arguments</span>].<span class=\"title function_\">slice</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  <span class=\"keyword\">function</span> <span class=\"title function_\">cb</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> params = [...<span class=\"variable language_\">arguments</span>, ...args];</span><br><span class=\"line\">    fn = <span class=\"variable language_\">this</span> <span class=\"keyword\">instanceof</span> cb ? <span class=\"variable language_\">this</span> : fn;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> that.<span class=\"title function_\">call</span>(fn, ...params);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 用一个中间函数，在原型链上加一层，防止属性覆盖</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> buf = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;&#125;;</span><br><span class=\"line\">  buf.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>;</span><br><span class=\"line\">  cb.<span class=\"property\"><span class=\"keyword\">prototype</span></span> = <span class=\"title class_\">Object</span>.<span class=\"title function_\">create</span>(<span class=\"variable language_\">this</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> cb;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Function</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">bind_handle_writing</span> = bind_handle_writing;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.jianshu.com/p/b540e1e17f54\">如何手写一个 bind 方法</a></p>\n"},{"title":"手写题","_content":"\n## 将一维数组转化为 tree\n\n```js\nconst list = [\n  { id: \"01\", parentId: 0, name: \"节点1\" },\n  { id: \"011\", parentId: \"01\", name: \"节点1-1\" },\n  { id: \"0111\", parentId: \"011\", name: \"节点1-1-1\" },\n  { id: \"02\", parentId: 0, name: \"节点2\" },\n  { id: \"022\", parentId: \"02\", name: \"节点2-2\" },\n  { id: \"023\", parentId: \"02\", name: \"节点2-3\" },\n  { id: \"0222\", parentId: \"022\", name: \"节点2-2-2\" },\n  { id: \"03\", parentId: 0, name: \"节点3\" },\n];\n```\n\n- 解法 1：\n\n  使用循环+递归的形式\n\n  ```js\n  function findParent(tree, child) {\n    for (const cur of tree) {\n      if (\n        cur.id !== child.parentId &&\n        cur.children &&\n        cur.children.length !== 0\n      ) {\n        cur = findParent(cur.children, child);\n      } else if (cur.id === child.parentId) {\n        if (cur.children) {\n          cur.children.push(child);\n        } else {\n          cur.children = [child];\n        }\n        return tree;\n      }\n    }\n    return tree;\n  }\n  function arrToTree(arr) {\n    let tree = [];\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n      if (arr[i].parentId === 0) {\n        tree.push(arr[i]);\n      } else {\n        tree = findParent(tree, arr[i]);\n      }\n    }\n    return tree;\n  }\n  ```\n\n- 解法 2：\n\n  使用 map 映射和 js 当引用类型赋值时，是**拷贝的地址**的特性\n\n  ```js\n  function con(arr) {\n    const res = [];\n    const map = arr.reduce((res, v) => ((res[v.id] = v), res), {});\n    for (const item of arr) {\n      if (item.parentId in map) {\n        const parent = map[item.parentId];\n        parent.children = parent.children || [];\n        parent.children.push(item);\n      } else {\n        res.push(item);\n      }\n    }\n    return res;\n  }\n  ```\n\n## object 键扁平化\n\n原始数据：\n\n```json\n{\n  \"a\": {\n    \"b\": {\n      \"c\": 2\n    },\n    \"d\": 3\n  },\n  \"d\": \"d\",\n  \"e\": {\n    \"f\": {\n      \"g\": \"g\",\n      \"f\": {\n        \"h\": {\n          \"i\": \"i\"\n        }\n      }\n    },\n    \"g\": \"g2\"\n  }\n}\n```\n\n转换数据：\n\n```json\n{\n  \"a.b.c\": 2,\n  \"a.d\": 3,\n  \"d\": \"d\",\n  \"e.f.g\": \"g\",\n  \"e.f.f.h.i\": \"i\",\n  \"e.g\": \"g2\"\n}\n```\n\n- 解法 1\n  采用 dfs 思维做\n\n  ```js\n  function dfs(tree, preKey = \"\") {\n    if (typeof tree !== \"object\") {\n      return {\n        key: preKey,\n        value: tree,\n      };\n    }\n    const keys = Reflect.ownKeys(tree);\n    let res = [];\n\n    for (const key of keys) {\n      let val = dfs(tree[key], preKey + \".\" + key);\n      if (Array.isArray(val)) {\n        res = res.concat(val);\n      } else {\n        res.push(val);\n      }\n    }\n    return res;\n  }\n  function ObjectKeyToStr(obj) {\n    const keys = Reflect.ownKeys(obj);\n    let res = {};\n    for (const key of keys) {\n      const data = dfs(obj[key], key);\n      if (Array.isArray(data)) {\n        data.forEach((ele) => {\n          res[ele.key] = ele.value;\n        });\n      } else {\n        res[data.key] = data.value;\n      }\n    }\n    console.log(res);\n    return res;\n  }\n  ```\n\n- 解法 2\n\n  采用类bfs的思路\n\n  ``` js\n  function getKeys(tree) {\n    return Reflect.ownKeys(tree);\n  }\n\n  function bfs(tree) {\n    let stack = [];\n    let res = {};\n    let item = tree;\n    while (item) {\n      getKeys(item).forEach((ele) => {\n        const currdata = item[ele];\n        // 因为额外加了_key属性，因此需要跳过这个属性\n        if (ele !== \"_key\") {\n          if (Object.prototype.toString.call(currdata) === \"[object Object]\") {\n            stack.unshift({\n              ...currdata,\n              _key: item._key ? item._key + \".\" + ele : ele,\n            });\n          } else {\n            const key = item._key ? item._key + \".\" + ele : ele;\n            delete currdata._key;\n            res[key] = currdata;\n          }\n        }\n      });\n      item = stack.shift();\n    }\n    console.log(res);\n    return res;\n  }\n  ```\n","source":"_posts/手写题.md","raw":"---\ntitle: 手写题\ncategories: js\n---\n\n## 将一维数组转化为 tree\n\n```js\nconst list = [\n  { id: \"01\", parentId: 0, name: \"节点1\" },\n  { id: \"011\", parentId: \"01\", name: \"节点1-1\" },\n  { id: \"0111\", parentId: \"011\", name: \"节点1-1-1\" },\n  { id: \"02\", parentId: 0, name: \"节点2\" },\n  { id: \"022\", parentId: \"02\", name: \"节点2-2\" },\n  { id: \"023\", parentId: \"02\", name: \"节点2-3\" },\n  { id: \"0222\", parentId: \"022\", name: \"节点2-2-2\" },\n  { id: \"03\", parentId: 0, name: \"节点3\" },\n];\n```\n\n- 解法 1：\n\n  使用循环+递归的形式\n\n  ```js\n  function findParent(tree, child) {\n    for (const cur of tree) {\n      if (\n        cur.id !== child.parentId &&\n        cur.children &&\n        cur.children.length !== 0\n      ) {\n        cur = findParent(cur.children, child);\n      } else if (cur.id === child.parentId) {\n        if (cur.children) {\n          cur.children.push(child);\n        } else {\n          cur.children = [child];\n        }\n        return tree;\n      }\n    }\n    return tree;\n  }\n  function arrToTree(arr) {\n    let tree = [];\n    const len = arr.length;\n    for (let i = 0; i < len; i++) {\n      if (arr[i].parentId === 0) {\n        tree.push(arr[i]);\n      } else {\n        tree = findParent(tree, arr[i]);\n      }\n    }\n    return tree;\n  }\n  ```\n\n- 解法 2：\n\n  使用 map 映射和 js 当引用类型赋值时，是**拷贝的地址**的特性\n\n  ```js\n  function con(arr) {\n    const res = [];\n    const map = arr.reduce((res, v) => ((res[v.id] = v), res), {});\n    for (const item of arr) {\n      if (item.parentId in map) {\n        const parent = map[item.parentId];\n        parent.children = parent.children || [];\n        parent.children.push(item);\n      } else {\n        res.push(item);\n      }\n    }\n    return res;\n  }\n  ```\n\n## object 键扁平化\n\n原始数据：\n\n```json\n{\n  \"a\": {\n    \"b\": {\n      \"c\": 2\n    },\n    \"d\": 3\n  },\n  \"d\": \"d\",\n  \"e\": {\n    \"f\": {\n      \"g\": \"g\",\n      \"f\": {\n        \"h\": {\n          \"i\": \"i\"\n        }\n      }\n    },\n    \"g\": \"g2\"\n  }\n}\n```\n\n转换数据：\n\n```json\n{\n  \"a.b.c\": 2,\n  \"a.d\": 3,\n  \"d\": \"d\",\n  \"e.f.g\": \"g\",\n  \"e.f.f.h.i\": \"i\",\n  \"e.g\": \"g2\"\n}\n```\n\n- 解法 1\n  采用 dfs 思维做\n\n  ```js\n  function dfs(tree, preKey = \"\") {\n    if (typeof tree !== \"object\") {\n      return {\n        key: preKey,\n        value: tree,\n      };\n    }\n    const keys = Reflect.ownKeys(tree);\n    let res = [];\n\n    for (const key of keys) {\n      let val = dfs(tree[key], preKey + \".\" + key);\n      if (Array.isArray(val)) {\n        res = res.concat(val);\n      } else {\n        res.push(val);\n      }\n    }\n    return res;\n  }\n  function ObjectKeyToStr(obj) {\n    const keys = Reflect.ownKeys(obj);\n    let res = {};\n    for (const key of keys) {\n      const data = dfs(obj[key], key);\n      if (Array.isArray(data)) {\n        data.forEach((ele) => {\n          res[ele.key] = ele.value;\n        });\n      } else {\n        res[data.key] = data.value;\n      }\n    }\n    console.log(res);\n    return res;\n  }\n  ```\n\n- 解法 2\n\n  采用类bfs的思路\n\n  ``` js\n  function getKeys(tree) {\n    return Reflect.ownKeys(tree);\n  }\n\n  function bfs(tree) {\n    let stack = [];\n    let res = {};\n    let item = tree;\n    while (item) {\n      getKeys(item).forEach((ele) => {\n        const currdata = item[ele];\n        // 因为额外加了_key属性，因此需要跳过这个属性\n        if (ele !== \"_key\") {\n          if (Object.prototype.toString.call(currdata) === \"[object Object]\") {\n            stack.unshift({\n              ...currdata,\n              _key: item._key ? item._key + \".\" + ele : ele,\n            });\n          } else {\n            const key = item._key ? item._key + \".\" + ele : ele;\n            delete currdata._key;\n            res[key] = currdata;\n          }\n        }\n      });\n      item = stack.shift();\n    }\n    console.log(res);\n    return res;\n  }\n  ```\n","slug":"手写题","published":1,"date":"2025-08-13T07:28:27.612Z","updated":"2025-03-06T09:08:26.524Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x30006bofm6ddgafcu","content":"<h2 id=\"将一维数组转化为-tree\"><a href=\"#将一维数组转化为-tree\" class=\"headerlink\" title=\"将一维数组转化为 tree\"></a>将一维数组转化为 tree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;01&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;011&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;01&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点1-1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;0111&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;011&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点1-1-1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;02&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;022&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;02&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2-2&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;023&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;02&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2-3&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;0222&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;022&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2-2-2&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;03&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点3&quot;</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解法 1：</p>\n<p>使用循环+递归的形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findParent</span>(<span class=\"params\">tree, child</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> cur <span class=\"keyword\">of</span> tree) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      cur.<span class=\"property\">id</span> !== child.<span class=\"property\">parentId</span> &amp;&amp;</span><br><span class=\"line\">      cur.<span class=\"property\">children</span> &amp;&amp;</span><br><span class=\"line\">      cur.<span class=\"property\">children</span>.<span class=\"property\">length</span> !== <span class=\"number\">0</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      cur = <span class=\"title function_\">findParent</span>(cur.<span class=\"property\">children</span>, child);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur.<span class=\"property\">id</span> === child.<span class=\"property\">parentId</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cur.<span class=\"property\">children</span>) &#123;</span><br><span class=\"line\">        cur.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cur.<span class=\"property\">children</span> = [child];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrToTree</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tree = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i].<span class=\"property\">parentId</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      tree.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tree = <span class=\"title function_\">findParent</span>(tree, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解法 2：</p>\n<p>使用 map 映射和 js 当引用类型赋值时，是<strong>拷贝的地址</strong>的特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">con</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">res, v</span>) =&gt;</span> ((res[v.<span class=\"property\">id</span>] = v), res), &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">parentId</span> <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> parent = map[item.<span class=\"property\">parentId</span>];</span><br><span class=\"line\">      parent.<span class=\"property\">children</span> = parent.<span class=\"property\">children</span> || [];</span><br><span class=\"line\">      parent.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"object-键扁平化\"><a href=\"#object-键扁平化\" class=\"headerlink\" title=\"object 键扁平化\"></a>object 键扁平化</h2><p>原始数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;a&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;b&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;c&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;d&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;d&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;f&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;f&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;h&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;i&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;i&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g2&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>转换数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;a.b.c&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;a.d&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;d&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e.f.g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e.f.f.h.i&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;i&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e.g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g2&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解法 1<br>采用 dfs 思维做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">tree, preKey = <span class=\"string\">&quot;&quot;</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tree !== <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">key</span>: preKey,</span><br><span class=\"line\">      <span class=\"attr\">value</span>: tree,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(tree);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> keys) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = <span class=\"title function_\">dfs</span>(tree[key], preKey + <span class=\"string\">&quot;.&quot;</span> + key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(val)) &#123;</span><br><span class=\"line\">      res = res.<span class=\"title function_\">concat</span>(val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ObjectKeyToStr</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> keys) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title function_\">dfs</span>(obj[key], key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data)) &#123;</span><br><span class=\"line\">      data.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        res[ele.<span class=\"property\">key</span>] = ele.<span class=\"property\">value</span>;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res[data.<span class=\"property\">key</span>] = data.<span class=\"property\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解法 2</p>\n<p>采用类bfs的思路</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getKeys</span>(<span class=\"params\">tree</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(tree);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bfs</span>(<span class=\"params\">tree</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = tree;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (item) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getKeys</span>(item).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> currdata = item[ele];</span><br><span class=\"line\">      <span class=\"comment\">// 因为额外加了_key属性，因此需要跳过这个属性</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ele !== <span class=\"string\">&quot;_key&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(currdata) === <span class=\"string\">&quot;[object Object]&quot;</span>) &#123;</span><br><span class=\"line\">          stack.<span class=\"title function_\">unshift</span>(&#123;</span><br><span class=\"line\">            ...currdata,</span><br><span class=\"line\">            <span class=\"attr\">_key</span>: item.<span class=\"property\">_key</span> ? item.<span class=\"property\">_key</span> + <span class=\"string\">&quot;.&quot;</span> + ele : ele,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> key = item.<span class=\"property\">_key</span> ? item.<span class=\"property\">_key</span> + <span class=\"string\">&quot;.&quot;</span> + ele : ele;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> currdata.<span class=\"property\">_key</span>;</span><br><span class=\"line\">          res[key] = currdata;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    item = stack.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"将一维数组转化为-tree\"><a href=\"#将一维数组转化为-tree\" class=\"headerlink\" title=\"将一维数组转化为 tree\"></a>将一维数组转化为 tree</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> list = [</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;01&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;011&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;01&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点1-1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;0111&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;011&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点1-1-1&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;02&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;022&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;02&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2-2&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;023&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;02&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2-3&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;0222&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"string\">&quot;022&quot;</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点2-2-2&quot;</span> &#125;,</span><br><span class=\"line\">  &#123; <span class=\"attr\">id</span>: <span class=\"string\">&quot;03&quot;</span>, <span class=\"attr\">parentId</span>: <span class=\"number\">0</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;节点3&quot;</span> &#125;,</span><br><span class=\"line\">];</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解法 1：</p>\n<p>使用循环+递归的形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">findParent</span>(<span class=\"params\">tree, child</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> cur <span class=\"keyword\">of</span> tree) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      cur.<span class=\"property\">id</span> !== child.<span class=\"property\">parentId</span> &amp;&amp;</span><br><span class=\"line\">      cur.<span class=\"property\">children</span> &amp;&amp;</span><br><span class=\"line\">      cur.<span class=\"property\">children</span>.<span class=\"property\">length</span> !== <span class=\"number\">0</span></span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      cur = <span class=\"title function_\">findParent</span>(cur.<span class=\"property\">children</span>, child);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (cur.<span class=\"property\">id</span> === child.<span class=\"property\">parentId</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (cur.<span class=\"property\">children</span>) &#123;</span><br><span class=\"line\">        cur.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(child);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cur.<span class=\"property\">children</span> = [child];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">arrToTree</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> tree = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> len = arr.<span class=\"property\">length</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr[i].<span class=\"property\">parentId</span> === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      tree.<span class=\"title function_\">push</span>(arr[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      tree = <span class=\"title function_\">findParent</span>(tree, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> tree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解法 2：</p>\n<p>使用 map 映射和 js 当引用类型赋值时，是<strong>拷贝的地址</strong>的特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">con</span>(<span class=\"params\">arr</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> res = [];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> map = arr.<span class=\"title function_\">reduce</span>(<span class=\"function\">(<span class=\"params\">res, v</span>) =&gt;</span> ((res[v.<span class=\"property\">id</span>] = v), res), &#123;&#125;);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> item <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (item.<span class=\"property\">parentId</span> <span class=\"keyword\">in</span> map) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> parent = map[item.<span class=\"property\">parentId</span>];</span><br><span class=\"line\">      parent.<span class=\"property\">children</span> = parent.<span class=\"property\">children</span> || [];</span><br><span class=\"line\">      parent.<span class=\"property\">children</span>.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"object-键扁平化\"><a href=\"#object-键扁平化\" class=\"headerlink\" title=\"object 键扁平化\"></a>object 键扁平化</h2><p>原始数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;a&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;b&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;c&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;d&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;d&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;f&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;f&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;h&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">          <span class=\"attr\">&quot;i&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;i&quot;</span></span><br><span class=\"line\">        <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">      <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g2&quot;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>转换数据：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;a.b.c&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;a.d&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">3</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;d&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;d&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e.f.g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e.f.f.h.i&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;i&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;e.g&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;g2&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>解法 1<br>采用 dfs 思维做</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dfs</span>(<span class=\"params\">tree, preKey = <span class=\"string\">&quot;&quot;</span></span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> tree !== <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">key</span>: preKey,</span><br><span class=\"line\">      <span class=\"attr\">value</span>: tree,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(tree);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> keys) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> val = <span class=\"title function_\">dfs</span>(tree[key], preKey + <span class=\"string\">&quot;.&quot;</span> + key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(val)) &#123;</span><br><span class=\"line\">      res = res.<span class=\"title function_\">concat</span>(val);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res.<span class=\"title function_\">push</span>(val);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">ObjectKeyToStr</span>(<span class=\"params\">obj</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> keys = <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(obj);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> key <span class=\"keyword\">of</span> keys) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = <span class=\"title function_\">dfs</span>(obj[key], key);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"title class_\">Array</span>.<span class=\"title function_\">isArray</span>(data)) &#123;</span><br><span class=\"line\">      data.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        res[ele.<span class=\"property\">key</span>] = ele.<span class=\"property\">value</span>;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      res[data.<span class=\"property\">key</span>] = data.<span class=\"property\">value</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解法 2</p>\n<p>采用类bfs的思路</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">getKeys</span>(<span class=\"params\">tree</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title class_\">Reflect</span>.<span class=\"title function_\">ownKeys</span>(tree);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">bfs</span>(<span class=\"params\">tree</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> stack = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> item = tree;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (item) &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getKeys</span>(item).<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">ele</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> currdata = item[ele];</span><br><span class=\"line\">      <span class=\"comment\">// 因为额外加了_key属性，因此需要跳过这个属性</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ele !== <span class=\"string\">&quot;_key&quot;</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"title class_\">Object</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">toString</span>.<span class=\"title function_\">call</span>(currdata) === <span class=\"string\">&quot;[object Object]&quot;</span>) &#123;</span><br><span class=\"line\">          stack.<span class=\"title function_\">unshift</span>(&#123;</span><br><span class=\"line\">            ...currdata,</span><br><span class=\"line\">            <span class=\"attr\">_key</span>: item.<span class=\"property\">_key</span> ? item.<span class=\"property\">_key</span> + <span class=\"string\">&quot;.&quot;</span> + ele : ele,</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          <span class=\"keyword\">const</span> key = item.<span class=\"property\">_key</span> ? item.<span class=\"property\">_key</span> + <span class=\"string\">&quot;.&quot;</span> + ele : ele;</span><br><span class=\"line\">          <span class=\"keyword\">delete</span> currdata.<span class=\"property\">_key</span>;</span><br><span class=\"line\">          res[key] = currdata;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    item = stack.<span class=\"title function_\">shift</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(res);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"【HTML】templates and slots","time":"2023-07-14T06:03:50.000Z","_content":"\n# 【HTML】templates and slots\n\n## <h1>概况</h1>\n\n可以用来灵活填充 Web 组件的 shadow DOM 的模板。可以复用相同的标记结构。\n\n## 使用\n\n- 编写一个 template\n\n  直接在页面中编写一个 template 不会直接在页面中显示出来\n\n  ```html\n  <template id=\"test\">\n    <style>\n      p {\n        color: white;\n        background-color: #666;\n        padding: 5px;\n      }\n    </style>\n    <p>测试template</p>\n  </template>\n  ```\n\n- 注册自定义模板\n\n  ```js\n  customElements.define(\n    \"test-template\",\n    class extends HTMLElement {\n      constructor() {\n        super();\n        let template = document.getElementById(\"test\");\n        let templateContent = template.content;\n\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\n        shadowRoot.appendChild(templateContent.cloneNode(true));\n      }\n    }\n  );\n  ```\n\n- 组件显示\n\n  ```html\n    <test-template />\n  ```\n\n- 页面显示\n\n  [![pC4aUiV.png](https://s1.ax1x.com/2023/07/14/pC4aUiV.png)](https://imgse.com/i/pC4aUiV)\n\n  template 的元素的样式也是独立的，并不会因为父级定义的同一个样式而影响内部。\n\n  虽然 template 和使用在同一个页面，但是如果直接在 Elements 面板里面修改 template 的内容，**不会**影响到渲染的地方。\n\n  [![pC4aWRO.png](https://s1.ax1x.com/2023/07/14/pC4aWRO.png)](https://imgse.com/i/pC4aWRO)\n\n- 添加 slot\n\n  添加的slot的样式只收到父级的影响，并不会受到template中定义的样式影响\n\n  如果是template中并没有定义对于的slot，那么传入的slot并不会被渲染\n\n  ```html\n    <template id=\"test\">\n      <style>\n        p {\n          color: white;\n          background-color: #666;\n          padding: 5px;\n        }\n      </style>\n      <slot></slot>\n      <slot name=\"text1\"></slot>\n      <p>测试template</p>\n    </template>\n    <test-template>\n        <p>默认slot的内容</p>\n        <p slot=\"text1\">具名插槽的内容</p>\n    </test-template>\n  ```\n\n  [![pC4azLj.png](https://s1.ax1x.com/2023/07/14/pC4azLj.png)](https://imgse.com/i/pC4azLj)\n\n  - 获取slot名\n\n  ``` js\n    let el = document.querySelectorAll('test-template p')\n      el.forEach(ele=>{\n          console.log(ele.slot)\n      })\n    //  输出：\"\", \"text1\", \"text2\"\n  ```\n\n## 参链\n\n[使用 templates and slots](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_templates_and_slots#%E4%BD%BF%E7%94%A8%E6%A7%BD_slots_%E6%B7%BB%E5%8A%A0%E7%81%B5%E6%B4%BB%E5%BA%A6)\n\n[shadow dom解析](https://cloud.tencent.com/developer/article/1009633?areaSource=106001.5)","source":"_posts/HTML/【HTML】templates and slots.md","raw":"---\ntitle: 【HTML】templates and slots\ntime: 2023-07-14 14:03:50\ncategories: HTML\n---\n\n# 【HTML】templates and slots\n\n## <h1>概况</h1>\n\n可以用来灵活填充 Web 组件的 shadow DOM 的模板。可以复用相同的标记结构。\n\n## 使用\n\n- 编写一个 template\n\n  直接在页面中编写一个 template 不会直接在页面中显示出来\n\n  ```html\n  <template id=\"test\">\n    <style>\n      p {\n        color: white;\n        background-color: #666;\n        padding: 5px;\n      }\n    </style>\n    <p>测试template</p>\n  </template>\n  ```\n\n- 注册自定义模板\n\n  ```js\n  customElements.define(\n    \"test-template\",\n    class extends HTMLElement {\n      constructor() {\n        super();\n        let template = document.getElementById(\"test\");\n        let templateContent = template.content;\n\n        const shadowRoot = this.attachShadow({ mode: \"open\" });\n        shadowRoot.appendChild(templateContent.cloneNode(true));\n      }\n    }\n  );\n  ```\n\n- 组件显示\n\n  ```html\n    <test-template />\n  ```\n\n- 页面显示\n\n  [![pC4aUiV.png](https://s1.ax1x.com/2023/07/14/pC4aUiV.png)](https://imgse.com/i/pC4aUiV)\n\n  template 的元素的样式也是独立的，并不会因为父级定义的同一个样式而影响内部。\n\n  虽然 template 和使用在同一个页面，但是如果直接在 Elements 面板里面修改 template 的内容，**不会**影响到渲染的地方。\n\n  [![pC4aWRO.png](https://s1.ax1x.com/2023/07/14/pC4aWRO.png)](https://imgse.com/i/pC4aWRO)\n\n- 添加 slot\n\n  添加的slot的样式只收到父级的影响，并不会受到template中定义的样式影响\n\n  如果是template中并没有定义对于的slot，那么传入的slot并不会被渲染\n\n  ```html\n    <template id=\"test\">\n      <style>\n        p {\n          color: white;\n          background-color: #666;\n          padding: 5px;\n        }\n      </style>\n      <slot></slot>\n      <slot name=\"text1\"></slot>\n      <p>测试template</p>\n    </template>\n    <test-template>\n        <p>默认slot的内容</p>\n        <p slot=\"text1\">具名插槽的内容</p>\n    </test-template>\n  ```\n\n  [![pC4azLj.png](https://s1.ax1x.com/2023/07/14/pC4azLj.png)](https://imgse.com/i/pC4azLj)\n\n  - 获取slot名\n\n  ``` js\n    let el = document.querySelectorAll('test-template p')\n      el.forEach(ele=>{\n          console.log(ele.slot)\n      })\n    //  输出：\"\", \"text1\", \"text2\"\n  ```\n\n## 参链\n\n[使用 templates and slots](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_templates_and_slots#%E4%BD%BF%E7%94%A8%E6%A7%BD_slots_%E6%B7%BB%E5%8A%A0%E7%81%B5%E6%B4%BB%E5%BA%A6)\n\n[shadow dom解析](https://cloud.tencent.com/developer/article/1009633?areaSource=106001.5)","slug":"HTML/【HTML】templates and slots","published":1,"date":"2025-08-13T07:29:09.430Z","updated":"2025-03-06T09:08:26.511Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x40009bofm5ntielz2","content":"<h1 id=\"【HTML】templates-and-slots\"><a href=\"#【HTML】templates-and-slots\" class=\"headerlink\" title=\"【HTML】templates and slots\"></a>【HTML】templates and slots</h1><h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a><h1>概况</h1></h2><p>可以用来灵活填充 Web 组件的 shadow DOM 的模板。可以复用相同的标记结构。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>编写一个 template</p>\n<p>直接在页面中编写一个 template 不会直接在页面中显示出来</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#666</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>测试template<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册自定义模板</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(</span><br><span class=\"line\">  <span class=\"string\">&quot;test-template&quot;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">HTMLElement</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> templateContent = template.<span class=\"property\">content</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&quot;open&quot;</span> &#125;);</span><br><span class=\"line\">      shadowRoot.<span class=\"title function_\">appendChild</span>(templateContent.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test-template</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>页面显示</p>\n<p><a href=\"https://imgse.com/i/pC4aUiV\"><img src=\"https://s1.ax1x.com/2023/07/14/pC4aUiV.png\" alt=\"pC4aUiV.png\"></a></p>\n<p>template 的元素的样式也是独立的，并不会因为父级定义的同一个样式而影响内部。</p>\n<p>虽然 template 和使用在同一个页面，但是如果直接在 Elements 面板里面修改 template 的内容，<strong>不会</strong>影响到渲染的地方。</p>\n<p><a href=\"https://imgse.com/i/pC4aWRO\"><img src=\"https://s1.ax1x.com/2023/07/14/pC4aWRO.png\" alt=\"pC4aWRO.png\"></a></p>\n</li>\n<li><p>添加 slot</p>\n<p>添加的slot的样式只收到父级的影响，并不会受到template中定义的样式影响</p>\n<p>如果是template中并没有定义对于的slot，那么传入的slot并不会被渲染</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#666</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;text1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>测试template<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test-template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>默认slot的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;text1&quot;</span>&gt;</span>具名插槽的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">test-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pC4azLj\"><img src=\"https://s1.ax1x.com/2023/07/14/pC4azLj.png\" alt=\"pC4azLj.png\"></a></p>\n<ul>\n<li>获取slot名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;test-template p&#x27;</span>)</span><br><span class=\"line\">  el.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ele</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ele.<span class=\"property\">slot</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">//  输出：&quot;&quot;, &quot;text1&quot;, &quot;text2&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_templates_and_slots#%E4%BD%BF%E7%94%A8%E6%A7%BD_slots_%E6%B7%BB%E5%8A%A0%E7%81%B5%E6%B4%BB%E5%BA%A6\">使用 templates and slots</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1009633?areaSource=106001.5\">shadow dom解析</a></p>\n","excerpt":"","more":"<h1 id=\"【HTML】templates-and-slots\"><a href=\"#【HTML】templates-and-slots\" class=\"headerlink\" title=\"【HTML】templates and slots\"></a>【HTML】templates and slots</h1><h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a><h1>概况</h1></h2><p>可以用来灵活填充 Web 组件的 shadow DOM 的模板。可以复用相同的标记结构。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>编写一个 template</p>\n<p>直接在页面中编写一个 template 不会直接在页面中显示出来</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#666</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>测试template<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注册自定义模板</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(</span><br><span class=\"line\">  <span class=\"string\">&quot;test-template&quot;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">extends</span> <span class=\"title class_\">HTMLElement</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">super</span>();</span><br><span class=\"line\">      <span class=\"keyword\">let</span> template = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">let</span> templateContent = template.<span class=\"property\">content</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">const</span> shadowRoot = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123; <span class=\"attr\">mode</span>: <span class=\"string\">&quot;open&quot;</span> &#125;);</span><br><span class=\"line\">      shadowRoot.<span class=\"title function_\">appendChild</span>(templateContent.<span class=\"title function_\">cloneNode</span>(<span class=\"literal\">true</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件显示</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test-template</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>页面显示</p>\n<p><a href=\"https://imgse.com/i/pC4aUiV\"><img src=\"https://s1.ax1x.com/2023/07/14/pC4aUiV.png\" alt=\"pC4aUiV.png\"></a></p>\n<p>template 的元素的样式也是独立的，并不会因为父级定义的同一个样式而影响内部。</p>\n<p>虽然 template 和使用在同一个页面，但是如果直接在 Elements 面板里面修改 template 的内容，<strong>不会</strong>影响到渲染的地方。</p>\n<p><a href=\"https://imgse.com/i/pC4aWRO\"><img src=\"https://s1.ax1x.com/2023/07/14/pC4aWRO.png\" alt=\"pC4aWRO.png\"></a></p>\n</li>\n<li><p>添加 slot</p>\n<p>添加的slot的样式只收到父级的影响，并不会受到template中定义的样式影响</p>\n<p>如果是template中并没有定义对于的slot，那么传入的slot并不会被渲染</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;test&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"selector-tag\">p</span> &#123;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">color</span>: white;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">background-color</span>: <span class=\"number\">#666</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">      <span class=\"attribute\">padding</span>: <span class=\"number\">5px</span>;</span></span><br><span class=\"line\"><span class=\"language-css\">    &#125;</span></span><br><span class=\"line\"><span class=\"language-css\">  </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;text1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>测试template<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test-template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>默认slot的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">slot</span>=<span class=\"string\">&quot;text1&quot;</span>&gt;</span>具名插槽的内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">test-template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pC4azLj\"><img src=\"https://s1.ax1x.com/2023/07/14/pC4azLj.png\" alt=\"pC4azLj.png\"></a></p>\n<ul>\n<li>获取slot名</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">querySelectorAll</span>(<span class=\"string\">&#x27;test-template p&#x27;</span>)</span><br><span class=\"line\">  el.<span class=\"title function_\">forEach</span>(<span class=\"function\"><span class=\"params\">ele</span>=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ele.<span class=\"property\">slot</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"><span class=\"comment\">//  输出：&quot;&quot;, &quot;text1&quot;, &quot;text2&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_templates_and_slots#%E4%BD%BF%E7%94%A8%E6%A7%BD_slots_%E6%B7%BB%E5%8A%A0%E7%81%B5%E6%B4%BB%E5%BA%A6\">使用 templates and slots</a></p>\n<p><a href=\"https://cloud.tencent.com/developer/article/1009633?areaSource=106001.5\">shadow dom解析</a></p>\n"},{"title":"【HTML】Shadow DOM","time":"2023-07-12T06:27:06.000Z","_content":"\n# 【HTML】Shadow DOM\n\n## <h1>概况</h1>\n\n### 定义\n\n能够为 Web 组件中的 DOM 和 CSS 提供了封装，实际上是在浏览器渲染文档的时候会给指定的 DOM 结构插入编写好的 DOM 元素，但是插入的 Shadow DOM 会与主文档的 DOM 保持**分离**，也就是说 Shadow DOM**不存在**于主 DOM 树上。shadow root 节点为起始根节点，在这个根节点的下方，可以是任意元素，和普通的 DOM 元素一样。\n\n并且 Shadow DOM 封装出来的 DOM 元素是**独立**的，外部的配置不会影响到内部，内部的配置也不会影响外部。\n\n[![pCfsSyD.png](https://s1.ax1x.com/2023/07/12/pCfsSyD.png)](https://imgse.com/i/pCfsSyD)\n\n### 查看\n\n控制台-》设置按钮-》Preference -》 Elements -》点击 show user anent shadow dom 的 checkbox\n\n[![pCfrOF1.png](https://s1.ax1x.com/2023/07/12/pCfrOF1.png)](https://imgse.com/i/pCfrOF1)\n\n打开之后可以看到一些元素的真实布局及内容组成。\n\n### 结构\n\n![image.png](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM/shadowdom.svg)\n\n- `Shadow host`：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。\n\n- `Shadow tree`：Shadow DOM 内部的 DOM 树。\n\n- `Shadow boundary`：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。\n\n- `Shadow root`: Shadow tree 的根节点。\n\n\n## <h1>custom element(自定义标签)</h1>\n\n### 概况\n\n可以注册一个自定义标签，`CustomElementRegistry`提供注册自定义元素和查询已注册元素的方法，使用`customElements`可以直接获取其实例。\n\n### 方法\n\n| 方法名            | 作用                                 | 参数          | 返回值 |\n| ----------------- | ------------------------------------ | --------------- | --------------- |\n| `customElements.define` | 定义了一个自定义元素 | `name`: 自定义元素名; `constructor`: 自定义元素构造器; `options`: 控制元素如何定义(目前只支持extends) | - |\n| `customElements.get` | 返回以前定义自定义元素的构造函数 | `name`: 返回引用的构造函数的自定义元素的名字 | 指定名字的自定义元素的构造函数，如果没有使用该名称的自定义元素定义，则为undefined。|\n| `customElements.upgrade` | 将更新节点子树中所有包含阴影的自定义元素，甚至在它们连接到主文档之前也是如此 | `root`: 待升级的包含阴影的派生元素节点 | - |\n| `customElements.whenDefined` | 当一个自定义节点被定义时走入then，如果这个元素名没有被定义，那么返回的是一直pending状态 | `name`: 自定义元素名 | Promise |\n\n### 使用\n\n``` js\n  customElements.define(\"test-shadow-dom\", TestShadowCls)\n```\n\n## <h1>使用</h1>\n\n### 挂载 shadow dom\n\n可以调用`Element.attachShadow`将 Shadow Dom 选择挂载或者卸载。此方法返回的是一个类 dom，可以像操作普通 dom 一样对其进行操作\n\n| 参数名            | 作用                                 | 可选值          |\n| ----------------- | ------------------------------------ | --------------- |\n| `mode`            | `指定 Shadow DOM 树封装模式的字符串` | `open`/`closed` |\n| `delegatesFocus ` | `焦点委托`                           | `boolean`       |\n\n- 挂载\n\n  ```js\n  const shadow = el.attachShadow({\n    mode: \"open\",\n  });\n  console.dir(shadow);\n  ```\n\n  [![pCfgDbD.png](https://s1.ax1x.com/2023/07/12/pCfgDbD.png)](https://imgse.com/i/pCfgDbD)\n\n- 操作 shadow dom\n\n  ```js\n  const html = `<p>测试1</p>`;\n  shadow.innerHTML = html;\n  ```\n\n  [![pCfRCm8.png](https://s1.ax1x.com/2023/07/12/pCfRCm8.png)](https://imgse.com/i/pCfRCm8)\n\n\n### 自定义元素\n\nShadow DOM 可以渲染自定义的元素，类似于 vue3 中的组件，但里面的样式并不互相干扰。\n\n- 新建类\n\n  ```js\n  class TestShadowCls extends HTMLElement {\n    constructor() {\n      super(); //必要的，因为属于子类\n    }\n  }\n  ```\n\n- 创建一个 Shadow DOM 并为其加上需要的数据\n\n  ```js\n    addShadow(){\n      this.shadow = this.attachShadow({\n          mode: \"open\"\n      })\n    }\n\n    createChild(){\n      const el = document.createElement(\"div\");\n      const pel = document.createElement(\"p\");\n      pel.textContent = \"测试文案\";\n      pel.setAttribute(\"class\", \"test\")\n      const imgae = document.createElement(\"img\");\n      imgae.setAttribute(\"src\", \"https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png\")\n      imgae.src=\"https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png\";\n      el.appendChild(pel);\n      el.appendChild(imgae)\n      this.shadow.appendChild(el)\n    }\n  ```\n\n- 定义自定义的元素名\n\n  ``` js\n  customElements.define(\"test-shadow-dom\", TestShadowCls)\n  ```\n\n- 使用\n\n  ``` html\n  <style>\n    p{\n      color: red;\n    }\n  </style>\n  <test-shadow-dom />\n  ```\n\n  渲染效果如下，里面的文案并没有因为`style`加上的元素样式而生效\n\n  [![pCfqRu4.png](https://s1.ax1x.com/2023/07/12/pCfqRu4.png)](https://imgse.com/i/pCfqRu4)\n\n- 添加样式\n\n  ``` js\n    createClass(){\n      const style = document.createElement(\"style\");\n      style.textContent = `\n          .test{\n              color: blue;\n              font-weight: 600\n          }\n      `\n      this.shadow.appendChild(style)\n    }\n  ```\n  加上了之后，样式生效\n\n  [![pCfL98f.png](https://s1.ax1x.com/2023/07/12/pCfL98f.png)](https://imgse.com/i/pCfL98f)\n\n## 参链\n\n[使用 shadow DOM](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM)\n\n[究竟什么是 Shadow DOM？](https://zhuanlan.zhihu.com/p/559759502)\n","source":"_posts/HTML/【HTML】Shadow DOM.md","raw":"---\ntitle: 【HTML】Shadow DOM\ntime: 2023-07-12 14:27:06\ncategories: HTML\n---\n\n# 【HTML】Shadow DOM\n\n## <h1>概况</h1>\n\n### 定义\n\n能够为 Web 组件中的 DOM 和 CSS 提供了封装，实际上是在浏览器渲染文档的时候会给指定的 DOM 结构插入编写好的 DOM 元素，但是插入的 Shadow DOM 会与主文档的 DOM 保持**分离**，也就是说 Shadow DOM**不存在**于主 DOM 树上。shadow root 节点为起始根节点，在这个根节点的下方，可以是任意元素，和普通的 DOM 元素一样。\n\n并且 Shadow DOM 封装出来的 DOM 元素是**独立**的，外部的配置不会影响到内部，内部的配置也不会影响外部。\n\n[![pCfsSyD.png](https://s1.ax1x.com/2023/07/12/pCfsSyD.png)](https://imgse.com/i/pCfsSyD)\n\n### 查看\n\n控制台-》设置按钮-》Preference -》 Elements -》点击 show user anent shadow dom 的 checkbox\n\n[![pCfrOF1.png](https://s1.ax1x.com/2023/07/12/pCfrOF1.png)](https://imgse.com/i/pCfrOF1)\n\n打开之后可以看到一些元素的真实布局及内容组成。\n\n### 结构\n\n![image.png](https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM/shadowdom.svg)\n\n- `Shadow host`：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。\n\n- `Shadow tree`：Shadow DOM 内部的 DOM 树。\n\n- `Shadow boundary`：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。\n\n- `Shadow root`: Shadow tree 的根节点。\n\n\n## <h1>custom element(自定义标签)</h1>\n\n### 概况\n\n可以注册一个自定义标签，`CustomElementRegistry`提供注册自定义元素和查询已注册元素的方法，使用`customElements`可以直接获取其实例。\n\n### 方法\n\n| 方法名            | 作用                                 | 参数          | 返回值 |\n| ----------------- | ------------------------------------ | --------------- | --------------- |\n| `customElements.define` | 定义了一个自定义元素 | `name`: 自定义元素名; `constructor`: 自定义元素构造器; `options`: 控制元素如何定义(目前只支持extends) | - |\n| `customElements.get` | 返回以前定义自定义元素的构造函数 | `name`: 返回引用的构造函数的自定义元素的名字 | 指定名字的自定义元素的构造函数，如果没有使用该名称的自定义元素定义，则为undefined。|\n| `customElements.upgrade` | 将更新节点子树中所有包含阴影的自定义元素，甚至在它们连接到主文档之前也是如此 | `root`: 待升级的包含阴影的派生元素节点 | - |\n| `customElements.whenDefined` | 当一个自定义节点被定义时走入then，如果这个元素名没有被定义，那么返回的是一直pending状态 | `name`: 自定义元素名 | Promise |\n\n### 使用\n\n``` js\n  customElements.define(\"test-shadow-dom\", TestShadowCls)\n```\n\n## <h1>使用</h1>\n\n### 挂载 shadow dom\n\n可以调用`Element.attachShadow`将 Shadow Dom 选择挂载或者卸载。此方法返回的是一个类 dom，可以像操作普通 dom 一样对其进行操作\n\n| 参数名            | 作用                                 | 可选值          |\n| ----------------- | ------------------------------------ | --------------- |\n| `mode`            | `指定 Shadow DOM 树封装模式的字符串` | `open`/`closed` |\n| `delegatesFocus ` | `焦点委托`                           | `boolean`       |\n\n- 挂载\n\n  ```js\n  const shadow = el.attachShadow({\n    mode: \"open\",\n  });\n  console.dir(shadow);\n  ```\n\n  [![pCfgDbD.png](https://s1.ax1x.com/2023/07/12/pCfgDbD.png)](https://imgse.com/i/pCfgDbD)\n\n- 操作 shadow dom\n\n  ```js\n  const html = `<p>测试1</p>`;\n  shadow.innerHTML = html;\n  ```\n\n  [![pCfRCm8.png](https://s1.ax1x.com/2023/07/12/pCfRCm8.png)](https://imgse.com/i/pCfRCm8)\n\n\n### 自定义元素\n\nShadow DOM 可以渲染自定义的元素，类似于 vue3 中的组件，但里面的样式并不互相干扰。\n\n- 新建类\n\n  ```js\n  class TestShadowCls extends HTMLElement {\n    constructor() {\n      super(); //必要的，因为属于子类\n    }\n  }\n  ```\n\n- 创建一个 Shadow DOM 并为其加上需要的数据\n\n  ```js\n    addShadow(){\n      this.shadow = this.attachShadow({\n          mode: \"open\"\n      })\n    }\n\n    createChild(){\n      const el = document.createElement(\"div\");\n      const pel = document.createElement(\"p\");\n      pel.textContent = \"测试文案\";\n      pel.setAttribute(\"class\", \"test\")\n      const imgae = document.createElement(\"img\");\n      imgae.setAttribute(\"src\", \"https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png\")\n      imgae.src=\"https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png\";\n      el.appendChild(pel);\n      el.appendChild(imgae)\n      this.shadow.appendChild(el)\n    }\n  ```\n\n- 定义自定义的元素名\n\n  ``` js\n  customElements.define(\"test-shadow-dom\", TestShadowCls)\n  ```\n\n- 使用\n\n  ``` html\n  <style>\n    p{\n      color: red;\n    }\n  </style>\n  <test-shadow-dom />\n  ```\n\n  渲染效果如下，里面的文案并没有因为`style`加上的元素样式而生效\n\n  [![pCfqRu4.png](https://s1.ax1x.com/2023/07/12/pCfqRu4.png)](https://imgse.com/i/pCfqRu4)\n\n- 添加样式\n\n  ``` js\n    createClass(){\n      const style = document.createElement(\"style\");\n      style.textContent = `\n          .test{\n              color: blue;\n              font-weight: 600\n          }\n      `\n      this.shadow.appendChild(style)\n    }\n  ```\n  加上了之后，样式生效\n\n  [![pCfL98f.png](https://s1.ax1x.com/2023/07/12/pCfL98f.png)](https://imgse.com/i/pCfL98f)\n\n## 参链\n\n[使用 shadow DOM](https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM)\n\n[究竟什么是 Shadow DOM？](https://zhuanlan.zhihu.com/p/559759502)\n","slug":"HTML/【HTML】Shadow DOM","published":1,"date":"2025-08-13T07:29:09.428Z","updated":"2025-03-06T09:08:26.511Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x5000abofm73125j5i","content":"<h1 id=\"【HTML】Shadow-DOM\"><a href=\"#【HTML】Shadow-DOM\" class=\"headerlink\" title=\"【HTML】Shadow DOM\"></a>【HTML】Shadow DOM</h1><h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a><h1>概况</h1></h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>能够为 Web 组件中的 DOM 和 CSS 提供了封装，实际上是在浏览器渲染文档的时候会给指定的 DOM 结构插入编写好的 DOM 元素，但是插入的 Shadow DOM 会与主文档的 DOM 保持<strong>分离</strong>，也就是说 Shadow DOM<strong>不存在</strong>于主 DOM 树上。shadow root 节点为起始根节点，在这个根节点的下方，可以是任意元素，和普通的 DOM 元素一样。</p>\n<p>并且 Shadow DOM 封装出来的 DOM 元素是<strong>独立</strong>的，外部的配置不会影响到内部，内部的配置也不会影响外部。</p>\n<p><a href=\"https://imgse.com/i/pCfsSyD\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfsSyD.png\" alt=\"pCfsSyD.png\"></a></p>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>控制台-》设置按钮-》Preference -》 Elements -》点击 show user anent shadow dom 的 checkbox</p>\n<p><a href=\"https://imgse.com/i/pCfrOF1\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfrOF1.png\" alt=\"pCfrOF1.png\"></a></p>\n<p>打开之后可以看到一些元素的真实布局及内容组成。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p><img src=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM/shadowdom.svg\" alt=\"image.png\"></p>\n<ul>\n<li><p><code>Shadow host</code>：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</p>\n</li>\n<li><p><code>Shadow tree</code>：Shadow DOM 内部的 DOM 树。</p>\n</li>\n<li><p><code>Shadow boundary</code>：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</p>\n</li>\n<li><p><code>Shadow root</code>: Shadow tree 的根节点。</p>\n</li>\n</ul>\n<h2 id=\"custom-element-自定义标签\"><a href=\"#custom-element-自定义标签\" class=\"headerlink\" title=\"custom element(自定义标签)\"></a><h1>custom element(自定义标签)</h1></h2><h3 id=\"概况-1\"><a href=\"#概况-1\" class=\"headerlink\" title=\"概况\"></a>概况</h3><p>可以注册一个自定义标签，<code>CustomElementRegistry</code>提供注册自定义元素和查询已注册元素的方法，使用<code>customElements</code>可以直接获取其实例。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>customElements.define</code></td>\n<td>定义了一个自定义元素</td>\n<td><code>name</code>: 自定义元素名; <code>constructor</code>: 自定义元素构造器; <code>options</code>: 控制元素如何定义(目前只支持extends)</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>customElements.get</code></td>\n<td>返回以前定义自定义元素的构造函数</td>\n<td><code>name</code>: 返回引用的构造函数的自定义元素的名字</td>\n<td>指定名字的自定义元素的构造函数，如果没有使用该名称的自定义元素定义，则为undefined。</td>\n</tr>\n<tr>\n<td><code>customElements.upgrade</code></td>\n<td>将更新节点子树中所有包含阴影的自定义元素，甚至在它们连接到主文档之前也是如此</td>\n<td><code>root</code>: 待升级的包含阴影的派生元素节点</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>customElements.whenDefined</code></td>\n<td>当一个自定义节点被定义时走入then，如果这个元素名没有被定义，那么返回的是一直pending状态</td>\n<td><code>name</code>: 自定义元素名</td>\n<td>Promise</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&quot;test-shadow-dom&quot;</span>, <span class=\"title class_\">TestShadowCls</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a><h1>使用</h1></h2><h3 id=\"挂载-shadow-dom\"><a href=\"#挂载-shadow-dom\" class=\"headerlink\" title=\"挂载 shadow dom\"></a>挂载 shadow dom</h3><p>可以调用<code>Element.attachShadow</code>将 Shadow Dom 选择挂载或者卸载。此方法返回的是一个类 dom，可以像操作普通 dom 一样对其进行操作</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>作用</th>\n<th>可选值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>mode</code></td>\n<td><code>指定 Shadow DOM 树封装模式的字符串</code></td>\n<td><code>open</code>&#x2F;<code>closed</code></td>\n</tr>\n<tr>\n<td><code>delegatesFocus </code></td>\n<td><code>焦点委托</code></td>\n<td><code>boolean</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>挂载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shadow = el.<span class=\"title function_\">attachShadow</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;open&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(shadow);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pCfgDbD\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfgDbD.png\" alt=\"pCfgDbD.png\"></a></p>\n</li>\n<li><p>操作 shadow dom</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> html = <span class=\"string\">`&lt;p&gt;测试1&lt;/p&gt;`</span>;</span><br><span class=\"line\">shadow.<span class=\"property\">innerHTML</span> = html;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pCfRCm8\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfRCm8.png\" alt=\"pCfRCm8.png\"></a></p>\n</li>\n</ul>\n<h3 id=\"自定义元素\"><a href=\"#自定义元素\" class=\"headerlink\" title=\"自定义元素\"></a>自定义元素</h3><p>Shadow DOM 可以渲染自定义的元素，类似于 vue3 中的组件，但里面的样式并不互相干扰。</p>\n<ul>\n<li><p>新建类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestShadowCls</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(); <span class=\"comment\">//必要的，因为属于子类</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个 Shadow DOM 并为其加上需要的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addShadow</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shadow</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">mode</span>: <span class=\"string\">&quot;open&quot;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createChild</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pel = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">  pel.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;测试文案&quot;</span>;</span><br><span class=\"line\">  pel.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> imgae = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">  imgae.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png&quot;</span>)</span><br><span class=\"line\">  imgae.<span class=\"property\">src</span>=<span class=\"string\">&quot;https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png&quot;</span>;</span><br><span class=\"line\">  el.<span class=\"title function_\">appendChild</span>(pel);</span><br><span class=\"line\">  el.<span class=\"title function_\">appendChild</span>(imgae)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shadow</span>.<span class=\"title function_\">appendChild</span>(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义自定义的元素名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&quot;test-shadow-dom&quot;</span>, <span class=\"title class_\">TestShadowCls</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">p</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test-shadow-dom</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染效果如下，里面的文案并没有因为<code>style</code>加上的元素样式而生效</p>\n<p><a href=\"https://imgse.com/i/pCfqRu4\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfqRu4.png\" alt=\"pCfqRu4.png\"></a></p>\n</li>\n<li><p>添加样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);</span><br><span class=\"line\">  style.<span class=\"property\">textContent</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      .test&#123;</span></span><br><span class=\"line\"><span class=\"string\">          color: blue;</span></span><br><span class=\"line\"><span class=\"string\">          font-weight: 600</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shadow</span>.<span class=\"title function_\">appendChild</span>(style)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加上了之后，样式生效</p>\n<p><a href=\"https://imgse.com/i/pCfL98f\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfL98f.png\" alt=\"pCfL98f.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM\">使用 shadow DOM</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/559759502\">究竟什么是 Shadow DOM？</a></p>\n","excerpt":"","more":"<h1 id=\"【HTML】Shadow-DOM\"><a href=\"#【HTML】Shadow-DOM\" class=\"headerlink\" title=\"【HTML】Shadow DOM\"></a>【HTML】Shadow DOM</h1><h2 id=\"概况\"><a href=\"#概况\" class=\"headerlink\" title=\"概况\"></a><h1>概况</h1></h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>能够为 Web 组件中的 DOM 和 CSS 提供了封装，实际上是在浏览器渲染文档的时候会给指定的 DOM 结构插入编写好的 DOM 元素，但是插入的 Shadow DOM 会与主文档的 DOM 保持<strong>分离</strong>，也就是说 Shadow DOM<strong>不存在</strong>于主 DOM 树上。shadow root 节点为起始根节点，在这个根节点的下方，可以是任意元素，和普通的 DOM 元素一样。</p>\n<p>并且 Shadow DOM 封装出来的 DOM 元素是<strong>独立</strong>的，外部的配置不会影响到内部，内部的配置也不会影响外部。</p>\n<p><a href=\"https://imgse.com/i/pCfsSyD\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfsSyD.png\" alt=\"pCfsSyD.png\"></a></p>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><p>控制台-》设置按钮-》Preference -》 Elements -》点击 show user anent shadow dom 的 checkbox</p>\n<p><a href=\"https://imgse.com/i/pCfrOF1\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfrOF1.png\" alt=\"pCfrOF1.png\"></a></p>\n<p>打开之后可以看到一些元素的真实布局及内容组成。</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><p><img src=\"https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_shadow_DOM/shadowdom.svg\" alt=\"image.png\"></p>\n<ul>\n<li><p><code>Shadow host</code>：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</p>\n</li>\n<li><p><code>Shadow tree</code>：Shadow DOM 内部的 DOM 树。</p>\n</li>\n<li><p><code>Shadow boundary</code>：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</p>\n</li>\n<li><p><code>Shadow root</code>: Shadow tree 的根节点。</p>\n</li>\n</ul>\n<h2 id=\"custom-element-自定义标签\"><a href=\"#custom-element-自定义标签\" class=\"headerlink\" title=\"custom element(自定义标签)\"></a><h1>custom element(自定义标签)</h1></h2><h3 id=\"概况-1\"><a href=\"#概况-1\" class=\"headerlink\" title=\"概况\"></a>概况</h3><p>可以注册一个自定义标签，<code>CustomElementRegistry</code>提供注册自定义元素和查询已注册元素的方法，使用<code>customElements</code>可以直接获取其实例。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>作用</th>\n<th>参数</th>\n<th>返回值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>customElements.define</code></td>\n<td>定义了一个自定义元素</td>\n<td><code>name</code>: 自定义元素名; <code>constructor</code>: 自定义元素构造器; <code>options</code>: 控制元素如何定义(目前只支持extends)</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>customElements.get</code></td>\n<td>返回以前定义自定义元素的构造函数</td>\n<td><code>name</code>: 返回引用的构造函数的自定义元素的名字</td>\n<td>指定名字的自定义元素的构造函数，如果没有使用该名称的自定义元素定义，则为undefined。</td>\n</tr>\n<tr>\n<td><code>customElements.upgrade</code></td>\n<td>将更新节点子树中所有包含阴影的自定义元素，甚至在它们连接到主文档之前也是如此</td>\n<td><code>root</code>: 待升级的包含阴影的派生元素节点</td>\n<td>-</td>\n</tr>\n<tr>\n<td><code>customElements.whenDefined</code></td>\n<td>当一个自定义节点被定义时走入then，如果这个元素名没有被定义，那么返回的是一直pending状态</td>\n<td><code>name</code>: 自定义元素名</td>\n<td>Promise</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&quot;test-shadow-dom&quot;</span>, <span class=\"title class_\">TestShadowCls</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a><h1>使用</h1></h2><h3 id=\"挂载-shadow-dom\"><a href=\"#挂载-shadow-dom\" class=\"headerlink\" title=\"挂载 shadow dom\"></a>挂载 shadow dom</h3><p>可以调用<code>Element.attachShadow</code>将 Shadow Dom 选择挂载或者卸载。此方法返回的是一个类 dom，可以像操作普通 dom 一样对其进行操作</p>\n<table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>作用</th>\n<th>可选值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>mode</code></td>\n<td><code>指定 Shadow DOM 树封装模式的字符串</code></td>\n<td><code>open</code>&#x2F;<code>closed</code></td>\n</tr>\n<tr>\n<td><code>delegatesFocus </code></td>\n<td><code>焦点委托</code></td>\n<td><code>boolean</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>挂载</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> shadow = el.<span class=\"title function_\">attachShadow</span>(&#123;</span><br><span class=\"line\">  <span class=\"attr\">mode</span>: <span class=\"string\">&quot;open&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">dir</span>(shadow);</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pCfgDbD\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfgDbD.png\" alt=\"pCfgDbD.png\"></a></p>\n</li>\n<li><p>操作 shadow dom</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> html = <span class=\"string\">`&lt;p&gt;测试1&lt;/p&gt;`</span>;</span><br><span class=\"line\">shadow.<span class=\"property\">innerHTML</span> = html;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pCfRCm8\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfRCm8.png\" alt=\"pCfRCm8.png\"></a></p>\n</li>\n</ul>\n<h3 id=\"自定义元素\"><a href=\"#自定义元素\" class=\"headerlink\" title=\"自定义元素\"></a>自定义元素</h3><p>Shadow DOM 可以渲染自定义的元素，类似于 vue3 中的组件，但里面的样式并不互相干扰。</p>\n<ul>\n<li><p>新建类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TestShadowCls</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">HTMLElement</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(); <span class=\"comment\">//必要的，因为属于子类</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个 Shadow DOM 并为其加上需要的数据</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">addShadow</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shadow</span> = <span class=\"variable language_\">this</span>.<span class=\"title function_\">attachShadow</span>(&#123;</span><br><span class=\"line\">      <span class=\"attr\">mode</span>: <span class=\"string\">&quot;open&quot;</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">createChild</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> el = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pel = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">  pel.<span class=\"property\">textContent</span> = <span class=\"string\">&quot;测试文案&quot;</span>;</span><br><span class=\"line\">  pel.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;test&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> imgae = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;img&quot;</span>);</span><br><span class=\"line\">  imgae.<span class=\"title function_\">setAttribute</span>(<span class=\"string\">&quot;src&quot;</span>, <span class=\"string\">&quot;https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png&quot;</span>)</span><br><span class=\"line\">  imgae.<span class=\"property\">src</span>=<span class=\"string\">&quot;https://psstatic.cdn.bcebos.com/video/wiseindex/aa6eef91f8b5b1a33b454c401_1660835115000.png&quot;</span>;</span><br><span class=\"line\">  el.<span class=\"title function_\">appendChild</span>(pel);</span><br><span class=\"line\">  el.<span class=\"title function_\">appendChild</span>(imgae)</span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shadow</span>.<span class=\"title function_\">appendChild</span>(el)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>定义自定义的元素名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">customElements.<span class=\"title function_\">define</span>(<span class=\"string\">&quot;test-shadow-dom&quot;</span>, <span class=\"title class_\">TestShadowCls</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"language-css\"></span></span><br><span class=\"line\"><span class=\"language-css\">  <span class=\"selector-tag\">p</span>&#123;</span></span><br><span class=\"line\"><span class=\"language-css\">    <span class=\"attribute\">color</span>: red;</span></span><br><span class=\"line\"><span class=\"language-css\">  &#125;</span></span><br><span class=\"line\"><span class=\"language-css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">test-shadow-dom</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>渲染效果如下，里面的文案并没有因为<code>style</code>加上的元素样式而生效</p>\n<p><a href=\"https://imgse.com/i/pCfqRu4\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfqRu4.png\" alt=\"pCfqRu4.png\"></a></p>\n</li>\n<li><p>添加样式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">createClass</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> style = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;style&quot;</span>);</span><br><span class=\"line\">  style.<span class=\"property\">textContent</span> = <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">      .test&#123;</span></span><br><span class=\"line\"><span class=\"string\">          color: blue;</span></span><br><span class=\"line\"><span class=\"string\">          font-weight: 600</span></span><br><span class=\"line\"><span class=\"string\">      &#125;</span></span><br><span class=\"line\"><span class=\"string\">  `</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">shadow</span>.<span class=\"title function_\">appendChild</span>(style)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>加上了之后，样式生效</p>\n<p><a href=\"https://imgse.com/i/pCfL98f\"><img src=\"https://s1.ax1x.com/2023/07/12/pCfL98f.png\" alt=\"pCfL98f.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Web_components/Using_shadow_DOM\">使用 shadow DOM</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/559759502\">究竟什么是 Shadow DOM？</a></p>\n"},{"title":"【HTML】记录小点","_content":"\n### 如何区分H5、HTML、XHTML\n\n基本概念：\n\n- H5：是html、xhtml和html dom的新标准，h5最先是由web'超文本应用技术工作组命名的一种超文本标记语言，随后与w3c的xhtml2.0结合，产生了现在的h5。可以理解为h5=html+css3+HTML+JS+API\n\n- HTML：超文本标记语言，是一种基本的web网页设计语言\n\n- XHTML：可扩展的文本标记语言，是一种置标语言，表现方式和HTML类似，不过语法更加严格。本质上讲，XHTML是一个过度技术，结合了XML的强大功能及大多数HTML的简单特性\n\n特性区别\n\n- H5：\n    - 用于绘画的canvas\n    - 用于媒介的video和audio元素\n    - 对本地离线储存有更好的支持\n    - 新的特殊内容元素：article、aside、footer、header、hgroup、nav、section\n    - 新的表单控件：calendar、date、time、email、url、search\n    - 语义化标签，例如header、h1、footer等，有利于SEO\n\n- HTML\n    - 标识文本，例如定义标题文本、段落文本、列表文本等\n    - 建立超链接，便于页面链接的跳转\n    - 创建列表，把信息有序地组织在一起以方便预览\n    - 在网页中显示图像、声音、视频、动画等多媒体信息\n    - 可以制作表格、表单\n    - 无语义化标签\n\n- XHTML：\n    - 要求正确嵌套\n    - 所有元素必须关闭\n    - 区分大小写\n    - 属性要用双引号\n    - 用id属性替代name\n    - 特殊字符处理\n    - 处理各大浏览器的兼容问题\n\n### W3C\n\n- W3C标准规范要求：书写标签必须闭合、标签小写、不乱嵌套，可以提高机器人对网页的搜索概率\n- 建议使用CSS和JS脚本，从而达到结构与行为、结构与表现的分离，提高页面渲染速度，可以更快显示页面内容\n- 不需要变动页面内容，可以提供打印版本而不需要复制内容，提高网站易用性。\n- 标签样式分离，合理语义化标签，使内容能被更多用户访问和更广泛的设备访问，使用更少的代码和组件，从而降低维护成本，且改版容易\n\n### HTML的DOCTYPE作用\n\n- 定义\n\n    是Document Type的简写，不是HTML标签，也没有结束标签，只用于告诉浏览器当前HTML是用什么版本编写的，是一种标记语言的文档类型声明\n\n    必须在html第一行，在html标签前面，其会影响代码验证，并决定了浏览器应该如何显示用户的web文档\n\n- 作用\n\n    用于声明文档类型，浏览器通过这个可以了解预期的文档类型，这样可以知道用哪一种规范（DTD）解析文档（html或xhtml）\n\n### HTML的DOCTYPE的种类\n\n- 严格版本Strict、过渡版本Transitional和基于框架Frameset\n\n- 严格版本/标准模式：呈现遵循最新标准的网页\n- 松散/兼容/包容模式：为传统浏览器设计的网页\n\n### Quirks是什么，与标准模式区别\n\n- Quirks/包容模式\n    \n    IE6之前的页面不会写DTD，所以ie6假定了如果写了DTD，那么就意味着这个页面采用对css支持更好的布局，如果没有，就采用兼容之前的布局方式，这就是quirks模式\n\n- 区别\n    - 盒模型\n        \n        标准模式：宽度=width\n\n        quirks模式：宽度=padding+width+border\n\n    - 设置百分比的高度：\n\n        标准模式：元素高度是由内容来决定的。如果父元素没有设置高度，那么子元素设置的高度百分比是无效的\n\n    - 设置行内元素高度\n\n        标准模式：行内元素高度设置是无效的\n\n        quirks模式：行内元素可以设置高度\n\n    - 设置水平居中\n\n        标准模式：margin=auto是有效的\n\n        quirks模式：auto是无效的\n\n### h5新特性\n\n- 离线缓存：关闭浏览器后再次打开时恢复数据，减少网络流量\n- 音视频、调用摄像头、手机相册、通讯录等\n- 地理定位\n- canvas绘图\n- 拖拽、撤销历史、文本选择等\n- 开发和维护成本低于app，页面内存占用小，减少用户不必要支出\n- css3支持字体嵌入、版面排版\n- figure: 规定独立的流内容(图片,代码等),figure的内容应该与主内容相关,同时元素位置相对于主内容是独立的,如果被删除不会造成影响\n\n### 元素alt和title\n\n- 相同处：都属于提示类文案\n- 不同\n    - alt在图片中，加载失败时显示alt，而title是会出现一个小浮窗\n    - alt是img必要属性，只能用在img、area和input元素中，title不是img必要属性，任何元素都可以使用\n    - alt只能是元素属性，title可以作为属性，也可以作为标签\\<title\\>使用\n    - a标签嵌套img标签时，起作用的是img的title属性\n    - 无障碍：alt可以触发阅读器，title不行\n    - SEO：alt可以作为图片的SEO优化，title对于元素的SEO优化较小\n\n### background-image和img设置图片有什么区别\n\n相同点：\n\n- 都可以显示图片\n- 可以设置图片大小\n\n不同点: \n- background-image是css属性，img是html标签\n- background-image设置宽高需要配合background-position、background-size等属性，img标签与width、height配合\n- img可以设置alt属性，用于优化seo和图片加载失败的描述，background-image不行\n- img可以使用srcset属性用于响应式图片（srcset=\"image-1x.jpg 1x, image-2x.jpg 2x\" ）\n- img是作为独立元素，影响文档流；background-image是作为背景图，不影响文档流\n- 加载时机:\n    - img：html渲染到img标签时就会进行图片加载\n    - background-image：\n        - 内联（style=\"background-image:url(image.jpg)\": 和img标签类似，解析到则进行加载\n        - 外部css：css文件下载并解析后执行\n        - 当页面内容加载过多时，可能会降低background-image的加载优先级，因此会被认为是装饰性图片\n- 懒加载\n    - img：loading=\"lazy\"，chrome76+，firefox75+\n    - background-image：只能通过js或css实现\n- 大图时导致页面延迟渲染\n    - img：\n        - 在解析html时，若未加上loading=\"lazy\"，那么就会立马进行图片加载，这个时候会占用带宽，因此会导致关键资源加载延迟\n        - 未设置宽高时，由于图片加载后，会导致其余元素位置变化，而触发回流\n    - background-image：\n        - 对图片的加载是在css解析过程中进行的\n        - 背景图的加载一般会触发重绘，通常不会导致回流（除非元素尺寸依赖于背景图\n\n优缺点：\n\n- img：\n    - 优点：\n        - 语义化\n        - 利于seo和无障碍优化\n        - 响应式：loading=\"lazy\"（有兼容性\n        - 打印支持：在打印时显示图片\n    - 缺点\n        - 影响其他元素\n        - 图片较大会影响页面渲染，图片过多会增加http请求\n    - 场景\n        - 内容性图片：如文章配图、产品展示图、用户头像等。\n        - 需要 SEO 优化的图片：如商品图片、图表等。\n        - 需要可访问性支持的图片：如信息图、图表等。\n        - 需要打印的图片：如报告、文档中的插图。\n\n- background-image：\n    - 优点：\n        - 利用雪碧图可以减少http请求\n        - 不占用文档流\n        - 图片加载失败不会影响页面结构\n    - 缺点：\n        - 不利于seo和无障碍\n        - 默认不打印背景图片\n        - 响应式：需要手动写\n    - 场景：\n        - 装饰性图片：如按钮图标、背景纹理、边框装饰等。\n        - CSS 雪碧图：合并多个小图标减少请求。\n        - 全屏背景或遮罩：如页面背景图、模态框遮罩层。\n        - 动态效果控制：通过 CSS 动画或过渡实现背景图变化。\n\n### 乱码原因\n\n- 不同编码内容混杂：html乱码是由html编码问题造成的\n- 未设置html编码，设置meta头text/html;charset=utf-8\n- 编辑工具的编码问题，例如使用记事本直接写html可能会造成乱码\n- 浏览器不能自动检测网页编码，造成网页乱码\n\n### js放在html不同位置有什么区别\n\n- 如果使用`window.`，将js放在里面，则在哪儿都一样，因为都是需要等body之后再加载\n- 如果不使用`window.`，放在head中，代码不会执行。因为html执行顺序不同，html从开始运行到进入index.js文件，其中被function包围起来的代码不会被运行，直接执行最后一句代码。如果html页面没有加载完，找不到元素会报错\n\n### 什么是列表及列表分类\n\n列表定义：\n\n- 是一种信息资源的展示方式\n- 可以使得信息结构化和条理化，并以列表的样式显示出来，便于阅读者快速方便的获取信息\n- ul、ol、dl不能嵌套其他标签，但是li可以\n\n列表分类\n\n- ol：有序列表\n    - 有顺序，每个li独占一行\n    - 一般用于排序类型的列表\n    - 默认li标签前面有顺序标记\n- ul：无序列表\n    - 无顺序，每个li独占一行\n    - 一般用于无序类型的列表，例如导航栏等\n    - 默认li标签前面有·标记\n- dl：自定义列表\n    - 无顺序，dt、dd标签独占一行\n    - 一般用于一个标题下有一个或多个列表项\n    - 默认无标记\n\n### 常见表单元素\n\n- input\n\n    type类型包括：password、text、image、hidden、file\n- textarea\n\n    可设置行列数\n- button\n- select\n\n    option、label\n- radio\n- checkbox\n\n### 表单提交方式\n\n- submit提交\n\n    在form表单加上action属性，且input加上type=submit\n- axios提交\n\n### 为什么使用h5标签布局网页\n\n对h5来说，网页结构与使用更加语义化，利于seo\n\nsection和article标签相似，且和nav也类似\n\nnav：非常常见的标签，本身无任何语义，用作布局及样式话标签\n\nsection：用作一段有专题性的内容，一般在这个标签里面会带有标题。典型场景包括文章章节、标签对话框的标签页或论文中有编号的部分\n\narticle：特殊的section标签，代表一个独立完整的相关内容块\n\n### 如何达到表单的初步验证\n\n验证属性\n- `required`：必填\n    - `valueMissing`: 判断当前元素是否为空，配合`required`使用\n- `pattern`：正则验证当前元素值是否匹配\n    - `patternMismatch`: 判断当前元素是否符合正则，配合`pattern`使用\n- `max`和`min`：验证当前元素最大或最小值，一般用于染个/number类型的元素\n    - rangeUnderflow：判断当前元素值是否小于min属性值，配合min属性使用\n- `minlength`和`maxlength`：验证内容最大长度和最小长度\n    - `tooLong`: 判断当前元素长度是否符合，配合`maxlength`使用\n- `validity`：h5表单提供的一种有效状态，有效状态通过`validityState`获取，`validityState`通过`validity`获取\n\n验证状态\n\n- `typeMismatch`: 判断当前元素值的类型是否匹配，配合email/number/url使用\n- `stepMismatch`: 判断当前元素是否与step设置相同，配合step使用，并不与min、max属性值比较\n- `valid`: 判断当前元素是否正确，返回true标识验证成功\n- `customError`: 配合`setCustomValidity()`方法使用\n- setCustomValidity(message)：设置自定义错误信息，一旦使用该方法修改默认错误提示后，即使输入正确也会有提示\n\n### iframe优缺点\n\n优点:\n- 解决加载缓慢的第三方内容\n- iframe跨域通信(postMessage)\n- iframe无刷新文件上传\n\n缺点\n- 阻塞主页面的onLoad事件\n- 不利于seo\n- 页面产生多,不利于管理\n- 增加服务器请求\n- 可能会导致资源无法共用\n    - 同源+缓存策略(未过期/不需要重新请求)会从缓存中读取\n    - 同源 + 缓存过期但有 ETag\t⚠️ 发送条件请求（可能返回 304）\n    - 跨域 + 无 CORS 缓存策略\t✅ 重新请求\n    - 请求头或方法不同\t✅ 重新请求\n\n### 页面性能优化\n\n- 内容方面\n    - 减少http请求\n    - 使用http2/3\n    - 减少dom元素数量\n    - 请求缓存\n    - 使用多域名负载网页内的多个文件,图片\n    - 使用gzip压缩\n- css\n    - css放到页面上端\n    - 把js和css分离开\n    - 精简js和css\n    - 避免css表达式\n- js\n    - tree shanking\n    - 放到页面底部\n    - 减少重复代码\n- 图片\n    - 优化图片\n    - 不缩放图片\n    - 使用恰当的图片格式(webp更好)\n    - css雪碧图优化\n\n### 图片懒加载和预加载\n\n懒加载: 滚动到了图片的位置,才进行加载.\n\n减少不必要的访问数据库或延迟访问数据的次数,减少服务器端的压力\n\n预加载: 在还没到图片位置的时候,就开始加载图片\n\n在网页全部加载之前加载图片,那么当用户查看时,可以之间从缓存中渲染图片,减少等待时间\n\n当图片过大时,可能会导致页面白屏时间加长\n\n### a标签作用\n\n- 外部页面连接\n- 本地页面链接\n\n    href指向相对路径,就可以打开当前目录下对应的文件\n- 锚点链接\n- 其他\n    - 打开email: `<a href='mailto:邮件接收人'></a>`\n    - 短链,打开小程序,qq等\n    - 打电话: `<a href='tel: 180xxx'></a>`","source":"_posts/HTML/小点.md","raw":"---\ntitle: 【HTML】记录小点\ncategories: HTML\n---\n\n### 如何区分H5、HTML、XHTML\n\n基本概念：\n\n- H5：是html、xhtml和html dom的新标准，h5最先是由web'超文本应用技术工作组命名的一种超文本标记语言，随后与w3c的xhtml2.0结合，产生了现在的h5。可以理解为h5=html+css3+HTML+JS+API\n\n- HTML：超文本标记语言，是一种基本的web网页设计语言\n\n- XHTML：可扩展的文本标记语言，是一种置标语言，表现方式和HTML类似，不过语法更加严格。本质上讲，XHTML是一个过度技术，结合了XML的强大功能及大多数HTML的简单特性\n\n特性区别\n\n- H5：\n    - 用于绘画的canvas\n    - 用于媒介的video和audio元素\n    - 对本地离线储存有更好的支持\n    - 新的特殊内容元素：article、aside、footer、header、hgroup、nav、section\n    - 新的表单控件：calendar、date、time、email、url、search\n    - 语义化标签，例如header、h1、footer等，有利于SEO\n\n- HTML\n    - 标识文本，例如定义标题文本、段落文本、列表文本等\n    - 建立超链接，便于页面链接的跳转\n    - 创建列表，把信息有序地组织在一起以方便预览\n    - 在网页中显示图像、声音、视频、动画等多媒体信息\n    - 可以制作表格、表单\n    - 无语义化标签\n\n- XHTML：\n    - 要求正确嵌套\n    - 所有元素必须关闭\n    - 区分大小写\n    - 属性要用双引号\n    - 用id属性替代name\n    - 特殊字符处理\n    - 处理各大浏览器的兼容问题\n\n### W3C\n\n- W3C标准规范要求：书写标签必须闭合、标签小写、不乱嵌套，可以提高机器人对网页的搜索概率\n- 建议使用CSS和JS脚本，从而达到结构与行为、结构与表现的分离，提高页面渲染速度，可以更快显示页面内容\n- 不需要变动页面内容，可以提供打印版本而不需要复制内容，提高网站易用性。\n- 标签样式分离，合理语义化标签，使内容能被更多用户访问和更广泛的设备访问，使用更少的代码和组件，从而降低维护成本，且改版容易\n\n### HTML的DOCTYPE作用\n\n- 定义\n\n    是Document Type的简写，不是HTML标签，也没有结束标签，只用于告诉浏览器当前HTML是用什么版本编写的，是一种标记语言的文档类型声明\n\n    必须在html第一行，在html标签前面，其会影响代码验证，并决定了浏览器应该如何显示用户的web文档\n\n- 作用\n\n    用于声明文档类型，浏览器通过这个可以了解预期的文档类型，这样可以知道用哪一种规范（DTD）解析文档（html或xhtml）\n\n### HTML的DOCTYPE的种类\n\n- 严格版本Strict、过渡版本Transitional和基于框架Frameset\n\n- 严格版本/标准模式：呈现遵循最新标准的网页\n- 松散/兼容/包容模式：为传统浏览器设计的网页\n\n### Quirks是什么，与标准模式区别\n\n- Quirks/包容模式\n    \n    IE6之前的页面不会写DTD，所以ie6假定了如果写了DTD，那么就意味着这个页面采用对css支持更好的布局，如果没有，就采用兼容之前的布局方式，这就是quirks模式\n\n- 区别\n    - 盒模型\n        \n        标准模式：宽度=width\n\n        quirks模式：宽度=padding+width+border\n\n    - 设置百分比的高度：\n\n        标准模式：元素高度是由内容来决定的。如果父元素没有设置高度，那么子元素设置的高度百分比是无效的\n\n    - 设置行内元素高度\n\n        标准模式：行内元素高度设置是无效的\n\n        quirks模式：行内元素可以设置高度\n\n    - 设置水平居中\n\n        标准模式：margin=auto是有效的\n\n        quirks模式：auto是无效的\n\n### h5新特性\n\n- 离线缓存：关闭浏览器后再次打开时恢复数据，减少网络流量\n- 音视频、调用摄像头、手机相册、通讯录等\n- 地理定位\n- canvas绘图\n- 拖拽、撤销历史、文本选择等\n- 开发和维护成本低于app，页面内存占用小，减少用户不必要支出\n- css3支持字体嵌入、版面排版\n- figure: 规定独立的流内容(图片,代码等),figure的内容应该与主内容相关,同时元素位置相对于主内容是独立的,如果被删除不会造成影响\n\n### 元素alt和title\n\n- 相同处：都属于提示类文案\n- 不同\n    - alt在图片中，加载失败时显示alt，而title是会出现一个小浮窗\n    - alt是img必要属性，只能用在img、area和input元素中，title不是img必要属性，任何元素都可以使用\n    - alt只能是元素属性，title可以作为属性，也可以作为标签\\<title\\>使用\n    - a标签嵌套img标签时，起作用的是img的title属性\n    - 无障碍：alt可以触发阅读器，title不行\n    - SEO：alt可以作为图片的SEO优化，title对于元素的SEO优化较小\n\n### background-image和img设置图片有什么区别\n\n相同点：\n\n- 都可以显示图片\n- 可以设置图片大小\n\n不同点: \n- background-image是css属性，img是html标签\n- background-image设置宽高需要配合background-position、background-size等属性，img标签与width、height配合\n- img可以设置alt属性，用于优化seo和图片加载失败的描述，background-image不行\n- img可以使用srcset属性用于响应式图片（srcset=\"image-1x.jpg 1x, image-2x.jpg 2x\" ）\n- img是作为独立元素，影响文档流；background-image是作为背景图，不影响文档流\n- 加载时机:\n    - img：html渲染到img标签时就会进行图片加载\n    - background-image：\n        - 内联（style=\"background-image:url(image.jpg)\": 和img标签类似，解析到则进行加载\n        - 外部css：css文件下载并解析后执行\n        - 当页面内容加载过多时，可能会降低background-image的加载优先级，因此会被认为是装饰性图片\n- 懒加载\n    - img：loading=\"lazy\"，chrome76+，firefox75+\n    - background-image：只能通过js或css实现\n- 大图时导致页面延迟渲染\n    - img：\n        - 在解析html时，若未加上loading=\"lazy\"，那么就会立马进行图片加载，这个时候会占用带宽，因此会导致关键资源加载延迟\n        - 未设置宽高时，由于图片加载后，会导致其余元素位置变化，而触发回流\n    - background-image：\n        - 对图片的加载是在css解析过程中进行的\n        - 背景图的加载一般会触发重绘，通常不会导致回流（除非元素尺寸依赖于背景图\n\n优缺点：\n\n- img：\n    - 优点：\n        - 语义化\n        - 利于seo和无障碍优化\n        - 响应式：loading=\"lazy\"（有兼容性\n        - 打印支持：在打印时显示图片\n    - 缺点\n        - 影响其他元素\n        - 图片较大会影响页面渲染，图片过多会增加http请求\n    - 场景\n        - 内容性图片：如文章配图、产品展示图、用户头像等。\n        - 需要 SEO 优化的图片：如商品图片、图表等。\n        - 需要可访问性支持的图片：如信息图、图表等。\n        - 需要打印的图片：如报告、文档中的插图。\n\n- background-image：\n    - 优点：\n        - 利用雪碧图可以减少http请求\n        - 不占用文档流\n        - 图片加载失败不会影响页面结构\n    - 缺点：\n        - 不利于seo和无障碍\n        - 默认不打印背景图片\n        - 响应式：需要手动写\n    - 场景：\n        - 装饰性图片：如按钮图标、背景纹理、边框装饰等。\n        - CSS 雪碧图：合并多个小图标减少请求。\n        - 全屏背景或遮罩：如页面背景图、模态框遮罩层。\n        - 动态效果控制：通过 CSS 动画或过渡实现背景图变化。\n\n### 乱码原因\n\n- 不同编码内容混杂：html乱码是由html编码问题造成的\n- 未设置html编码，设置meta头text/html;charset=utf-8\n- 编辑工具的编码问题，例如使用记事本直接写html可能会造成乱码\n- 浏览器不能自动检测网页编码，造成网页乱码\n\n### js放在html不同位置有什么区别\n\n- 如果使用`window.`，将js放在里面，则在哪儿都一样，因为都是需要等body之后再加载\n- 如果不使用`window.`，放在head中，代码不会执行。因为html执行顺序不同，html从开始运行到进入index.js文件，其中被function包围起来的代码不会被运行，直接执行最后一句代码。如果html页面没有加载完，找不到元素会报错\n\n### 什么是列表及列表分类\n\n列表定义：\n\n- 是一种信息资源的展示方式\n- 可以使得信息结构化和条理化，并以列表的样式显示出来，便于阅读者快速方便的获取信息\n- ul、ol、dl不能嵌套其他标签，但是li可以\n\n列表分类\n\n- ol：有序列表\n    - 有顺序，每个li独占一行\n    - 一般用于排序类型的列表\n    - 默认li标签前面有顺序标记\n- ul：无序列表\n    - 无顺序，每个li独占一行\n    - 一般用于无序类型的列表，例如导航栏等\n    - 默认li标签前面有·标记\n- dl：自定义列表\n    - 无顺序，dt、dd标签独占一行\n    - 一般用于一个标题下有一个或多个列表项\n    - 默认无标记\n\n### 常见表单元素\n\n- input\n\n    type类型包括：password、text、image、hidden、file\n- textarea\n\n    可设置行列数\n- button\n- select\n\n    option、label\n- radio\n- checkbox\n\n### 表单提交方式\n\n- submit提交\n\n    在form表单加上action属性，且input加上type=submit\n- axios提交\n\n### 为什么使用h5标签布局网页\n\n对h5来说，网页结构与使用更加语义化，利于seo\n\nsection和article标签相似，且和nav也类似\n\nnav：非常常见的标签，本身无任何语义，用作布局及样式话标签\n\nsection：用作一段有专题性的内容，一般在这个标签里面会带有标题。典型场景包括文章章节、标签对话框的标签页或论文中有编号的部分\n\narticle：特殊的section标签，代表一个独立完整的相关内容块\n\n### 如何达到表单的初步验证\n\n验证属性\n- `required`：必填\n    - `valueMissing`: 判断当前元素是否为空，配合`required`使用\n- `pattern`：正则验证当前元素值是否匹配\n    - `patternMismatch`: 判断当前元素是否符合正则，配合`pattern`使用\n- `max`和`min`：验证当前元素最大或最小值，一般用于染个/number类型的元素\n    - rangeUnderflow：判断当前元素值是否小于min属性值，配合min属性使用\n- `minlength`和`maxlength`：验证内容最大长度和最小长度\n    - `tooLong`: 判断当前元素长度是否符合，配合`maxlength`使用\n- `validity`：h5表单提供的一种有效状态，有效状态通过`validityState`获取，`validityState`通过`validity`获取\n\n验证状态\n\n- `typeMismatch`: 判断当前元素值的类型是否匹配，配合email/number/url使用\n- `stepMismatch`: 判断当前元素是否与step设置相同，配合step使用，并不与min、max属性值比较\n- `valid`: 判断当前元素是否正确，返回true标识验证成功\n- `customError`: 配合`setCustomValidity()`方法使用\n- setCustomValidity(message)：设置自定义错误信息，一旦使用该方法修改默认错误提示后，即使输入正确也会有提示\n\n### iframe优缺点\n\n优点:\n- 解决加载缓慢的第三方内容\n- iframe跨域通信(postMessage)\n- iframe无刷新文件上传\n\n缺点\n- 阻塞主页面的onLoad事件\n- 不利于seo\n- 页面产生多,不利于管理\n- 增加服务器请求\n- 可能会导致资源无法共用\n    - 同源+缓存策略(未过期/不需要重新请求)会从缓存中读取\n    - 同源 + 缓存过期但有 ETag\t⚠️ 发送条件请求（可能返回 304）\n    - 跨域 + 无 CORS 缓存策略\t✅ 重新请求\n    - 请求头或方法不同\t✅ 重新请求\n\n### 页面性能优化\n\n- 内容方面\n    - 减少http请求\n    - 使用http2/3\n    - 减少dom元素数量\n    - 请求缓存\n    - 使用多域名负载网页内的多个文件,图片\n    - 使用gzip压缩\n- css\n    - css放到页面上端\n    - 把js和css分离开\n    - 精简js和css\n    - 避免css表达式\n- js\n    - tree shanking\n    - 放到页面底部\n    - 减少重复代码\n- 图片\n    - 优化图片\n    - 不缩放图片\n    - 使用恰当的图片格式(webp更好)\n    - css雪碧图优化\n\n### 图片懒加载和预加载\n\n懒加载: 滚动到了图片的位置,才进行加载.\n\n减少不必要的访问数据库或延迟访问数据的次数,减少服务器端的压力\n\n预加载: 在还没到图片位置的时候,就开始加载图片\n\n在网页全部加载之前加载图片,那么当用户查看时,可以之间从缓存中渲染图片,减少等待时间\n\n当图片过大时,可能会导致页面白屏时间加长\n\n### a标签作用\n\n- 外部页面连接\n- 本地页面链接\n\n    href指向相对路径,就可以打开当前目录下对应的文件\n- 锚点链接\n- 其他\n    - 打开email: `<a href='mailto:邮件接收人'></a>`\n    - 短链,打开小程序,qq等\n    - 打电话: `<a href='tel: 180xxx'></a>`","slug":"HTML/小点","published":1,"date":"2025-08-13T07:29:09.434Z","updated":"2025-05-09T08:47:55.264Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x6000dbofm6elbecrt","content":"<h3 id=\"如何区分H5、HTML、XHTML\"><a href=\"#如何区分H5、HTML、XHTML\" class=\"headerlink\" title=\"如何区分H5、HTML、XHTML\"></a>如何区分H5、HTML、XHTML</h3><p>基本概念：</p>\n<ul>\n<li><p>H5：是html、xhtml和html dom的新标准，h5最先是由web’超文本应用技术工作组命名的一种超文本标记语言，随后与w3c的xhtml2.0结合，产生了现在的h5。可以理解为h5&#x3D;html+css3+HTML+JS+API</p>\n</li>\n<li><p>HTML：超文本标记语言，是一种基本的web网页设计语言</p>\n</li>\n<li><p>XHTML：可扩展的文本标记语言，是一种置标语言，表现方式和HTML类似，不过语法更加严格。本质上讲，XHTML是一个过度技术，结合了XML的强大功能及大多数HTML的简单特性</p>\n</li>\n</ul>\n<p>特性区别</p>\n<ul>\n<li><p>H5：</p>\n<ul>\n<li>用于绘画的canvas</li>\n<li>用于媒介的video和audio元素</li>\n<li>对本地离线储存有更好的支持</li>\n<li>新的特殊内容元素：article、aside、footer、header、hgroup、nav、section</li>\n<li>新的表单控件：calendar、date、time、email、url、search</li>\n<li>语义化标签，例如header、h1、footer等，有利于SEO</li>\n</ul>\n</li>\n<li><p>HTML</p>\n<ul>\n<li>标识文本，例如定义标题文本、段落文本、列表文本等</li>\n<li>建立超链接，便于页面链接的跳转</li>\n<li>创建列表，把信息有序地组织在一起以方便预览</li>\n<li>在网页中显示图像、声音、视频、动画等多媒体信息</li>\n<li>可以制作表格、表单</li>\n<li>无语义化标签</li>\n</ul>\n</li>\n<li><p>XHTML：</p>\n<ul>\n<li>要求正确嵌套</li>\n<li>所有元素必须关闭</li>\n<li>区分大小写</li>\n<li>属性要用双引号</li>\n<li>用id属性替代name</li>\n<li>特殊字符处理</li>\n<li>处理各大浏览器的兼容问题</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"W3C\"><a href=\"#W3C\" class=\"headerlink\" title=\"W3C\"></a>W3C</h3><ul>\n<li>W3C标准规范要求：书写标签必须闭合、标签小写、不乱嵌套，可以提高机器人对网页的搜索概率</li>\n<li>建议使用CSS和JS脚本，从而达到结构与行为、结构与表现的分离，提高页面渲染速度，可以更快显示页面内容</li>\n<li>不需要变动页面内容，可以提供打印版本而不需要复制内容，提高网站易用性。</li>\n<li>标签样式分离，合理语义化标签，使内容能被更多用户访问和更广泛的设备访问，使用更少的代码和组件，从而降低维护成本，且改版容易</li>\n</ul>\n<h3 id=\"HTML的DOCTYPE作用\"><a href=\"#HTML的DOCTYPE作用\" class=\"headerlink\" title=\"HTML的DOCTYPE作用\"></a>HTML的DOCTYPE作用</h3><ul>\n<li><p>定义</p>\n<p>  是Document Type的简写，不是HTML标签，也没有结束标签，只用于告诉浏览器当前HTML是用什么版本编写的，是一种标记语言的文档类型声明</p>\n<p>  必须在html第一行，在html标签前面，其会影响代码验证，并决定了浏览器应该如何显示用户的web文档</p>\n</li>\n<li><p>作用</p>\n<p>  用于声明文档类型，浏览器通过这个可以了解预期的文档类型，这样可以知道用哪一种规范（DTD）解析文档（html或xhtml）</p>\n</li>\n</ul>\n<h3 id=\"HTML的DOCTYPE的种类\"><a href=\"#HTML的DOCTYPE的种类\" class=\"headerlink\" title=\"HTML的DOCTYPE的种类\"></a>HTML的DOCTYPE的种类</h3><ul>\n<li><p>严格版本Strict、过渡版本Transitional和基于框架Frameset</p>\n</li>\n<li><p>严格版本&#x2F;标准模式：呈现遵循最新标准的网页</p>\n</li>\n<li><p>松散&#x2F;兼容&#x2F;包容模式：为传统浏览器设计的网页</p>\n</li>\n</ul>\n<h3 id=\"Quirks是什么，与标准模式区别\"><a href=\"#Quirks是什么，与标准模式区别\" class=\"headerlink\" title=\"Quirks是什么，与标准模式区别\"></a>Quirks是什么，与标准模式区别</h3><ul>\n<li><p>Quirks&#x2F;包容模式</p>\n<p>  IE6之前的页面不会写DTD，所以ie6假定了如果写了DTD，那么就意味着这个页面采用对css支持更好的布局，如果没有，就采用兼容之前的布局方式，这就是quirks模式</p>\n</li>\n<li><p>区别</p>\n<ul>\n<li><p>盒模型</p>\n<p>  标准模式：宽度&#x3D;width</p>\n<p>  quirks模式：宽度&#x3D;padding+width+border</p>\n</li>\n<li><p>设置百分比的高度：</p>\n<p>  标准模式：元素高度是由内容来决定的。如果父元素没有设置高度，那么子元素设置的高度百分比是无效的</p>\n</li>\n<li><p>设置行内元素高度</p>\n<p>  标准模式：行内元素高度设置是无效的</p>\n<p>  quirks模式：行内元素可以设置高度</p>\n</li>\n<li><p>设置水平居中</p>\n<p>  标准模式：margin&#x3D;auto是有效的</p>\n<p>  quirks模式：auto是无效的</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"h5新特性\"><a href=\"#h5新特性\" class=\"headerlink\" title=\"h5新特性\"></a>h5新特性</h3><ul>\n<li>离线缓存：关闭浏览器后再次打开时恢复数据，减少网络流量</li>\n<li>音视频、调用摄像头、手机相册、通讯录等</li>\n<li>地理定位</li>\n<li>canvas绘图</li>\n<li>拖拽、撤销历史、文本选择等</li>\n<li>开发和维护成本低于app，页面内存占用小，减少用户不必要支出</li>\n<li>css3支持字体嵌入、版面排版</li>\n<li>figure: 规定独立的流内容(图片,代码等),figure的内容应该与主内容相关,同时元素位置相对于主内容是独立的,如果被删除不会造成影响</li>\n</ul>\n<h3 id=\"元素alt和title\"><a href=\"#元素alt和title\" class=\"headerlink\" title=\"元素alt和title\"></a>元素alt和title</h3><ul>\n<li>相同处：都属于提示类文案</li>\n<li>不同<ul>\n<li>alt在图片中，加载失败时显示alt，而title是会出现一个小浮窗</li>\n<li>alt是img必要属性，只能用在img、area和input元素中，title不是img必要属性，任何元素都可以使用</li>\n<li>alt只能是元素属性，title可以作为属性，也可以作为标签&lt;title&gt;使用</li>\n<li>a标签嵌套img标签时，起作用的是img的title属性</li>\n<li>无障碍：alt可以触发阅读器，title不行</li>\n<li>SEO：alt可以作为图片的SEO优化，title对于元素的SEO优化较小</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"background-image和img设置图片有什么区别\"><a href=\"#background-image和img设置图片有什么区别\" class=\"headerlink\" title=\"background-image和img设置图片有什么区别\"></a>background-image和img设置图片有什么区别</h3><p>相同点：</p>\n<ul>\n<li>都可以显示图片</li>\n<li>可以设置图片大小</li>\n</ul>\n<p>不同点: </p>\n<ul>\n<li>background-image是css属性，img是html标签</li>\n<li>background-image设置宽高需要配合background-position、background-size等属性，img标签与width、height配合</li>\n<li>img可以设置alt属性，用于优化seo和图片加载失败的描述，background-image不行</li>\n<li>img可以使用srcset属性用于响应式图片（srcset&#x3D;”image-1x.jpg 1x, image-2x.jpg 2x” ）</li>\n<li>img是作为独立元素，影响文档流；background-image是作为背景图，不影响文档流</li>\n<li>加载时机:<ul>\n<li>img：html渲染到img标签时就会进行图片加载</li>\n<li>background-image：<ul>\n<li>内联（style&#x3D;”background-image:url(image.jpg)”: 和img标签类似，解析到则进行加载</li>\n<li>外部css：css文件下载并解析后执行</li>\n<li>当页面内容加载过多时，可能会降低background-image的加载优先级，因此会被认为是装饰性图片</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>懒加载<ul>\n<li>img：loading&#x3D;”lazy”，chrome76+，firefox75+</li>\n<li>background-image：只能通过js或css实现</li>\n</ul>\n</li>\n<li>大图时导致页面延迟渲染<ul>\n<li>img：<ul>\n<li>在解析html时，若未加上loading&#x3D;”lazy”，那么就会立马进行图片加载，这个时候会占用带宽，因此会导致关键资源加载延迟</li>\n<li>未设置宽高时，由于图片加载后，会导致其余元素位置变化，而触发回流</li>\n</ul>\n</li>\n<li>background-image：<ul>\n<li>对图片的加载是在css解析过程中进行的</li>\n<li>背景图的加载一般会触发重绘，通常不会导致回流（除非元素尺寸依赖于背景图</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>优缺点：</p>\n<ul>\n<li><p>img：</p>\n<ul>\n<li>优点：<ul>\n<li>语义化</li>\n<li>利于seo和无障碍优化</li>\n<li>响应式：loading&#x3D;”lazy”（有兼容性</li>\n<li>打印支持：在打印时显示图片</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>影响其他元素</li>\n<li>图片较大会影响页面渲染，图片过多会增加http请求</li>\n</ul>\n</li>\n<li>场景<ul>\n<li>内容性图片：如文章配图、产品展示图、用户头像等。</li>\n<li>需要 SEO 优化的图片：如商品图片、图表等。</li>\n<li>需要可访问性支持的图片：如信息图、图表等。</li>\n<li>需要打印的图片：如报告、文档中的插图。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>background-image：</p>\n<ul>\n<li>优点：<ul>\n<li>利用雪碧图可以减少http请求</li>\n<li>不占用文档流</li>\n<li>图片加载失败不会影响页面结构</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>不利于seo和无障碍</li>\n<li>默认不打印背景图片</li>\n<li>响应式：需要手动写</li>\n</ul>\n</li>\n<li>场景：<ul>\n<li>装饰性图片：如按钮图标、背景纹理、边框装饰等。</li>\n<li>CSS 雪碧图：合并多个小图标减少请求。</li>\n<li>全屏背景或遮罩：如页面背景图、模态框遮罩层。</li>\n<li>动态效果控制：通过 CSS 动画或过渡实现背景图变化。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"乱码原因\"><a href=\"#乱码原因\" class=\"headerlink\" title=\"乱码原因\"></a>乱码原因</h3><ul>\n<li>不同编码内容混杂：html乱码是由html编码问题造成的</li>\n<li>未设置html编码，设置meta头text&#x2F;html;charset&#x3D;utf-8</li>\n<li>编辑工具的编码问题，例如使用记事本直接写html可能会造成乱码</li>\n<li>浏览器不能自动检测网页编码，造成网页乱码</li>\n</ul>\n<h3 id=\"js放在html不同位置有什么区别\"><a href=\"#js放在html不同位置有什么区别\" class=\"headerlink\" title=\"js放在html不同位置有什么区别\"></a>js放在html不同位置有什么区别</h3><ul>\n<li>如果使用<code>window.</code>，将js放在里面，则在哪儿都一样，因为都是需要等body之后再加载</li>\n<li>如果不使用<code>window.</code>，放在head中，代码不会执行。因为html执行顺序不同，html从开始运行到进入index.js文件，其中被function包围起来的代码不会被运行，直接执行最后一句代码。如果html页面没有加载完，找不到元素会报错</li>\n</ul>\n<h3 id=\"什么是列表及列表分类\"><a href=\"#什么是列表及列表分类\" class=\"headerlink\" title=\"什么是列表及列表分类\"></a>什么是列表及列表分类</h3><p>列表定义：</p>\n<ul>\n<li>是一种信息资源的展示方式</li>\n<li>可以使得信息结构化和条理化，并以列表的样式显示出来，便于阅读者快速方便的获取信息</li>\n<li>ul、ol、dl不能嵌套其他标签，但是li可以</li>\n</ul>\n<p>列表分类</p>\n<ul>\n<li>ol：有序列表<ul>\n<li>有顺序，每个li独占一行</li>\n<li>一般用于排序类型的列表</li>\n<li>默认li标签前面有顺序标记</li>\n</ul>\n</li>\n<li>ul：无序列表<ul>\n<li>无顺序，每个li独占一行</li>\n<li>一般用于无序类型的列表，例如导航栏等</li>\n<li>默认li标签前面有·标记</li>\n</ul>\n</li>\n<li>dl：自定义列表<ul>\n<li>无顺序，dt、dd标签独占一行</li>\n<li>一般用于一个标题下有一个或多个列表项</li>\n<li>默认无标记</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常见表单元素\"><a href=\"#常见表单元素\" class=\"headerlink\" title=\"常见表单元素\"></a>常见表单元素</h3><ul>\n<li><p>input</p>\n<p>  type类型包括：password、text、image、hidden、file</p>\n</li>\n<li><p>textarea</p>\n<p>  可设置行列数</p>\n</li>\n<li><p>button</p>\n</li>\n<li><p>select</p>\n<p>  option、label</p>\n</li>\n<li><p>radio</p>\n</li>\n<li><p>checkbox</p>\n</li>\n</ul>\n<h3 id=\"表单提交方式\"><a href=\"#表单提交方式\" class=\"headerlink\" title=\"表单提交方式\"></a>表单提交方式</h3><ul>\n<li><p>submit提交</p>\n<p>  在form表单加上action属性，且input加上type&#x3D;submit</p>\n</li>\n<li><p>axios提交</p>\n</li>\n</ul>\n<h3 id=\"为什么使用h5标签布局网页\"><a href=\"#为什么使用h5标签布局网页\" class=\"headerlink\" title=\"为什么使用h5标签布局网页\"></a>为什么使用h5标签布局网页</h3><p>对h5来说，网页结构与使用更加语义化，利于seo</p>\n<p>section和article标签相似，且和nav也类似</p>\n<p>nav：非常常见的标签，本身无任何语义，用作布局及样式话标签</p>\n<p>section：用作一段有专题性的内容，一般在这个标签里面会带有标题。典型场景包括文章章节、标签对话框的标签页或论文中有编号的部分</p>\n<p>article：特殊的section标签，代表一个独立完整的相关内容块</p>\n<h3 id=\"如何达到表单的初步验证\"><a href=\"#如何达到表单的初步验证\" class=\"headerlink\" title=\"如何达到表单的初步验证\"></a>如何达到表单的初步验证</h3><p>验证属性</p>\n<ul>\n<li><code>required</code>：必填<ul>\n<li><code>valueMissing</code>: 判断当前元素是否为空，配合<code>required</code>使用</li>\n</ul>\n</li>\n<li><code>pattern</code>：正则验证当前元素值是否匹配<ul>\n<li><code>patternMismatch</code>: 判断当前元素是否符合正则，配合<code>pattern</code>使用</li>\n</ul>\n</li>\n<li><code>max</code>和<code>min</code>：验证当前元素最大或最小值，一般用于染个&#x2F;number类型的元素<ul>\n<li>rangeUnderflow：判断当前元素值是否小于min属性值，配合min属性使用</li>\n</ul>\n</li>\n<li><code>minlength</code>和<code>maxlength</code>：验证内容最大长度和最小长度<ul>\n<li><code>tooLong</code>: 判断当前元素长度是否符合，配合<code>maxlength</code>使用</li>\n</ul>\n</li>\n<li><code>validity</code>：h5表单提供的一种有效状态，有效状态通过<code>validityState</code>获取，<code>validityState</code>通过<code>validity</code>获取</li>\n</ul>\n<p>验证状态</p>\n<ul>\n<li><code>typeMismatch</code>: 判断当前元素值的类型是否匹配，配合email&#x2F;number&#x2F;url使用</li>\n<li><code>stepMismatch</code>: 判断当前元素是否与step设置相同，配合step使用，并不与min、max属性值比较</li>\n<li><code>valid</code>: 判断当前元素是否正确，返回true标识验证成功</li>\n<li><code>customError</code>: 配合<code>setCustomValidity()</code>方法使用</li>\n<li>setCustomValidity(message)：设置自定义错误信息，一旦使用该方法修改默认错误提示后，即使输入正确也会有提示</li>\n</ul>\n<h3 id=\"iframe优缺点\"><a href=\"#iframe优缺点\" class=\"headerlink\" title=\"iframe优缺点\"></a>iframe优缺点</h3><p>优点:</p>\n<ul>\n<li>解决加载缓慢的第三方内容</li>\n<li>iframe跨域通信(postMessage)</li>\n<li>iframe无刷新文件上传</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>阻塞主页面的onLoad事件</li>\n<li>不利于seo</li>\n<li>页面产生多,不利于管理</li>\n<li>增加服务器请求</li>\n<li>可能会导致资源无法共用<ul>\n<li>同源+缓存策略(未过期&#x2F;不需要重新请求)会从缓存中读取</li>\n<li>同源 + 缓存过期但有 ETag\t⚠️ 发送条件请求（可能返回 304）</li>\n<li>跨域 + 无 CORS 缓存策略\t✅ 重新请求</li>\n<li>请求头或方法不同\t✅ 重新请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"页面性能优化\"><a href=\"#页面性能优化\" class=\"headerlink\" title=\"页面性能优化\"></a>页面性能优化</h3><ul>\n<li>内容方面<ul>\n<li>减少http请求</li>\n<li>使用http2&#x2F;3</li>\n<li>减少dom元素数量</li>\n<li>请求缓存</li>\n<li>使用多域名负载网页内的多个文件,图片</li>\n<li>使用gzip压缩</li>\n</ul>\n</li>\n<li>css<ul>\n<li>css放到页面上端</li>\n<li>把js和css分离开</li>\n<li>精简js和css</li>\n<li>避免css表达式</li>\n</ul>\n</li>\n<li>js<ul>\n<li>tree shanking</li>\n<li>放到页面底部</li>\n<li>减少重复代码</li>\n</ul>\n</li>\n<li>图片<ul>\n<li>优化图片</li>\n<li>不缩放图片</li>\n<li>使用恰当的图片格式(webp更好)</li>\n<li>css雪碧图优化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"图片懒加载和预加载\"><a href=\"#图片懒加载和预加载\" class=\"headerlink\" title=\"图片懒加载和预加载\"></a>图片懒加载和预加载</h3><p>懒加载: 滚动到了图片的位置,才进行加载.</p>\n<p>减少不必要的访问数据库或延迟访问数据的次数,减少服务器端的压力</p>\n<p>预加载: 在还没到图片位置的时候,就开始加载图片</p>\n<p>在网页全部加载之前加载图片,那么当用户查看时,可以之间从缓存中渲染图片,减少等待时间</p>\n<p>当图片过大时,可能会导致页面白屏时间加长</p>\n<h3 id=\"a标签作用\"><a href=\"#a标签作用\" class=\"headerlink\" title=\"a标签作用\"></a>a标签作用</h3><ul>\n<li><p>外部页面连接</p>\n</li>\n<li><p>本地页面链接</p>\n<p>  href指向相对路径,就可以打开当前目录下对应的文件</p>\n</li>\n<li><p>锚点链接</p>\n</li>\n<li><p>其他</p>\n<ul>\n<li>打开email: <code>&lt;a href=&#39;mailto:邮件接收人&#39;&gt;&lt;/a&gt;</code></li>\n<li>短链,打开小程序,qq等</li>\n<li>打电话: <code>&lt;a href=&#39;tel: 180xxx&#39;&gt;&lt;/a&gt;</code></li>\n</ul>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"如何区分H5、HTML、XHTML\"><a href=\"#如何区分H5、HTML、XHTML\" class=\"headerlink\" title=\"如何区分H5、HTML、XHTML\"></a>如何区分H5、HTML、XHTML</h3><p>基本概念：</p>\n<ul>\n<li><p>H5：是html、xhtml和html dom的新标准，h5最先是由web’超文本应用技术工作组命名的一种超文本标记语言，随后与w3c的xhtml2.0结合，产生了现在的h5。可以理解为h5&#x3D;html+css3+HTML+JS+API</p>\n</li>\n<li><p>HTML：超文本标记语言，是一种基本的web网页设计语言</p>\n</li>\n<li><p>XHTML：可扩展的文本标记语言，是一种置标语言，表现方式和HTML类似，不过语法更加严格。本质上讲，XHTML是一个过度技术，结合了XML的强大功能及大多数HTML的简单特性</p>\n</li>\n</ul>\n<p>特性区别</p>\n<ul>\n<li><p>H5：</p>\n<ul>\n<li>用于绘画的canvas</li>\n<li>用于媒介的video和audio元素</li>\n<li>对本地离线储存有更好的支持</li>\n<li>新的特殊内容元素：article、aside、footer、header、hgroup、nav、section</li>\n<li>新的表单控件：calendar、date、time、email、url、search</li>\n<li>语义化标签，例如header、h1、footer等，有利于SEO</li>\n</ul>\n</li>\n<li><p>HTML</p>\n<ul>\n<li>标识文本，例如定义标题文本、段落文本、列表文本等</li>\n<li>建立超链接，便于页面链接的跳转</li>\n<li>创建列表，把信息有序地组织在一起以方便预览</li>\n<li>在网页中显示图像、声音、视频、动画等多媒体信息</li>\n<li>可以制作表格、表单</li>\n<li>无语义化标签</li>\n</ul>\n</li>\n<li><p>XHTML：</p>\n<ul>\n<li>要求正确嵌套</li>\n<li>所有元素必须关闭</li>\n<li>区分大小写</li>\n<li>属性要用双引号</li>\n<li>用id属性替代name</li>\n<li>特殊字符处理</li>\n<li>处理各大浏览器的兼容问题</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"W3C\"><a href=\"#W3C\" class=\"headerlink\" title=\"W3C\"></a>W3C</h3><ul>\n<li>W3C标准规范要求：书写标签必须闭合、标签小写、不乱嵌套，可以提高机器人对网页的搜索概率</li>\n<li>建议使用CSS和JS脚本，从而达到结构与行为、结构与表现的分离，提高页面渲染速度，可以更快显示页面内容</li>\n<li>不需要变动页面内容，可以提供打印版本而不需要复制内容，提高网站易用性。</li>\n<li>标签样式分离，合理语义化标签，使内容能被更多用户访问和更广泛的设备访问，使用更少的代码和组件，从而降低维护成本，且改版容易</li>\n</ul>\n<h3 id=\"HTML的DOCTYPE作用\"><a href=\"#HTML的DOCTYPE作用\" class=\"headerlink\" title=\"HTML的DOCTYPE作用\"></a>HTML的DOCTYPE作用</h3><ul>\n<li><p>定义</p>\n<p>  是Document Type的简写，不是HTML标签，也没有结束标签，只用于告诉浏览器当前HTML是用什么版本编写的，是一种标记语言的文档类型声明</p>\n<p>  必须在html第一行，在html标签前面，其会影响代码验证，并决定了浏览器应该如何显示用户的web文档</p>\n</li>\n<li><p>作用</p>\n<p>  用于声明文档类型，浏览器通过这个可以了解预期的文档类型，这样可以知道用哪一种规范（DTD）解析文档（html或xhtml）</p>\n</li>\n</ul>\n<h3 id=\"HTML的DOCTYPE的种类\"><a href=\"#HTML的DOCTYPE的种类\" class=\"headerlink\" title=\"HTML的DOCTYPE的种类\"></a>HTML的DOCTYPE的种类</h3><ul>\n<li><p>严格版本Strict、过渡版本Transitional和基于框架Frameset</p>\n</li>\n<li><p>严格版本&#x2F;标准模式：呈现遵循最新标准的网页</p>\n</li>\n<li><p>松散&#x2F;兼容&#x2F;包容模式：为传统浏览器设计的网页</p>\n</li>\n</ul>\n<h3 id=\"Quirks是什么，与标准模式区别\"><a href=\"#Quirks是什么，与标准模式区别\" class=\"headerlink\" title=\"Quirks是什么，与标准模式区别\"></a>Quirks是什么，与标准模式区别</h3><ul>\n<li><p>Quirks&#x2F;包容模式</p>\n<p>  IE6之前的页面不会写DTD，所以ie6假定了如果写了DTD，那么就意味着这个页面采用对css支持更好的布局，如果没有，就采用兼容之前的布局方式，这就是quirks模式</p>\n</li>\n<li><p>区别</p>\n<ul>\n<li><p>盒模型</p>\n<p>  标准模式：宽度&#x3D;width</p>\n<p>  quirks模式：宽度&#x3D;padding+width+border</p>\n</li>\n<li><p>设置百分比的高度：</p>\n<p>  标准模式：元素高度是由内容来决定的。如果父元素没有设置高度，那么子元素设置的高度百分比是无效的</p>\n</li>\n<li><p>设置行内元素高度</p>\n<p>  标准模式：行内元素高度设置是无效的</p>\n<p>  quirks模式：行内元素可以设置高度</p>\n</li>\n<li><p>设置水平居中</p>\n<p>  标准模式：margin&#x3D;auto是有效的</p>\n<p>  quirks模式：auto是无效的</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"h5新特性\"><a href=\"#h5新特性\" class=\"headerlink\" title=\"h5新特性\"></a>h5新特性</h3><ul>\n<li>离线缓存：关闭浏览器后再次打开时恢复数据，减少网络流量</li>\n<li>音视频、调用摄像头、手机相册、通讯录等</li>\n<li>地理定位</li>\n<li>canvas绘图</li>\n<li>拖拽、撤销历史、文本选择等</li>\n<li>开发和维护成本低于app，页面内存占用小，减少用户不必要支出</li>\n<li>css3支持字体嵌入、版面排版</li>\n<li>figure: 规定独立的流内容(图片,代码等),figure的内容应该与主内容相关,同时元素位置相对于主内容是独立的,如果被删除不会造成影响</li>\n</ul>\n<h3 id=\"元素alt和title\"><a href=\"#元素alt和title\" class=\"headerlink\" title=\"元素alt和title\"></a>元素alt和title</h3><ul>\n<li>相同处：都属于提示类文案</li>\n<li>不同<ul>\n<li>alt在图片中，加载失败时显示alt，而title是会出现一个小浮窗</li>\n<li>alt是img必要属性，只能用在img、area和input元素中，title不是img必要属性，任何元素都可以使用</li>\n<li>alt只能是元素属性，title可以作为属性，也可以作为标签&lt;title&gt;使用</li>\n<li>a标签嵌套img标签时，起作用的是img的title属性</li>\n<li>无障碍：alt可以触发阅读器，title不行</li>\n<li>SEO：alt可以作为图片的SEO优化，title对于元素的SEO优化较小</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"background-image和img设置图片有什么区别\"><a href=\"#background-image和img设置图片有什么区别\" class=\"headerlink\" title=\"background-image和img设置图片有什么区别\"></a>background-image和img设置图片有什么区别</h3><p>相同点：</p>\n<ul>\n<li>都可以显示图片</li>\n<li>可以设置图片大小</li>\n</ul>\n<p>不同点: </p>\n<ul>\n<li>background-image是css属性，img是html标签</li>\n<li>background-image设置宽高需要配合background-position、background-size等属性，img标签与width、height配合</li>\n<li>img可以设置alt属性，用于优化seo和图片加载失败的描述，background-image不行</li>\n<li>img可以使用srcset属性用于响应式图片（srcset&#x3D;”image-1x.jpg 1x, image-2x.jpg 2x” ）</li>\n<li>img是作为独立元素，影响文档流；background-image是作为背景图，不影响文档流</li>\n<li>加载时机:<ul>\n<li>img：html渲染到img标签时就会进行图片加载</li>\n<li>background-image：<ul>\n<li>内联（style&#x3D;”background-image:url(image.jpg)”: 和img标签类似，解析到则进行加载</li>\n<li>外部css：css文件下载并解析后执行</li>\n<li>当页面内容加载过多时，可能会降低background-image的加载优先级，因此会被认为是装饰性图片</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>懒加载<ul>\n<li>img：loading&#x3D;”lazy”，chrome76+，firefox75+</li>\n<li>background-image：只能通过js或css实现</li>\n</ul>\n</li>\n<li>大图时导致页面延迟渲染<ul>\n<li>img：<ul>\n<li>在解析html时，若未加上loading&#x3D;”lazy”，那么就会立马进行图片加载，这个时候会占用带宽，因此会导致关键资源加载延迟</li>\n<li>未设置宽高时，由于图片加载后，会导致其余元素位置变化，而触发回流</li>\n</ul>\n</li>\n<li>background-image：<ul>\n<li>对图片的加载是在css解析过程中进行的</li>\n<li>背景图的加载一般会触发重绘，通常不会导致回流（除非元素尺寸依赖于背景图</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>优缺点：</p>\n<ul>\n<li><p>img：</p>\n<ul>\n<li>优点：<ul>\n<li>语义化</li>\n<li>利于seo和无障碍优化</li>\n<li>响应式：loading&#x3D;”lazy”（有兼容性</li>\n<li>打印支持：在打印时显示图片</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>影响其他元素</li>\n<li>图片较大会影响页面渲染，图片过多会增加http请求</li>\n</ul>\n</li>\n<li>场景<ul>\n<li>内容性图片：如文章配图、产品展示图、用户头像等。</li>\n<li>需要 SEO 优化的图片：如商品图片、图表等。</li>\n<li>需要可访问性支持的图片：如信息图、图表等。</li>\n<li>需要打印的图片：如报告、文档中的插图。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>background-image：</p>\n<ul>\n<li>优点：<ul>\n<li>利用雪碧图可以减少http请求</li>\n<li>不占用文档流</li>\n<li>图片加载失败不会影响页面结构</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>不利于seo和无障碍</li>\n<li>默认不打印背景图片</li>\n<li>响应式：需要手动写</li>\n</ul>\n</li>\n<li>场景：<ul>\n<li>装饰性图片：如按钮图标、背景纹理、边框装饰等。</li>\n<li>CSS 雪碧图：合并多个小图标减少请求。</li>\n<li>全屏背景或遮罩：如页面背景图、模态框遮罩层。</li>\n<li>动态效果控制：通过 CSS 动画或过渡实现背景图变化。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"乱码原因\"><a href=\"#乱码原因\" class=\"headerlink\" title=\"乱码原因\"></a>乱码原因</h3><ul>\n<li>不同编码内容混杂：html乱码是由html编码问题造成的</li>\n<li>未设置html编码，设置meta头text&#x2F;html;charset&#x3D;utf-8</li>\n<li>编辑工具的编码问题，例如使用记事本直接写html可能会造成乱码</li>\n<li>浏览器不能自动检测网页编码，造成网页乱码</li>\n</ul>\n<h3 id=\"js放在html不同位置有什么区别\"><a href=\"#js放在html不同位置有什么区别\" class=\"headerlink\" title=\"js放在html不同位置有什么区别\"></a>js放在html不同位置有什么区别</h3><ul>\n<li>如果使用<code>window.</code>，将js放在里面，则在哪儿都一样，因为都是需要等body之后再加载</li>\n<li>如果不使用<code>window.</code>，放在head中，代码不会执行。因为html执行顺序不同，html从开始运行到进入index.js文件，其中被function包围起来的代码不会被运行，直接执行最后一句代码。如果html页面没有加载完，找不到元素会报错</li>\n</ul>\n<h3 id=\"什么是列表及列表分类\"><a href=\"#什么是列表及列表分类\" class=\"headerlink\" title=\"什么是列表及列表分类\"></a>什么是列表及列表分类</h3><p>列表定义：</p>\n<ul>\n<li>是一种信息资源的展示方式</li>\n<li>可以使得信息结构化和条理化，并以列表的样式显示出来，便于阅读者快速方便的获取信息</li>\n<li>ul、ol、dl不能嵌套其他标签，但是li可以</li>\n</ul>\n<p>列表分类</p>\n<ul>\n<li>ol：有序列表<ul>\n<li>有顺序，每个li独占一行</li>\n<li>一般用于排序类型的列表</li>\n<li>默认li标签前面有顺序标记</li>\n</ul>\n</li>\n<li>ul：无序列表<ul>\n<li>无顺序，每个li独占一行</li>\n<li>一般用于无序类型的列表，例如导航栏等</li>\n<li>默认li标签前面有·标记</li>\n</ul>\n</li>\n<li>dl：自定义列表<ul>\n<li>无顺序，dt、dd标签独占一行</li>\n<li>一般用于一个标题下有一个或多个列表项</li>\n<li>默认无标记</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"常见表单元素\"><a href=\"#常见表单元素\" class=\"headerlink\" title=\"常见表单元素\"></a>常见表单元素</h3><ul>\n<li><p>input</p>\n<p>  type类型包括：password、text、image、hidden、file</p>\n</li>\n<li><p>textarea</p>\n<p>  可设置行列数</p>\n</li>\n<li><p>button</p>\n</li>\n<li><p>select</p>\n<p>  option、label</p>\n</li>\n<li><p>radio</p>\n</li>\n<li><p>checkbox</p>\n</li>\n</ul>\n<h3 id=\"表单提交方式\"><a href=\"#表单提交方式\" class=\"headerlink\" title=\"表单提交方式\"></a>表单提交方式</h3><ul>\n<li><p>submit提交</p>\n<p>  在form表单加上action属性，且input加上type&#x3D;submit</p>\n</li>\n<li><p>axios提交</p>\n</li>\n</ul>\n<h3 id=\"为什么使用h5标签布局网页\"><a href=\"#为什么使用h5标签布局网页\" class=\"headerlink\" title=\"为什么使用h5标签布局网页\"></a>为什么使用h5标签布局网页</h3><p>对h5来说，网页结构与使用更加语义化，利于seo</p>\n<p>section和article标签相似，且和nav也类似</p>\n<p>nav：非常常见的标签，本身无任何语义，用作布局及样式话标签</p>\n<p>section：用作一段有专题性的内容，一般在这个标签里面会带有标题。典型场景包括文章章节、标签对话框的标签页或论文中有编号的部分</p>\n<p>article：特殊的section标签，代表一个独立完整的相关内容块</p>\n<h3 id=\"如何达到表单的初步验证\"><a href=\"#如何达到表单的初步验证\" class=\"headerlink\" title=\"如何达到表单的初步验证\"></a>如何达到表单的初步验证</h3><p>验证属性</p>\n<ul>\n<li><code>required</code>：必填<ul>\n<li><code>valueMissing</code>: 判断当前元素是否为空，配合<code>required</code>使用</li>\n</ul>\n</li>\n<li><code>pattern</code>：正则验证当前元素值是否匹配<ul>\n<li><code>patternMismatch</code>: 判断当前元素是否符合正则，配合<code>pattern</code>使用</li>\n</ul>\n</li>\n<li><code>max</code>和<code>min</code>：验证当前元素最大或最小值，一般用于染个&#x2F;number类型的元素<ul>\n<li>rangeUnderflow：判断当前元素值是否小于min属性值，配合min属性使用</li>\n</ul>\n</li>\n<li><code>minlength</code>和<code>maxlength</code>：验证内容最大长度和最小长度<ul>\n<li><code>tooLong</code>: 判断当前元素长度是否符合，配合<code>maxlength</code>使用</li>\n</ul>\n</li>\n<li><code>validity</code>：h5表单提供的一种有效状态，有效状态通过<code>validityState</code>获取，<code>validityState</code>通过<code>validity</code>获取</li>\n</ul>\n<p>验证状态</p>\n<ul>\n<li><code>typeMismatch</code>: 判断当前元素值的类型是否匹配，配合email&#x2F;number&#x2F;url使用</li>\n<li><code>stepMismatch</code>: 判断当前元素是否与step设置相同，配合step使用，并不与min、max属性值比较</li>\n<li><code>valid</code>: 判断当前元素是否正确，返回true标识验证成功</li>\n<li><code>customError</code>: 配合<code>setCustomValidity()</code>方法使用</li>\n<li>setCustomValidity(message)：设置自定义错误信息，一旦使用该方法修改默认错误提示后，即使输入正确也会有提示</li>\n</ul>\n<h3 id=\"iframe优缺点\"><a href=\"#iframe优缺点\" class=\"headerlink\" title=\"iframe优缺点\"></a>iframe优缺点</h3><p>优点:</p>\n<ul>\n<li>解决加载缓慢的第三方内容</li>\n<li>iframe跨域通信(postMessage)</li>\n<li>iframe无刷新文件上传</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>阻塞主页面的onLoad事件</li>\n<li>不利于seo</li>\n<li>页面产生多,不利于管理</li>\n<li>增加服务器请求</li>\n<li>可能会导致资源无法共用<ul>\n<li>同源+缓存策略(未过期&#x2F;不需要重新请求)会从缓存中读取</li>\n<li>同源 + 缓存过期但有 ETag\t⚠️ 发送条件请求（可能返回 304）</li>\n<li>跨域 + 无 CORS 缓存策略\t✅ 重新请求</li>\n<li>请求头或方法不同\t✅ 重新请求</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"页面性能优化\"><a href=\"#页面性能优化\" class=\"headerlink\" title=\"页面性能优化\"></a>页面性能优化</h3><ul>\n<li>内容方面<ul>\n<li>减少http请求</li>\n<li>使用http2&#x2F;3</li>\n<li>减少dom元素数量</li>\n<li>请求缓存</li>\n<li>使用多域名负载网页内的多个文件,图片</li>\n<li>使用gzip压缩</li>\n</ul>\n</li>\n<li>css<ul>\n<li>css放到页面上端</li>\n<li>把js和css分离开</li>\n<li>精简js和css</li>\n<li>避免css表达式</li>\n</ul>\n</li>\n<li>js<ul>\n<li>tree shanking</li>\n<li>放到页面底部</li>\n<li>减少重复代码</li>\n</ul>\n</li>\n<li>图片<ul>\n<li>优化图片</li>\n<li>不缩放图片</li>\n<li>使用恰当的图片格式(webp更好)</li>\n<li>css雪碧图优化</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"图片懒加载和预加载\"><a href=\"#图片懒加载和预加载\" class=\"headerlink\" title=\"图片懒加载和预加载\"></a>图片懒加载和预加载</h3><p>懒加载: 滚动到了图片的位置,才进行加载.</p>\n<p>减少不必要的访问数据库或延迟访问数据的次数,减少服务器端的压力</p>\n<p>预加载: 在还没到图片位置的时候,就开始加载图片</p>\n<p>在网页全部加载之前加载图片,那么当用户查看时,可以之间从缓存中渲染图片,减少等待时间</p>\n<p>当图片过大时,可能会导致页面白屏时间加长</p>\n<h3 id=\"a标签作用\"><a href=\"#a标签作用\" class=\"headerlink\" title=\"a标签作用\"></a>a标签作用</h3><ul>\n<li><p>外部页面连接</p>\n</li>\n<li><p>本地页面链接</p>\n<p>  href指向相对路径,就可以打开当前目录下对应的文件</p>\n</li>\n<li><p>锚点链接</p>\n</li>\n<li><p>其他</p>\n<ul>\n<li>打开email: <code>&lt;a href=&#39;mailto:邮件接收人&#39;&gt;&lt;/a&gt;</code></li>\n<li>短链,打开小程序,qq等</li>\n<li>打电话: <code>&lt;a href=&#39;tel: 180xxx&#39;&gt;&lt;/a&gt;</code></li>\n</ul>\n</li>\n</ul>\n"},{"title":"【Htpp】header","_content":"\n## 通用头部\n\n### cache-control\n\n控制缓存，可以接收多个参数，参数之间以“，”隔空。\n\n> 请求和响应共用\n\n- no-cache：表示强制使用最新的值而不使用缓存。请求头部包含no-cache，表示客户端不接收缓存过的响应，缓存服务器必须把客户端请求转发给源服务器；响应请求里面包含，那么缓存服务器不能对响应资源进行缓存。（协商缓存\n\n- no-store：不应该缓存当前内容，表示对应的报文中包含机密信息，不缓存\n\n- no-transform：缓存不能改变主体的媒体类型，能防止缓存服务器压缩图片资源等。\n\n- max-age：缓存有效期（以秒为单位）。请求包含时，如果缓存资源的缓存时间比指定时间数值更小时则接受缓存资源，当值为0时，缓存服务器会把请求转发给源服务器；当响应包含时，缓存服务器不再确认资源的有效期，而以max-age数值作为缓存保存时长。\n\n- s-maxage: 用于配置**代理服务器**的缓存，以秒为单位，优先级高于max-age，但只在代理服务器中生效，客户端依然使用max-age\n\n#### max-age=0和no-cache\n\n- `no-cache`：浏览器可以进行缓存，未定性缓存是否已经过期，禁用未经验证的缓存。但是在每次请求时，需要像服务端发送一个请求判断这次的资源是否过期。如果服务端返回304，说明资源还在有效期内，浏览器可以直接使用缓存资源；但是如果内容已经过期了，服务器会返回新的内容。比max-age=0更严格，确保每次都需要进行验证\n\n- `max-age=0`: 将缓存已经视为过期了，但允许客户端复用缓存（通过验证），需要像服务器发起请求，如果服务端返回304，那么客户端依旧使用缓存，如果是200，那么就视为需要重新获取新数据。\n\nCache-Control: no-cache, max-age=0是冗余写法，但是可以确保浏览器的兼容性\n\n|特性|max-age=0|no-cache|\n|-----|------|-----|\n|缓存是否保留|保留，但被视为过期|保留，但每次使用前需要验证|\n|验证条件|可能被其他条件覆盖|强制无条件|\n|优先级|较低|较高|\n|场景|希望缓存快速更新，但允许复用|强制要求数据一致性（如实时数据）|\n\n> 请求头部\n\n- min-fresh：要求缓存服务器指定时间内返回响应（以秒为单位）\n\n- only-if-cached：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回值，也就是说不会向源服务器转发请求。\n\n> 响应头部\n\n- [must-revalidate](https://blog.csdn.net/mK0vouYv4BwgX190fSd/article/details/89880083)：本地缓存过期前可以使用，否则必须进行有效性校验\n\n- public：响应可能会被任何对象缓存，没有限制\n\n- private： 响应只能被特定用户缓存，不能被其他用户使用\n\n- proxy-revalidate：仅适用于共享缓存，私有缓存时忽略\n\n### connection\n\n- close: 当一方的connection为close时，表示关闭此次连接\n\n- keep-live：持久化连接\n\n### date\n\n报文创建时间\n\n## 请求头部\n\n### accept\n\n可以设置多个值，每个值通过“，”进行分割\n\n常用值：text/html，application/xml；q=0.9等\n\n注：q=x，是给当前类型赋予权重，范围为0～1，可精确到小数点后3位。和MIME子类型通过“，”分割，默认权重值为1。服务器会优先返回权重较大的类型，如果权重相等，则按照从左至右的顺序处理。\n\n### accept-charset\n客户端可以处理的字符集类型，通常不需要额外设置此项，每种文件类型都有默认的值。和accept一样可以设置权重\n\n### accept-encoding\n客户端可以接收的编码方式，通常这个字段值会是某种压缩算法，比如gzip等。和accept一样可以设置权重\n\n### accept-language\n客户端可以解析的自然语言，可以一次性指定多个语言并设置权重。\n\n### authorization\n告知服务端认证信息。通常在收到401后，在请求头里面加入authorization：type credentials\n\n### host（必传）\n告知服务器请求资源所处的互联网主机名和端口号（不指定将使用默认端口号）。\n\n必传是因为服务器在接收到请求后将请求的主机号替换为ip地址，但是如果这个ip部署了多个域名，那么服务器无法转发到对应的请求\n\n### if-modified-since\n确认代理或者客户端本地资源的有效性。服务端在接受到这个值后，会与资源最近更新时间做对比，如果在字段指定的日期之后资源发生了变化，那么服务器会返回最新的资源，否则返回304\n\n### if-none-match\n用于判断本地缓存是否失效。存储的是上个响应头部的etag值。当指定的值与资源的etag值不一致时，服务器端才会处理请求\n\n## 响应头部\n\n### age\n\n告知客户端服务端在多久前创建了响应，若创建该响应的是缓存服务器，age指的是缓存后响应再次发起认证到认证完成的时间。代理创建响应必须加上age字段\n\n### etag\n\n服务端在每次更新资源后生成一个唯一对应的标识，生成算法由服务器自行决定\n\n分类：\n- 强etag：资源发生变化就会改变\n\n- 弱etag：资源发生了较大变化时才会改变。以W/来表示\n\n### location\n\n使用头部字段location可以引导请求发起方至某个与请求url位置不同的资源，一般会配合3xx进行使用\n\n### www-authenticate\n\n告知客户端当前服务器端可接收的认证方案，然后客户端可以在authentication字段中返回对应的值\n\n## 主体头部\n\n### allow\n\n通知客户端能够支持的http请求方法。当服务端接收到不支持http请求方法时，会响应状态信息405，同时把支持的方法写入allow字段\n\n### content-encoding\n\n告知客户端当前响应内容的编码方式\n\n### content-length\n\n表明主体部分的大小，单位为字节\n\n### content-type\n\n表明响应主体内容的MIME类型\n\n### last-modified\n\n资源最后的修改时间，配合缓存使用\n\n### expires\n\n失效日期\n","source":"_posts/HTTP/【Htpp】header.md","raw":"---\ntitle: 【Htpp】header\ncategories: http\ntag: http\n---\n\n## 通用头部\n\n### cache-control\n\n控制缓存，可以接收多个参数，参数之间以“，”隔空。\n\n> 请求和响应共用\n\n- no-cache：表示强制使用最新的值而不使用缓存。请求头部包含no-cache，表示客户端不接收缓存过的响应，缓存服务器必须把客户端请求转发给源服务器；响应请求里面包含，那么缓存服务器不能对响应资源进行缓存。（协商缓存\n\n- no-store：不应该缓存当前内容，表示对应的报文中包含机密信息，不缓存\n\n- no-transform：缓存不能改变主体的媒体类型，能防止缓存服务器压缩图片资源等。\n\n- max-age：缓存有效期（以秒为单位）。请求包含时，如果缓存资源的缓存时间比指定时间数值更小时则接受缓存资源，当值为0时，缓存服务器会把请求转发给源服务器；当响应包含时，缓存服务器不再确认资源的有效期，而以max-age数值作为缓存保存时长。\n\n- s-maxage: 用于配置**代理服务器**的缓存，以秒为单位，优先级高于max-age，但只在代理服务器中生效，客户端依然使用max-age\n\n#### max-age=0和no-cache\n\n- `no-cache`：浏览器可以进行缓存，未定性缓存是否已经过期，禁用未经验证的缓存。但是在每次请求时，需要像服务端发送一个请求判断这次的资源是否过期。如果服务端返回304，说明资源还在有效期内，浏览器可以直接使用缓存资源；但是如果内容已经过期了，服务器会返回新的内容。比max-age=0更严格，确保每次都需要进行验证\n\n- `max-age=0`: 将缓存已经视为过期了，但允许客户端复用缓存（通过验证），需要像服务器发起请求，如果服务端返回304，那么客户端依旧使用缓存，如果是200，那么就视为需要重新获取新数据。\n\nCache-Control: no-cache, max-age=0是冗余写法，但是可以确保浏览器的兼容性\n\n|特性|max-age=0|no-cache|\n|-----|------|-----|\n|缓存是否保留|保留，但被视为过期|保留，但每次使用前需要验证|\n|验证条件|可能被其他条件覆盖|强制无条件|\n|优先级|较低|较高|\n|场景|希望缓存快速更新，但允许复用|强制要求数据一致性（如实时数据）|\n\n> 请求头部\n\n- min-fresh：要求缓存服务器指定时间内返回响应（以秒为单位）\n\n- only-if-cached：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回值，也就是说不会向源服务器转发请求。\n\n> 响应头部\n\n- [must-revalidate](https://blog.csdn.net/mK0vouYv4BwgX190fSd/article/details/89880083)：本地缓存过期前可以使用，否则必须进行有效性校验\n\n- public：响应可能会被任何对象缓存，没有限制\n\n- private： 响应只能被特定用户缓存，不能被其他用户使用\n\n- proxy-revalidate：仅适用于共享缓存，私有缓存时忽略\n\n### connection\n\n- close: 当一方的connection为close时，表示关闭此次连接\n\n- keep-live：持久化连接\n\n### date\n\n报文创建时间\n\n## 请求头部\n\n### accept\n\n可以设置多个值，每个值通过“，”进行分割\n\n常用值：text/html，application/xml；q=0.9等\n\n注：q=x，是给当前类型赋予权重，范围为0～1，可精确到小数点后3位。和MIME子类型通过“，”分割，默认权重值为1。服务器会优先返回权重较大的类型，如果权重相等，则按照从左至右的顺序处理。\n\n### accept-charset\n客户端可以处理的字符集类型，通常不需要额外设置此项，每种文件类型都有默认的值。和accept一样可以设置权重\n\n### accept-encoding\n客户端可以接收的编码方式，通常这个字段值会是某种压缩算法，比如gzip等。和accept一样可以设置权重\n\n### accept-language\n客户端可以解析的自然语言，可以一次性指定多个语言并设置权重。\n\n### authorization\n告知服务端认证信息。通常在收到401后，在请求头里面加入authorization：type credentials\n\n### host（必传）\n告知服务器请求资源所处的互联网主机名和端口号（不指定将使用默认端口号）。\n\n必传是因为服务器在接收到请求后将请求的主机号替换为ip地址，但是如果这个ip部署了多个域名，那么服务器无法转发到对应的请求\n\n### if-modified-since\n确认代理或者客户端本地资源的有效性。服务端在接受到这个值后，会与资源最近更新时间做对比，如果在字段指定的日期之后资源发生了变化，那么服务器会返回最新的资源，否则返回304\n\n### if-none-match\n用于判断本地缓存是否失效。存储的是上个响应头部的etag值。当指定的值与资源的etag值不一致时，服务器端才会处理请求\n\n## 响应头部\n\n### age\n\n告知客户端服务端在多久前创建了响应，若创建该响应的是缓存服务器，age指的是缓存后响应再次发起认证到认证完成的时间。代理创建响应必须加上age字段\n\n### etag\n\n服务端在每次更新资源后生成一个唯一对应的标识，生成算法由服务器自行决定\n\n分类：\n- 强etag：资源发生变化就会改变\n\n- 弱etag：资源发生了较大变化时才会改变。以W/来表示\n\n### location\n\n使用头部字段location可以引导请求发起方至某个与请求url位置不同的资源，一般会配合3xx进行使用\n\n### www-authenticate\n\n告知客户端当前服务器端可接收的认证方案，然后客户端可以在authentication字段中返回对应的值\n\n## 主体头部\n\n### allow\n\n通知客户端能够支持的http请求方法。当服务端接收到不支持http请求方法时，会响应状态信息405，同时把支持的方法写入allow字段\n\n### content-encoding\n\n告知客户端当前响应内容的编码方式\n\n### content-length\n\n表明主体部分的大小，单位为字节\n\n### content-type\n\n表明响应主体内容的MIME类型\n\n### last-modified\n\n资源最后的修改时间，配合缓存使用\n\n### expires\n\n失效日期\n","slug":"HTTP/【Htpp】header","published":1,"date":"2025-08-13T07:29:09.442Z","updated":"2025-04-09T10:03:32.270Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x7000ebofm0gdu6lha","content":"<h2 id=\"通用头部\"><a href=\"#通用头部\" class=\"headerlink\" title=\"通用头部\"></a>通用头部</h2><h3 id=\"cache-control\"><a href=\"#cache-control\" class=\"headerlink\" title=\"cache-control\"></a>cache-control</h3><p>控制缓存，可以接收多个参数，参数之间以“，”隔空。</p>\n<blockquote>\n<p>请求和响应共用</p>\n</blockquote>\n<ul>\n<li><p>no-cache：表示强制使用最新的值而不使用缓存。请求头部包含no-cache，表示客户端不接收缓存过的响应，缓存服务器必须把客户端请求转发给源服务器；响应请求里面包含，那么缓存服务器不能对响应资源进行缓存。（协商缓存</p>\n</li>\n<li><p>no-store：不应该缓存当前内容，表示对应的报文中包含机密信息，不缓存</p>\n</li>\n<li><p>no-transform：缓存不能改变主体的媒体类型，能防止缓存服务器压缩图片资源等。</p>\n</li>\n<li><p>max-age：缓存有效期（以秒为单位）。请求包含时，如果缓存资源的缓存时间比指定时间数值更小时则接受缓存资源，当值为0时，缓存服务器会把请求转发给源服务器；当响应包含时，缓存服务器不再确认资源的有效期，而以max-age数值作为缓存保存时长。</p>\n</li>\n<li><p>s-maxage: 用于配置<strong>代理服务器</strong>的缓存，以秒为单位，优先级高于max-age，但只在代理服务器中生效，客户端依然使用max-age</p>\n</li>\n</ul>\n<h4 id=\"max-age-0和no-cache\"><a href=\"#max-age-0和no-cache\" class=\"headerlink\" title=\"max-age&#x3D;0和no-cache\"></a>max-age&#x3D;0和no-cache</h4><ul>\n<li><p><code>no-cache</code>：浏览器可以进行缓存，未定性缓存是否已经过期，禁用未经验证的缓存。但是在每次请求时，需要像服务端发送一个请求判断这次的资源是否过期。如果服务端返回304，说明资源还在有效期内，浏览器可以直接使用缓存资源；但是如果内容已经过期了，服务器会返回新的内容。比max-age&#x3D;0更严格，确保每次都需要进行验证</p>\n</li>\n<li><p><code>max-age=0</code>: 将缓存已经视为过期了，但允许客户端复用缓存（通过验证），需要像服务器发起请求，如果服务端返回304，那么客户端依旧使用缓存，如果是200，那么就视为需要重新获取新数据。</p>\n</li>\n</ul>\n<p>Cache-Control: no-cache, max-age&#x3D;0是冗余写法，但是可以确保浏览器的兼容性</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>max-age&#x3D;0</th>\n<th>no-cache</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>缓存是否保留</td>\n<td>保留，但被视为过期</td>\n<td>保留，但每次使用前需要验证</td>\n</tr>\n<tr>\n<td>验证条件</td>\n<td>可能被其他条件覆盖</td>\n<td>强制无条件</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>较低</td>\n<td>较高</td>\n</tr>\n<tr>\n<td>场景</td>\n<td>希望缓存快速更新，但允许复用</td>\n<td>强制要求数据一致性（如实时数据）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>请求头部</p>\n</blockquote>\n<ul>\n<li><p>min-fresh：要求缓存服务器指定时间内返回响应（以秒为单位）</p>\n</li>\n<li><p>only-if-cached：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回值，也就是说不会向源服务器转发请求。</p>\n</li>\n</ul>\n<blockquote>\n<p>响应头部</p>\n</blockquote>\n<ul>\n<li><p><a href=\"https://blog.csdn.net/mK0vouYv4BwgX190fSd/article/details/89880083\">must-revalidate</a>：本地缓存过期前可以使用，否则必须进行有效性校验</p>\n</li>\n<li><p>public：响应可能会被任何对象缓存，没有限制</p>\n</li>\n<li><p>private： 响应只能被特定用户缓存，不能被其他用户使用</p>\n</li>\n<li><p>proxy-revalidate：仅适用于共享缓存，私有缓存时忽略</p>\n</li>\n</ul>\n<h3 id=\"connection\"><a href=\"#connection\" class=\"headerlink\" title=\"connection\"></a>connection</h3><ul>\n<li><p>close: 当一方的connection为close时，表示关闭此次连接</p>\n</li>\n<li><p>keep-live：持久化连接</p>\n</li>\n</ul>\n<h3 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h3><p>报文创建时间</p>\n<h2 id=\"请求头部\"><a href=\"#请求头部\" class=\"headerlink\" title=\"请求头部\"></a>请求头部</h2><h3 id=\"accept\"><a href=\"#accept\" class=\"headerlink\" title=\"accept\"></a>accept</h3><p>可以设置多个值，每个值通过“，”进行分割</p>\n<p>常用值：text&#x2F;html，application&#x2F;xml；q&#x3D;0.9等</p>\n<p>注：q&#x3D;x，是给当前类型赋予权重，范围为0～1，可精确到小数点后3位。和MIME子类型通过“，”分割，默认权重值为1。服务器会优先返回权重较大的类型，如果权重相等，则按照从左至右的顺序处理。</p>\n<h3 id=\"accept-charset\"><a href=\"#accept-charset\" class=\"headerlink\" title=\"accept-charset\"></a>accept-charset</h3><p>客户端可以处理的字符集类型，通常不需要额外设置此项，每种文件类型都有默认的值。和accept一样可以设置权重</p>\n<h3 id=\"accept-encoding\"><a href=\"#accept-encoding\" class=\"headerlink\" title=\"accept-encoding\"></a>accept-encoding</h3><p>客户端可以接收的编码方式，通常这个字段值会是某种压缩算法，比如gzip等。和accept一样可以设置权重</p>\n<h3 id=\"accept-language\"><a href=\"#accept-language\" class=\"headerlink\" title=\"accept-language\"></a>accept-language</h3><p>客户端可以解析的自然语言，可以一次性指定多个语言并设置权重。</p>\n<h3 id=\"authorization\"><a href=\"#authorization\" class=\"headerlink\" title=\"authorization\"></a>authorization</h3><p>告知服务端认证信息。通常在收到401后，在请求头里面加入authorization：type credentials</p>\n<h3 id=\"host（必传）\"><a href=\"#host（必传）\" class=\"headerlink\" title=\"host（必传）\"></a>host（必传）</h3><p>告知服务器请求资源所处的互联网主机名和端口号（不指定将使用默认端口号）。</p>\n<p>必传是因为服务器在接收到请求后将请求的主机号替换为ip地址，但是如果这个ip部署了多个域名，那么服务器无法转发到对应的请求</p>\n<h3 id=\"if-modified-since\"><a href=\"#if-modified-since\" class=\"headerlink\" title=\"if-modified-since\"></a>if-modified-since</h3><p>确认代理或者客户端本地资源的有效性。服务端在接受到这个值后，会与资源最近更新时间做对比，如果在字段指定的日期之后资源发生了变化，那么服务器会返回最新的资源，否则返回304</p>\n<h3 id=\"if-none-match\"><a href=\"#if-none-match\" class=\"headerlink\" title=\"if-none-match\"></a>if-none-match</h3><p>用于判断本地缓存是否失效。存储的是上个响应头部的etag值。当指定的值与资源的etag值不一致时，服务器端才会处理请求</p>\n<h2 id=\"响应头部\"><a href=\"#响应头部\" class=\"headerlink\" title=\"响应头部\"></a>响应头部</h2><h3 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a>age</h3><p>告知客户端服务端在多久前创建了响应，若创建该响应的是缓存服务器，age指的是缓存后响应再次发起认证到认证完成的时间。代理创建响应必须加上age字段</p>\n<h3 id=\"etag\"><a href=\"#etag\" class=\"headerlink\" title=\"etag\"></a>etag</h3><p>服务端在每次更新资源后生成一个唯一对应的标识，生成算法由服务器自行决定</p>\n<p>分类：</p>\n<ul>\n<li><p>强etag：资源发生变化就会改变</p>\n</li>\n<li><p>弱etag：资源发生了较大变化时才会改变。以W&#x2F;来表示</p>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>使用头部字段location可以引导请求发起方至某个与请求url位置不同的资源，一般会配合3xx进行使用</p>\n<h3 id=\"www-authenticate\"><a href=\"#www-authenticate\" class=\"headerlink\" title=\"www-authenticate\"></a>www-authenticate</h3><p>告知客户端当前服务器端可接收的认证方案，然后客户端可以在authentication字段中返回对应的值</p>\n<h2 id=\"主体头部\"><a href=\"#主体头部\" class=\"headerlink\" title=\"主体头部\"></a>主体头部</h2><h3 id=\"allow\"><a href=\"#allow\" class=\"headerlink\" title=\"allow\"></a>allow</h3><p>通知客户端能够支持的http请求方法。当服务端接收到不支持http请求方法时，会响应状态信息405，同时把支持的方法写入allow字段</p>\n<h3 id=\"content-encoding\"><a href=\"#content-encoding\" class=\"headerlink\" title=\"content-encoding\"></a>content-encoding</h3><p>告知客户端当前响应内容的编码方式</p>\n<h3 id=\"content-length\"><a href=\"#content-length\" class=\"headerlink\" title=\"content-length\"></a>content-length</h3><p>表明主体部分的大小，单位为字节</p>\n<h3 id=\"content-type\"><a href=\"#content-type\" class=\"headerlink\" title=\"content-type\"></a>content-type</h3><p>表明响应主体内容的MIME类型</p>\n<h3 id=\"last-modified\"><a href=\"#last-modified\" class=\"headerlink\" title=\"last-modified\"></a>last-modified</h3><p>资源最后的修改时间，配合缓存使用</p>\n<h3 id=\"expires\"><a href=\"#expires\" class=\"headerlink\" title=\"expires\"></a>expires</h3><p>失效日期</p>\n","excerpt":"","more":"<h2 id=\"通用头部\"><a href=\"#通用头部\" class=\"headerlink\" title=\"通用头部\"></a>通用头部</h2><h3 id=\"cache-control\"><a href=\"#cache-control\" class=\"headerlink\" title=\"cache-control\"></a>cache-control</h3><p>控制缓存，可以接收多个参数，参数之间以“，”隔空。</p>\n<blockquote>\n<p>请求和响应共用</p>\n</blockquote>\n<ul>\n<li><p>no-cache：表示强制使用最新的值而不使用缓存。请求头部包含no-cache，表示客户端不接收缓存过的响应，缓存服务器必须把客户端请求转发给源服务器；响应请求里面包含，那么缓存服务器不能对响应资源进行缓存。（协商缓存</p>\n</li>\n<li><p>no-store：不应该缓存当前内容，表示对应的报文中包含机密信息，不缓存</p>\n</li>\n<li><p>no-transform：缓存不能改变主体的媒体类型，能防止缓存服务器压缩图片资源等。</p>\n</li>\n<li><p>max-age：缓存有效期（以秒为单位）。请求包含时，如果缓存资源的缓存时间比指定时间数值更小时则接受缓存资源，当值为0时，缓存服务器会把请求转发给源服务器；当响应包含时，缓存服务器不再确认资源的有效期，而以max-age数值作为缓存保存时长。</p>\n</li>\n<li><p>s-maxage: 用于配置<strong>代理服务器</strong>的缓存，以秒为单位，优先级高于max-age，但只在代理服务器中生效，客户端依然使用max-age</p>\n</li>\n</ul>\n<h4 id=\"max-age-0和no-cache\"><a href=\"#max-age-0和no-cache\" class=\"headerlink\" title=\"max-age&#x3D;0和no-cache\"></a>max-age&#x3D;0和no-cache</h4><ul>\n<li><p><code>no-cache</code>：浏览器可以进行缓存，未定性缓存是否已经过期，禁用未经验证的缓存。但是在每次请求时，需要像服务端发送一个请求判断这次的资源是否过期。如果服务端返回304，说明资源还在有效期内，浏览器可以直接使用缓存资源；但是如果内容已经过期了，服务器会返回新的内容。比max-age&#x3D;0更严格，确保每次都需要进行验证</p>\n</li>\n<li><p><code>max-age=0</code>: 将缓存已经视为过期了，但允许客户端复用缓存（通过验证），需要像服务器发起请求，如果服务端返回304，那么客户端依旧使用缓存，如果是200，那么就视为需要重新获取新数据。</p>\n</li>\n</ul>\n<p>Cache-Control: no-cache, max-age&#x3D;0是冗余写法，但是可以确保浏览器的兼容性</p>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>max-age&#x3D;0</th>\n<th>no-cache</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>缓存是否保留</td>\n<td>保留，但被视为过期</td>\n<td>保留，但每次使用前需要验证</td>\n</tr>\n<tr>\n<td>验证条件</td>\n<td>可能被其他条件覆盖</td>\n<td>强制无条件</td>\n</tr>\n<tr>\n<td>优先级</td>\n<td>较低</td>\n<td>较高</td>\n</tr>\n<tr>\n<td>场景</td>\n<td>希望缓存快速更新，但允许复用</td>\n<td>强制要求数据一致性（如实时数据）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>请求头部</p>\n</blockquote>\n<ul>\n<li><p>min-fresh：要求缓存服务器指定时间内返回响应（以秒为单位）</p>\n</li>\n<li><p>only-if-cached：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回值，也就是说不会向源服务器转发请求。</p>\n</li>\n</ul>\n<blockquote>\n<p>响应头部</p>\n</blockquote>\n<ul>\n<li><p><a href=\"https://blog.csdn.net/mK0vouYv4BwgX190fSd/article/details/89880083\">must-revalidate</a>：本地缓存过期前可以使用，否则必须进行有效性校验</p>\n</li>\n<li><p>public：响应可能会被任何对象缓存，没有限制</p>\n</li>\n<li><p>private： 响应只能被特定用户缓存，不能被其他用户使用</p>\n</li>\n<li><p>proxy-revalidate：仅适用于共享缓存，私有缓存时忽略</p>\n</li>\n</ul>\n<h3 id=\"connection\"><a href=\"#connection\" class=\"headerlink\" title=\"connection\"></a>connection</h3><ul>\n<li><p>close: 当一方的connection为close时，表示关闭此次连接</p>\n</li>\n<li><p>keep-live：持久化连接</p>\n</li>\n</ul>\n<h3 id=\"date\"><a href=\"#date\" class=\"headerlink\" title=\"date\"></a>date</h3><p>报文创建时间</p>\n<h2 id=\"请求头部\"><a href=\"#请求头部\" class=\"headerlink\" title=\"请求头部\"></a>请求头部</h2><h3 id=\"accept\"><a href=\"#accept\" class=\"headerlink\" title=\"accept\"></a>accept</h3><p>可以设置多个值，每个值通过“，”进行分割</p>\n<p>常用值：text&#x2F;html，application&#x2F;xml；q&#x3D;0.9等</p>\n<p>注：q&#x3D;x，是给当前类型赋予权重，范围为0～1，可精确到小数点后3位。和MIME子类型通过“，”分割，默认权重值为1。服务器会优先返回权重较大的类型，如果权重相等，则按照从左至右的顺序处理。</p>\n<h3 id=\"accept-charset\"><a href=\"#accept-charset\" class=\"headerlink\" title=\"accept-charset\"></a>accept-charset</h3><p>客户端可以处理的字符集类型，通常不需要额外设置此项，每种文件类型都有默认的值。和accept一样可以设置权重</p>\n<h3 id=\"accept-encoding\"><a href=\"#accept-encoding\" class=\"headerlink\" title=\"accept-encoding\"></a>accept-encoding</h3><p>客户端可以接收的编码方式，通常这个字段值会是某种压缩算法，比如gzip等。和accept一样可以设置权重</p>\n<h3 id=\"accept-language\"><a href=\"#accept-language\" class=\"headerlink\" title=\"accept-language\"></a>accept-language</h3><p>客户端可以解析的自然语言，可以一次性指定多个语言并设置权重。</p>\n<h3 id=\"authorization\"><a href=\"#authorization\" class=\"headerlink\" title=\"authorization\"></a>authorization</h3><p>告知服务端认证信息。通常在收到401后，在请求头里面加入authorization：type credentials</p>\n<h3 id=\"host（必传）\"><a href=\"#host（必传）\" class=\"headerlink\" title=\"host（必传）\"></a>host（必传）</h3><p>告知服务器请求资源所处的互联网主机名和端口号（不指定将使用默认端口号）。</p>\n<p>必传是因为服务器在接收到请求后将请求的主机号替换为ip地址，但是如果这个ip部署了多个域名，那么服务器无法转发到对应的请求</p>\n<h3 id=\"if-modified-since\"><a href=\"#if-modified-since\" class=\"headerlink\" title=\"if-modified-since\"></a>if-modified-since</h3><p>确认代理或者客户端本地资源的有效性。服务端在接受到这个值后，会与资源最近更新时间做对比，如果在字段指定的日期之后资源发生了变化，那么服务器会返回最新的资源，否则返回304</p>\n<h3 id=\"if-none-match\"><a href=\"#if-none-match\" class=\"headerlink\" title=\"if-none-match\"></a>if-none-match</h3><p>用于判断本地缓存是否失效。存储的是上个响应头部的etag值。当指定的值与资源的etag值不一致时，服务器端才会处理请求</p>\n<h2 id=\"响应头部\"><a href=\"#响应头部\" class=\"headerlink\" title=\"响应头部\"></a>响应头部</h2><h3 id=\"age\"><a href=\"#age\" class=\"headerlink\" title=\"age\"></a>age</h3><p>告知客户端服务端在多久前创建了响应，若创建该响应的是缓存服务器，age指的是缓存后响应再次发起认证到认证完成的时间。代理创建响应必须加上age字段</p>\n<h3 id=\"etag\"><a href=\"#etag\" class=\"headerlink\" title=\"etag\"></a>etag</h3><p>服务端在每次更新资源后生成一个唯一对应的标识，生成算法由服务器自行决定</p>\n<p>分类：</p>\n<ul>\n<li><p>强etag：资源发生变化就会改变</p>\n</li>\n<li><p>弱etag：资源发生了较大变化时才会改变。以W&#x2F;来表示</p>\n</li>\n</ul>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>使用头部字段location可以引导请求发起方至某个与请求url位置不同的资源，一般会配合3xx进行使用</p>\n<h3 id=\"www-authenticate\"><a href=\"#www-authenticate\" class=\"headerlink\" title=\"www-authenticate\"></a>www-authenticate</h3><p>告知客户端当前服务器端可接收的认证方案，然后客户端可以在authentication字段中返回对应的值</p>\n<h2 id=\"主体头部\"><a href=\"#主体头部\" class=\"headerlink\" title=\"主体头部\"></a>主体头部</h2><h3 id=\"allow\"><a href=\"#allow\" class=\"headerlink\" title=\"allow\"></a>allow</h3><p>通知客户端能够支持的http请求方法。当服务端接收到不支持http请求方法时，会响应状态信息405，同时把支持的方法写入allow字段</p>\n<h3 id=\"content-encoding\"><a href=\"#content-encoding\" class=\"headerlink\" title=\"content-encoding\"></a>content-encoding</h3><p>告知客户端当前响应内容的编码方式</p>\n<h3 id=\"content-length\"><a href=\"#content-length\" class=\"headerlink\" title=\"content-length\"></a>content-length</h3><p>表明主体部分的大小，单位为字节</p>\n<h3 id=\"content-type\"><a href=\"#content-type\" class=\"headerlink\" title=\"content-type\"></a>content-type</h3><p>表明响应主体内容的MIME类型</p>\n<h3 id=\"last-modified\"><a href=\"#last-modified\" class=\"headerlink\" title=\"last-modified\"></a>last-modified</h3><p>资源最后的修改时间，配合缓存使用</p>\n<h3 id=\"expires\"><a href=\"#expires\" class=\"headerlink\" title=\"expires\"></a>expires</h3><p>失效日期</p>\n"},{"title":"小点","_content":"\n### 状态码\n- 1xx：信息\n    - 100: 继续请求，初始请求已经接收，客户端继续发送剩余部分\n    - 101：切换协议，要求服务器切换协议，服务端已确认切换\n- 2xx：成功\n    - 201：服务器创建了新的资源\n    - 202：服务器已接受请求，但未完成处理\n    - 203：服务器成功处理，但返回的信息可能来自另一个来源\n    - 204：服务器成功处理，但无返回内容\n    - 205： 用户终端应该重置文档\n    - 206：处理了部分get请求\n- 3xx：重定向\n    - 301： 请求页面**永久**跳转到新的url\n    - 302：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即**临时**移动。请求方法可能会改变，比如post改为get\n    - 304：自从上次请求后，请求网页未修改过\n    - 305：请求者只能使用代理访问\n    - 307：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即**临时**移动。请求方法不需要改变\n- 4xx：客户端错误\n    - 400：请求错误，服务端不理解请求语法\n    - 401：未授权\n    - 403：服务器拒绝请求\n    - 404：未找到\n    - 405：禁用请求的方法\n    - 406：无法使用请求的内容特性响应请求的页面\n    - 407：请求需要代理的身份验证\n    - 408：请求超时\n    - 409：请求的网页冲突，服务器无法完成请求\n    - 410：已删除\n    - 411：服务器无法处理请求，因为请求缺少一个或多个必要请求头字段\n    - 412：服务器未满足请求者的前提条件\n    - 413：请求实体过大\n    - 414：请求的URI过长\n    - 415：服务器不支持请求的格式\n    - 416：请求范围不符合要求\n    - 417：服务器无法满足表头字段要求\n- 5xx：服务端错误\n    - 500：服务器内部错误\n    - 501：服务器不具备完全请求的功能\n    - 502：网关错误，服务器作为网关或代理出现错误\n    - 503：服务器当前无法使用\n    - 504：网关超时，服务器作为网关或代理出现超时\n    - 505：服务器不支持请求的http版本\n\n### http请求方式\n- ajax,axios\n- EventSource: SSE技术(服务端推送)\n- WebSocket\n- navigator.sendBeacon: 异步数据上报api,用于做数据采集,浏览器会在何时的时间进行数据上报.\n\n    - navigator.sendBeacon只能进行发送，无法接收到服务端返回的数据\n    - 在页面卸载时也不会中断此次请求\n    - [[译] 用 sendBeacon 发送分析信息的优点](https://cloud.tencent.com/developer/article/1956250)\n    - [Navigator.sendBeacon：前端数据发送的得力助手](https://juejin.cn/post/7449402571187683343)\n- SSE(服务器向浏览器发送数据)\n\n    浏览器通过`EventSource`的api去监听服务器是否有推送消息给客户端\n    ","source":"_posts/HTTP/小点.md","raw":"---\ntitle: 小点\ncategories: HTTP\n---\n\n### 状态码\n- 1xx：信息\n    - 100: 继续请求，初始请求已经接收，客户端继续发送剩余部分\n    - 101：切换协议，要求服务器切换协议，服务端已确认切换\n- 2xx：成功\n    - 201：服务器创建了新的资源\n    - 202：服务器已接受请求，但未完成处理\n    - 203：服务器成功处理，但返回的信息可能来自另一个来源\n    - 204：服务器成功处理，但无返回内容\n    - 205： 用户终端应该重置文档\n    - 206：处理了部分get请求\n- 3xx：重定向\n    - 301： 请求页面**永久**跳转到新的url\n    - 302：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即**临时**移动。请求方法可能会改变，比如post改为get\n    - 304：自从上次请求后，请求网页未修改过\n    - 305：请求者只能使用代理访问\n    - 307：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即**临时**移动。请求方法不需要改变\n- 4xx：客户端错误\n    - 400：请求错误，服务端不理解请求语法\n    - 401：未授权\n    - 403：服务器拒绝请求\n    - 404：未找到\n    - 405：禁用请求的方法\n    - 406：无法使用请求的内容特性响应请求的页面\n    - 407：请求需要代理的身份验证\n    - 408：请求超时\n    - 409：请求的网页冲突，服务器无法完成请求\n    - 410：已删除\n    - 411：服务器无法处理请求，因为请求缺少一个或多个必要请求头字段\n    - 412：服务器未满足请求者的前提条件\n    - 413：请求实体过大\n    - 414：请求的URI过长\n    - 415：服务器不支持请求的格式\n    - 416：请求范围不符合要求\n    - 417：服务器无法满足表头字段要求\n- 5xx：服务端错误\n    - 500：服务器内部错误\n    - 501：服务器不具备完全请求的功能\n    - 502：网关错误，服务器作为网关或代理出现错误\n    - 503：服务器当前无法使用\n    - 504：网关超时，服务器作为网关或代理出现超时\n    - 505：服务器不支持请求的http版本\n\n### http请求方式\n- ajax,axios\n- EventSource: SSE技术(服务端推送)\n- WebSocket\n- navigator.sendBeacon: 异步数据上报api,用于做数据采集,浏览器会在何时的时间进行数据上报.\n\n    - navigator.sendBeacon只能进行发送，无法接收到服务端返回的数据\n    - 在页面卸载时也不会中断此次请求\n    - [[译] 用 sendBeacon 发送分析信息的优点](https://cloud.tencent.com/developer/article/1956250)\n    - [Navigator.sendBeacon：前端数据发送的得力助手](https://juejin.cn/post/7449402571187683343)\n- SSE(服务器向浏览器发送数据)\n\n    浏览器通过`EventSource`的api去监听服务器是否有推送消息给客户端\n    ","slug":"HTTP/小点","published":1,"date":"2025-08-13T07:29:09.449Z","updated":"2025-05-20T09:17:50.154Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6x9000hbofmfbeld6h9","content":"<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><ul>\n<li>1xx：信息<ul>\n<li>100: 继续请求，初始请求已经接收，客户端继续发送剩余部分</li>\n<li>101：切换协议，要求服务器切换协议，服务端已确认切换</li>\n</ul>\n</li>\n<li>2xx：成功<ul>\n<li>201：服务器创建了新的资源</li>\n<li>202：服务器已接受请求，但未完成处理</li>\n<li>203：服务器成功处理，但返回的信息可能来自另一个来源</li>\n<li>204：服务器成功处理，但无返回内容</li>\n<li>205： 用户终端应该重置文档</li>\n<li>206：处理了部分get请求</li>\n</ul>\n</li>\n<li>3xx：重定向<ul>\n<li>301： 请求页面<strong>永久</strong>跳转到新的url</li>\n<li>302：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即<strong>临时</strong>移动。请求方法可能会改变，比如post改为get</li>\n<li>304：自从上次请求后，请求网页未修改过</li>\n<li>305：请求者只能使用代理访问</li>\n<li>307：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即<strong>临时</strong>移动。请求方法不需要改变</li>\n</ul>\n</li>\n<li>4xx：客户端错误<ul>\n<li>400：请求错误，服务端不理解请求语法</li>\n<li>401：未授权</li>\n<li>403：服务器拒绝请求</li>\n<li>404：未找到</li>\n<li>405：禁用请求的方法</li>\n<li>406：无法使用请求的内容特性响应请求的页面</li>\n<li>407：请求需要代理的身份验证</li>\n<li>408：请求超时</li>\n<li>409：请求的网页冲突，服务器无法完成请求</li>\n<li>410：已删除</li>\n<li>411：服务器无法处理请求，因为请求缺少一个或多个必要请求头字段</li>\n<li>412：服务器未满足请求者的前提条件</li>\n<li>413：请求实体过大</li>\n<li>414：请求的URI过长</li>\n<li>415：服务器不支持请求的格式</li>\n<li>416：请求范围不符合要求</li>\n<li>417：服务器无法满足表头字段要求</li>\n</ul>\n</li>\n<li>5xx：服务端错误<ul>\n<li>500：服务器内部错误</li>\n<li>501：服务器不具备完全请求的功能</li>\n<li>502：网关错误，服务器作为网关或代理出现错误</li>\n<li>503：服务器当前无法使用</li>\n<li>504：网关超时，服务器作为网关或代理出现超时</li>\n<li>505：服务器不支持请求的http版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"http请求方式\"><a href=\"#http请求方式\" class=\"headerlink\" title=\"http请求方式\"></a>http请求方式</h3><ul>\n<li><p>ajax,axios</p>\n</li>\n<li><p>EventSource: SSE技术(服务端推送)</p>\n</li>\n<li><p>WebSocket</p>\n</li>\n<li><p>navigator.sendBeacon: 异步数据上报api,用于做数据采集,浏览器会在何时的时间进行数据上报.</p>\n<ul>\n<li>navigator.sendBeacon只能进行发送，无法接收到服务端返回的数据</li>\n<li>在页面卸载时也不会中断此次请求</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1956250\">[译] 用 sendBeacon 发送分析信息的优点</a></li>\n<li><a href=\"https://juejin.cn/post/7449402571187683343\">Navigator.sendBeacon：前端数据发送的得力助手</a></li>\n</ul>\n</li>\n<li><p>SSE(服务器向浏览器发送数据)</p>\n<p>  浏览器通过<code>EventSource</code>的api去监听服务器是否有推送消息给客户端</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"状态码\"><a href=\"#状态码\" class=\"headerlink\" title=\"状态码\"></a>状态码</h3><ul>\n<li>1xx：信息<ul>\n<li>100: 继续请求，初始请求已经接收，客户端继续发送剩余部分</li>\n<li>101：切换协议，要求服务器切换协议，服务端已确认切换</li>\n</ul>\n</li>\n<li>2xx：成功<ul>\n<li>201：服务器创建了新的资源</li>\n<li>202：服务器已接受请求，但未完成处理</li>\n<li>203：服务器成功处理，但返回的信息可能来自另一个来源</li>\n<li>204：服务器成功处理，但无返回内容</li>\n<li>205： 用户终端应该重置文档</li>\n<li>206：处理了部分get请求</li>\n</ul>\n</li>\n<li>3xx：重定向<ul>\n<li>301： 请求页面<strong>永久</strong>跳转到新的url</li>\n<li>302：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即<strong>临时</strong>移动。请求方法可能会改变，比如post改为get</li>\n<li>304：自从上次请求后，请求网页未修改过</li>\n<li>305：请求者只能使用代理访问</li>\n<li>307：服务器目前从不同位置的网页响应，但请求仍然继续使用原有位置来进行以后处理，即<strong>临时</strong>移动。请求方法不需要改变</li>\n</ul>\n</li>\n<li>4xx：客户端错误<ul>\n<li>400：请求错误，服务端不理解请求语法</li>\n<li>401：未授权</li>\n<li>403：服务器拒绝请求</li>\n<li>404：未找到</li>\n<li>405：禁用请求的方法</li>\n<li>406：无法使用请求的内容特性响应请求的页面</li>\n<li>407：请求需要代理的身份验证</li>\n<li>408：请求超时</li>\n<li>409：请求的网页冲突，服务器无法完成请求</li>\n<li>410：已删除</li>\n<li>411：服务器无法处理请求，因为请求缺少一个或多个必要请求头字段</li>\n<li>412：服务器未满足请求者的前提条件</li>\n<li>413：请求实体过大</li>\n<li>414：请求的URI过长</li>\n<li>415：服务器不支持请求的格式</li>\n<li>416：请求范围不符合要求</li>\n<li>417：服务器无法满足表头字段要求</li>\n</ul>\n</li>\n<li>5xx：服务端错误<ul>\n<li>500：服务器内部错误</li>\n<li>501：服务器不具备完全请求的功能</li>\n<li>502：网关错误，服务器作为网关或代理出现错误</li>\n<li>503：服务器当前无法使用</li>\n<li>504：网关超时，服务器作为网关或代理出现超时</li>\n<li>505：服务器不支持请求的http版本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"http请求方式\"><a href=\"#http请求方式\" class=\"headerlink\" title=\"http请求方式\"></a>http请求方式</h3><ul>\n<li><p>ajax,axios</p>\n</li>\n<li><p>EventSource: SSE技术(服务端推送)</p>\n</li>\n<li><p>WebSocket</p>\n</li>\n<li><p>navigator.sendBeacon: 异步数据上报api,用于做数据采集,浏览器会在何时的时间进行数据上报.</p>\n<ul>\n<li>navigator.sendBeacon只能进行发送，无法接收到服务端返回的数据</li>\n<li>在页面卸载时也不会中断此次请求</li>\n<li><a href=\"https://cloud.tencent.com/developer/article/1956250\">[译] 用 sendBeacon 发送分析信息的优点</a></li>\n<li><a href=\"https://juejin.cn/post/7449402571187683343\">Navigator.sendBeacon：前端数据发送的得力助手</a></li>\n</ul>\n</li>\n<li><p>SSE(服务器向浏览器发送数据)</p>\n<p>  浏览器通过<code>EventSource</code>的api去监听服务器是否有推送消息给客户端</p>\n</li>\n</ul>\n"},{"title":"【前端缓存】随机数位置区别","_content":"\n## 文件随机数存放位置区别\n\n### 文件url+?+随机数\n\n- ``` https://xxx?v=1.x.x ```\n\n  一般用于版本号对应的文件\n\n- ``` https://xxx?c=s45sdf ```\n\n  一般用于文件内容生成的hash值\n\n### 文件名+hash值\n\n``` https://xxxs45sdf ```\n\nhash值一般由文件内容生成\n\n\n## 区别\n\n以上两种存放位置都可以使浏览器获取最新的文件，而不是走缓存拿文件\n\n当前主流的一般是用文件名+hash值的形式。原因如下\n\n> 一般发版时，是有html文件和js、css文件的。<br />浏览器首先去请求html文件，html嵌入了js、css等其他文件。<br />那么在请求html和js、css等文件的这个时间差内，如果采用第一种方式(文件url+?+随机数)，就容易出现问题\n\n- 如果先发html文件，再发js、css等文件\n\n  - 客户请求时，浏览器不会走缓存，会去取最新的文件。\n  \n  - 但是可能这个时候取的js、css文件还是老的文件。那么就导致客户端下次再去请求时，走的其实是缓存。\n\n- 先发js、css等文件，再发html文件\n\n  - 对于有缓存的用户不会造成影响。\n  \n  - 但是对于无缓存的用户，拿取数据时，会拿取到最新的js、css等文件，那么最直观的影响可能是页面样式问题。但当html发布成功后，页面会恢复正常\n\n\n- 对于异步加载的情况\n\n  - 代码发布后，用户在使用过程中，进入了一个新路由\n\n  - 在新路由页面，获取的是最新的代码文件，但是在进入之前，获取的是老代码文件，那么这里就会导致新老代码文件交替，容易出现问题\n\n因此，采用文件名+hash的方式，无论是先发html还是js、css文件，由于是直接通过文件名去获取的，那么就不会产生上述问题。\n\n- 先发js、css等文件\n\n  - 由于文件名不同，由于文件名已经不一样了，所以不会覆盖掉之前存在的资源文件，客户端依旧可以安全的访问。\n\n- 再发html文件\n\n  - 因为js、css等文件已经发布完毕了，那么当html更新了之后，再获取的js、css等文件就已经是最新的了\n\n## 参链\n\n[大公司里怎样开发和部署前端代码](https://github.com/fouber/blog/issues/6)","source":"_posts/HTTP/【前端缓存】随机数位置区别.md","raw":"---\ntitle: 【前端缓存】随机数位置区别\ncategories: 浏览器\n---\n\n## 文件随机数存放位置区别\n\n### 文件url+?+随机数\n\n- ``` https://xxx?v=1.x.x ```\n\n  一般用于版本号对应的文件\n\n- ``` https://xxx?c=s45sdf ```\n\n  一般用于文件内容生成的hash值\n\n### 文件名+hash值\n\n``` https://xxxs45sdf ```\n\nhash值一般由文件内容生成\n\n\n## 区别\n\n以上两种存放位置都可以使浏览器获取最新的文件，而不是走缓存拿文件\n\n当前主流的一般是用文件名+hash值的形式。原因如下\n\n> 一般发版时，是有html文件和js、css文件的。<br />浏览器首先去请求html文件，html嵌入了js、css等其他文件。<br />那么在请求html和js、css等文件的这个时间差内，如果采用第一种方式(文件url+?+随机数)，就容易出现问题\n\n- 如果先发html文件，再发js、css等文件\n\n  - 客户请求时，浏览器不会走缓存，会去取最新的文件。\n  \n  - 但是可能这个时候取的js、css文件还是老的文件。那么就导致客户端下次再去请求时，走的其实是缓存。\n\n- 先发js、css等文件，再发html文件\n\n  - 对于有缓存的用户不会造成影响。\n  \n  - 但是对于无缓存的用户，拿取数据时，会拿取到最新的js、css等文件，那么最直观的影响可能是页面样式问题。但当html发布成功后，页面会恢复正常\n\n\n- 对于异步加载的情况\n\n  - 代码发布后，用户在使用过程中，进入了一个新路由\n\n  - 在新路由页面，获取的是最新的代码文件，但是在进入之前，获取的是老代码文件，那么这里就会导致新老代码文件交替，容易出现问题\n\n因此，采用文件名+hash的方式，无论是先发html还是js、css文件，由于是直接通过文件名去获取的，那么就不会产生上述问题。\n\n- 先发js、css等文件\n\n  - 由于文件名不同，由于文件名已经不一样了，所以不会覆盖掉之前存在的资源文件，客户端依旧可以安全的访问。\n\n- 再发html文件\n\n  - 因为js、css等文件已经发布完毕了，那么当html更新了之后，再获取的js、css等文件就已经是最新的了\n\n## 参链\n\n[大公司里怎样开发和部署前端代码](https://github.com/fouber/blog/issues/6)","slug":"HTTP/【前端缓存】随机数位置区别","published":1,"date":"2025-08-13T07:29:09.447Z","updated":"2025-03-06T09:08:26.511Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xb000jbofm2y6x3jcg","content":"<h2 id=\"文件随机数存放位置区别\"><a href=\"#文件随机数存放位置区别\" class=\"headerlink\" title=\"文件随机数存放位置区别\"></a>文件随机数存放位置区别</h2><h3 id=\"文件url-随机数\"><a href=\"#文件url-随机数\" class=\"headerlink\" title=\"文件url+?+随机数\"></a>文件url+?+随机数</h3><ul>\n<li><p><code>https://xxx?v=1.x.x</code></p>\n<p>一般用于版本号对应的文件</p>\n</li>\n<li><p><code>https://xxx?c=s45sdf</code></p>\n<p>一般用于文件内容生成的hash值</p>\n</li>\n</ul>\n<h3 id=\"文件名-hash值\"><a href=\"#文件名-hash值\" class=\"headerlink\" title=\"文件名+hash值\"></a>文件名+hash值</h3><p><code>https://xxxs45sdf</code></p>\n<p>hash值一般由文件内容生成</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>以上两种存放位置都可以使浏览器获取最新的文件，而不是走缓存拿文件</p>\n<p>当前主流的一般是用文件名+hash值的形式。原因如下</p>\n<blockquote>\n<p>一般发版时，是有html文件和js、css文件的。<br />浏览器首先去请求html文件，html嵌入了js、css等其他文件。<br />那么在请求html和js、css等文件的这个时间差内，如果采用第一种方式(文件url+?+随机数)，就容易出现问题</p>\n</blockquote>\n<ul>\n<li><p>如果先发html文件，再发js、css等文件</p>\n<ul>\n<li><p>客户请求时，浏览器不会走缓存，会去取最新的文件。</p>\n</li>\n<li><p>但是可能这个时候取的js、css文件还是老的文件。那么就导致客户端下次再去请求时，走的其实是缓存。</p>\n</li>\n</ul>\n</li>\n<li><p>先发js、css等文件，再发html文件</p>\n<ul>\n<li><p>对于有缓存的用户不会造成影响。</p>\n</li>\n<li><p>但是对于无缓存的用户，拿取数据时，会拿取到最新的js、css等文件，那么最直观的影响可能是页面样式问题。但当html发布成功后，页面会恢复正常</p>\n</li>\n</ul>\n</li>\n<li><p>对于异步加载的情况</p>\n<ul>\n<li><p>代码发布后，用户在使用过程中，进入了一个新路由</p>\n</li>\n<li><p>在新路由页面，获取的是最新的代码文件，但是在进入之前，获取的是老代码文件，那么这里就会导致新老代码文件交替，容易出现问题</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>因此，采用文件名+hash的方式，无论是先发html还是js、css文件，由于是直接通过文件名去获取的，那么就不会产生上述问题。</p>\n<ul>\n<li><p>先发js、css等文件</p>\n<ul>\n<li>由于文件名不同，由于文件名已经不一样了，所以不会覆盖掉之前存在的资源文件，客户端依旧可以安全的访问。</li>\n</ul>\n</li>\n<li><p>再发html文件</p>\n<ul>\n<li>因为js、css等文件已经发布完毕了，那么当html更新了之后，再获取的js、css等文件就已经是最新的了</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://github.com/fouber/blog/issues/6\">大公司里怎样开发和部署前端代码</a></p>\n","excerpt":"","more":"<h2 id=\"文件随机数存放位置区别\"><a href=\"#文件随机数存放位置区别\" class=\"headerlink\" title=\"文件随机数存放位置区别\"></a>文件随机数存放位置区别</h2><h3 id=\"文件url-随机数\"><a href=\"#文件url-随机数\" class=\"headerlink\" title=\"文件url+?+随机数\"></a>文件url+?+随机数</h3><ul>\n<li><p><code>https://xxx?v=1.x.x</code></p>\n<p>一般用于版本号对应的文件</p>\n</li>\n<li><p><code>https://xxx?c=s45sdf</code></p>\n<p>一般用于文件内容生成的hash值</p>\n</li>\n</ul>\n<h3 id=\"文件名-hash值\"><a href=\"#文件名-hash值\" class=\"headerlink\" title=\"文件名+hash值\"></a>文件名+hash值</h3><p><code>https://xxxs45sdf</code></p>\n<p>hash值一般由文件内容生成</p>\n<h2 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h2><p>以上两种存放位置都可以使浏览器获取最新的文件，而不是走缓存拿文件</p>\n<p>当前主流的一般是用文件名+hash值的形式。原因如下</p>\n<blockquote>\n<p>一般发版时，是有html文件和js、css文件的。<br />浏览器首先去请求html文件，html嵌入了js、css等其他文件。<br />那么在请求html和js、css等文件的这个时间差内，如果采用第一种方式(文件url+?+随机数)，就容易出现问题</p>\n</blockquote>\n<ul>\n<li><p>如果先发html文件，再发js、css等文件</p>\n<ul>\n<li><p>客户请求时，浏览器不会走缓存，会去取最新的文件。</p>\n</li>\n<li><p>但是可能这个时候取的js、css文件还是老的文件。那么就导致客户端下次再去请求时，走的其实是缓存。</p>\n</li>\n</ul>\n</li>\n<li><p>先发js、css等文件，再发html文件</p>\n<ul>\n<li><p>对于有缓存的用户不会造成影响。</p>\n</li>\n<li><p>但是对于无缓存的用户，拿取数据时，会拿取到最新的js、css等文件，那么最直观的影响可能是页面样式问题。但当html发布成功后，页面会恢复正常</p>\n</li>\n</ul>\n</li>\n<li><p>对于异步加载的情况</p>\n<ul>\n<li><p>代码发布后，用户在使用过程中，进入了一个新路由</p>\n</li>\n<li><p>在新路由页面，获取的是最新的代码文件，但是在进入之前，获取的是老代码文件，那么这里就会导致新老代码文件交替，容易出现问题</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>因此，采用文件名+hash的方式，无论是先发html还是js、css文件，由于是直接通过文件名去获取的，那么就不会产生上述问题。</p>\n<ul>\n<li><p>先发js、css等文件</p>\n<ul>\n<li>由于文件名不同，由于文件名已经不一样了，所以不会覆盖掉之前存在的资源文件，客户端依旧可以安全的访问。</li>\n</ul>\n</li>\n<li><p>再发html文件</p>\n<ul>\n<li>因为js、css等文件已经发布完毕了，那么当html更新了之后，再获取的js、css等文件就已经是最新的了</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://github.com/fouber/blog/issues/6\">大公司里怎样开发和部署前端代码</a></p>\n"},{"title":"【Htpp】队头阻塞","_content":"\n## http1队头阻塞\n\n除了TCP的本身限制外，http1的先进先出（FIFO）的设计导致的。即浏览器在发送了请求后，必须按照发送顺序获取到相应的响应结果。例如请求A、请求B按顺序发送，请求A需要1s响应，请求B需要0.1s响应，即使B请求响应更加快速，但是浏览器依旧需要等待A的响应才能获取到B的响应。这就是http1的队头阻塞\n\n### FIFO\n\n#### 使用原因\n\n- 简化协议实现\n\n    http1设计在早期互联网，顺序处理模型更加简单，减少协议复杂性\n\n- 避免资源竞争\n\n    顺序处理可以避免服务器或客户端因并发处理多个请求导致数据混乱\n\n- 兼容性\n\n    早期浏览器和服务器对并发有限制，因此使用FIFO是权衡之后的结果\n\n#### 表现\n\n请求顺序化和相应顺序化\n\n#### 导致问题\n\n- 队头阻塞\n\n- 性能问题\n\n    高并发情况下，FIFO机制会导致连接利用率低下，无法充分利用带宽\n\n#### 改进尝试\n\n管道化：允许客户端在未接受响应是连续发送多个请求\n\n- 缺点\n\n    - 响应必须按顺序返回\n    - 服务器实现复杂，且易因队头阻塞导致性能问题\n    - 浏览器默认禁用管道话\n\n因此管道化实际并未解决队头阻塞问题\n\n## http2\n\n### 如何解决\n\n- 二进制分帧\n\n    http2中引入了二进制分帧的概念，即将请求的参数及数据全部分解为一个一个的二进制格式帧，这样可以提升传输和解析的效率。\n\n- 多路复用\n\n    流是一组双向的帧序列，每个流都有一个唯一的标识符，并且可以在同一个连接中并发传输多个流，可以最大程度实现多路复用\n\n    一个流可以由多个帧组成，这些帧按顺序发送，接收方根据流标识符将其重新组合为完整的请求或响应\n\n因此多个http可以同时并发传输或者交错传输，从而减少队头阻塞\n\n### 帧\n\n#### 内容\n\n每个帧有一个固定头部（9字节），包括：\n\n- 长度：Length\n\n    帧负载长度，由24位3个字节大小表示\n\n- 类型：Type\n\n    帧类型，说明格式及其语义，用8位1个字节表示\n\n- 标志：Flags\n\n    指示帧的特定属性或状态，用8位1个字节表示\n\n- 流标识符：Stream Identifier\n\n    表示该帧关联的流，用31为表示，上限为2^31\n\n- 帧数据\n\n    传输的数据内容Payload由帧类型决定\n\n- R\n    1位保留字段，未定义，以0x0结尾\n\n\n#### 帧类型\n\nPad Length：填充字节长度\nE：标识流是否为独占，设置PRIORITY时才有值\nStream Dependency：流的依赖流，设置PRIORITY时才有值\nWeight：流优先级权重，设置PRIORITY时才有值\nHeader Block Fragment：Header块片段\nPadding：填充字节长度\n\n- DATA帧\n\n    数据帧主要存储http2数据报文，包含8位填充字节+填充字节长度（PADDED）标记位true时说明由填充字节+Data具体传输的数据\n\n- HEADER帧\n\n    包含Pad Length（填充字节长度）+E（标识流是否为独占，设置PRIORITY时才有值）+Stream Dependency（流的依赖流，设置PRIORITY时才有值）+ Weight（流优先级权重，设置PRIORITY时才有值）+ Header Block Fragment（Header块片段）+ Padding（填充字节长度）\n\n- PROIRITY帧\n\n    发送流的优先级，包含E+Stream Dependency+Weight\n\n- RST_STREAM帧\n\n    当发送错误或取消时，用于终止一个流，包含Error Code，32位错误代码，说明错误原因\n\n- SETTINGS帧\n\n    用于传达连接端点之间的配置参数，标为ACK=0表示被对等的SETTINGS帧使用，不为0时表示FRAME_SIZE_ERROR连接错误\n\n- PUSH_PROMISE帧\n\n    服务端向客户端推送的帧，客户端可以返回RST_STREAM拒绝\n\n- PING帧\n\n    心跳监测，测量发送往还时间，确定连接是否正常，ACK=0表示PING帧响应，1表示PING帧\n\n- GOAWAY帧\n\n    用于关闭连接或发出错误，允许停止接受新的流并完成前面的流处理\n\n    包括R+Last Stream Id + Error Code + Addictional Debug Data\n\n- WINDOW_UPDATE帧\n\n    用于连接和流的流量控制\n\n- CONTINUATION帧\n\n    一种持续帧，用于继续传输Header头块片段。通常Header块比较大，在HEADERS、PUSH_PROMISE、CONTINUATION帧之后继续传输\n\n### 问题\n\nhttp2只解决了应用层的问题，但是由于其还是基于tcp的，因此tcp硬伤的队头阻塞依旧存在\n\ntcp由于“可靠传输”而包含的按序到达的机制，使得http2的队头阻塞问题仍然存在\n\n## 参考链接\n\n[HTTP 1.x 学习笔记 —— Web 性能权威指南](https://www.cnblogs.com/huansky/p/14420723.html)\n\n[关于队头阻塞（Head-of-Line blocking），看这一篇就足够了](https://zhuanlan.zhihu.com/p/330300133)\n\n[HTTP1.1 对头阻塞和 HTTP2 中对其的解决措施](https://blog.csdn.net/weixin_63951768/article/details/144917352)","source":"_posts/HTTP/【http】队头阻塞.md","raw":"---\ntitle: 【Htpp】队头阻塞\ncategories: http\ntag: http\n---\n\n## http1队头阻塞\n\n除了TCP的本身限制外，http1的先进先出（FIFO）的设计导致的。即浏览器在发送了请求后，必须按照发送顺序获取到相应的响应结果。例如请求A、请求B按顺序发送，请求A需要1s响应，请求B需要0.1s响应，即使B请求响应更加快速，但是浏览器依旧需要等待A的响应才能获取到B的响应。这就是http1的队头阻塞\n\n### FIFO\n\n#### 使用原因\n\n- 简化协议实现\n\n    http1设计在早期互联网，顺序处理模型更加简单，减少协议复杂性\n\n- 避免资源竞争\n\n    顺序处理可以避免服务器或客户端因并发处理多个请求导致数据混乱\n\n- 兼容性\n\n    早期浏览器和服务器对并发有限制，因此使用FIFO是权衡之后的结果\n\n#### 表现\n\n请求顺序化和相应顺序化\n\n#### 导致问题\n\n- 队头阻塞\n\n- 性能问题\n\n    高并发情况下，FIFO机制会导致连接利用率低下，无法充分利用带宽\n\n#### 改进尝试\n\n管道化：允许客户端在未接受响应是连续发送多个请求\n\n- 缺点\n\n    - 响应必须按顺序返回\n    - 服务器实现复杂，且易因队头阻塞导致性能问题\n    - 浏览器默认禁用管道话\n\n因此管道化实际并未解决队头阻塞问题\n\n## http2\n\n### 如何解决\n\n- 二进制分帧\n\n    http2中引入了二进制分帧的概念，即将请求的参数及数据全部分解为一个一个的二进制格式帧，这样可以提升传输和解析的效率。\n\n- 多路复用\n\n    流是一组双向的帧序列，每个流都有一个唯一的标识符，并且可以在同一个连接中并发传输多个流，可以最大程度实现多路复用\n\n    一个流可以由多个帧组成，这些帧按顺序发送，接收方根据流标识符将其重新组合为完整的请求或响应\n\n因此多个http可以同时并发传输或者交错传输，从而减少队头阻塞\n\n### 帧\n\n#### 内容\n\n每个帧有一个固定头部（9字节），包括：\n\n- 长度：Length\n\n    帧负载长度，由24位3个字节大小表示\n\n- 类型：Type\n\n    帧类型，说明格式及其语义，用8位1个字节表示\n\n- 标志：Flags\n\n    指示帧的特定属性或状态，用8位1个字节表示\n\n- 流标识符：Stream Identifier\n\n    表示该帧关联的流，用31为表示，上限为2^31\n\n- 帧数据\n\n    传输的数据内容Payload由帧类型决定\n\n- R\n    1位保留字段，未定义，以0x0结尾\n\n\n#### 帧类型\n\nPad Length：填充字节长度\nE：标识流是否为独占，设置PRIORITY时才有值\nStream Dependency：流的依赖流，设置PRIORITY时才有值\nWeight：流优先级权重，设置PRIORITY时才有值\nHeader Block Fragment：Header块片段\nPadding：填充字节长度\n\n- DATA帧\n\n    数据帧主要存储http2数据报文，包含8位填充字节+填充字节长度（PADDED）标记位true时说明由填充字节+Data具体传输的数据\n\n- HEADER帧\n\n    包含Pad Length（填充字节长度）+E（标识流是否为独占，设置PRIORITY时才有值）+Stream Dependency（流的依赖流，设置PRIORITY时才有值）+ Weight（流优先级权重，设置PRIORITY时才有值）+ Header Block Fragment（Header块片段）+ Padding（填充字节长度）\n\n- PROIRITY帧\n\n    发送流的优先级，包含E+Stream Dependency+Weight\n\n- RST_STREAM帧\n\n    当发送错误或取消时，用于终止一个流，包含Error Code，32位错误代码，说明错误原因\n\n- SETTINGS帧\n\n    用于传达连接端点之间的配置参数，标为ACK=0表示被对等的SETTINGS帧使用，不为0时表示FRAME_SIZE_ERROR连接错误\n\n- PUSH_PROMISE帧\n\n    服务端向客户端推送的帧，客户端可以返回RST_STREAM拒绝\n\n- PING帧\n\n    心跳监测，测量发送往还时间，确定连接是否正常，ACK=0表示PING帧响应，1表示PING帧\n\n- GOAWAY帧\n\n    用于关闭连接或发出错误，允许停止接受新的流并完成前面的流处理\n\n    包括R+Last Stream Id + Error Code + Addictional Debug Data\n\n- WINDOW_UPDATE帧\n\n    用于连接和流的流量控制\n\n- CONTINUATION帧\n\n    一种持续帧，用于继续传输Header头块片段。通常Header块比较大，在HEADERS、PUSH_PROMISE、CONTINUATION帧之后继续传输\n\n### 问题\n\nhttp2只解决了应用层的问题，但是由于其还是基于tcp的，因此tcp硬伤的队头阻塞依旧存在\n\ntcp由于“可靠传输”而包含的按序到达的机制，使得http2的队头阻塞问题仍然存在\n\n## 参考链接\n\n[HTTP 1.x 学习笔记 —— Web 性能权威指南](https://www.cnblogs.com/huansky/p/14420723.html)\n\n[关于队头阻塞（Head-of-Line blocking），看这一篇就足够了](https://zhuanlan.zhihu.com/p/330300133)\n\n[HTTP1.1 对头阻塞和 HTTP2 中对其的解决措施](https://blog.csdn.net/weixin_63951768/article/details/144917352)","slug":"HTTP/【http】队头阻塞","published":1,"date":"2025-08-13T07:29:09.445Z","updated":"2025-03-21T09:20:25.583Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xc000mbofm1clmbo6t","content":"<h2 id=\"http1队头阻塞\"><a href=\"#http1队头阻塞\" class=\"headerlink\" title=\"http1队头阻塞\"></a>http1队头阻塞</h2><p>除了TCP的本身限制外，http1的先进先出（FIFO）的设计导致的。即浏览器在发送了请求后，必须按照发送顺序获取到相应的响应结果。例如请求A、请求B按顺序发送，请求A需要1s响应，请求B需要0.1s响应，即使B请求响应更加快速，但是浏览器依旧需要等待A的响应才能获取到B的响应。这就是http1的队头阻塞</p>\n<h3 id=\"FIFO\"><a href=\"#FIFO\" class=\"headerlink\" title=\"FIFO\"></a>FIFO</h3><h4 id=\"使用原因\"><a href=\"#使用原因\" class=\"headerlink\" title=\"使用原因\"></a>使用原因</h4><ul>\n<li><p>简化协议实现</p>\n<p>  http1设计在早期互联网，顺序处理模型更加简单，减少协议复杂性</p>\n</li>\n<li><p>避免资源竞争</p>\n<p>  顺序处理可以避免服务器或客户端因并发处理多个请求导致数据混乱</p>\n</li>\n<li><p>兼容性</p>\n<p>  早期浏览器和服务器对并发有限制，因此使用FIFO是权衡之后的结果</p>\n</li>\n</ul>\n<h4 id=\"表现\"><a href=\"#表现\" class=\"headerlink\" title=\"表现\"></a>表现</h4><p>请求顺序化和相应顺序化</p>\n<h4 id=\"导致问题\"><a href=\"#导致问题\" class=\"headerlink\" title=\"导致问题\"></a>导致问题</h4><ul>\n<li><p>队头阻塞</p>\n</li>\n<li><p>性能问题</p>\n<p>  高并发情况下，FIFO机制会导致连接利用率低下，无法充分利用带宽</p>\n</li>\n</ul>\n<h4 id=\"改进尝试\"><a href=\"#改进尝试\" class=\"headerlink\" title=\"改进尝试\"></a>改进尝试</h4><p>管道化：允许客户端在未接受响应是连续发送多个请求</p>\n<ul>\n<li><p>缺点</p>\n<ul>\n<li>响应必须按顺序返回</li>\n<li>服务器实现复杂，且易因队头阻塞导致性能问题</li>\n<li>浏览器默认禁用管道话</li>\n</ul>\n</li>\n</ul>\n<p>因此管道化实际并未解决队头阻塞问题</p>\n<h2 id=\"http2\"><a href=\"#http2\" class=\"headerlink\" title=\"http2\"></a>http2</h2><h3 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h3><ul>\n<li><p>二进制分帧</p>\n<p>  http2中引入了二进制分帧的概念，即将请求的参数及数据全部分解为一个一个的二进制格式帧，这样可以提升传输和解析的效率。</p>\n</li>\n<li><p>多路复用</p>\n<p>  流是一组双向的帧序列，每个流都有一个唯一的标识符，并且可以在同一个连接中并发传输多个流，可以最大程度实现多路复用</p>\n<p>  一个流可以由多个帧组成，这些帧按顺序发送，接收方根据流标识符将其重新组合为完整的请求或响应</p>\n</li>\n</ul>\n<p>因此多个http可以同时并发传输或者交错传输，从而减少队头阻塞</p>\n<h3 id=\"帧\"><a href=\"#帧\" class=\"headerlink\" title=\"帧\"></a>帧</h3><h4 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h4><p>每个帧有一个固定头部（9字节），包括：</p>\n<ul>\n<li><p>长度：Length</p>\n<p>  帧负载长度，由24位3个字节大小表示</p>\n</li>\n<li><p>类型：Type</p>\n<p>  帧类型，说明格式及其语义，用8位1个字节表示</p>\n</li>\n<li><p>标志：Flags</p>\n<p>  指示帧的特定属性或状态，用8位1个字节表示</p>\n</li>\n<li><p>流标识符：Stream Identifier</p>\n<p>  表示该帧关联的流，用31为表示，上限为2^31</p>\n</li>\n<li><p>帧数据</p>\n<p>  传输的数据内容Payload由帧类型决定</p>\n</li>\n<li><p>R<br>  1位保留字段，未定义，以0x0结尾</p>\n</li>\n</ul>\n<h4 id=\"帧类型\"><a href=\"#帧类型\" class=\"headerlink\" title=\"帧类型\"></a>帧类型</h4><p>Pad Length：填充字节长度<br>E：标识流是否为独占，设置PRIORITY时才有值<br>Stream Dependency：流的依赖流，设置PRIORITY时才有值<br>Weight：流优先级权重，设置PRIORITY时才有值<br>Header Block Fragment：Header块片段<br>Padding：填充字节长度</p>\n<ul>\n<li><p>DATA帧</p>\n<p>  数据帧主要存储http2数据报文，包含8位填充字节+填充字节长度（PADDED）标记位true时说明由填充字节+Data具体传输的数据</p>\n</li>\n<li><p>HEADER帧</p>\n<p>  包含Pad Length（填充字节长度）+E（标识流是否为独占，设置PRIORITY时才有值）+Stream Dependency（流的依赖流，设置PRIORITY时才有值）+ Weight（流优先级权重，设置PRIORITY时才有值）+ Header Block Fragment（Header块片段）+ Padding（填充字节长度）</p>\n</li>\n<li><p>PROIRITY帧</p>\n<p>  发送流的优先级，包含E+Stream Dependency+Weight</p>\n</li>\n<li><p>RST_STREAM帧</p>\n<p>  当发送错误或取消时，用于终止一个流，包含Error Code，32位错误代码，说明错误原因</p>\n</li>\n<li><p>SETTINGS帧</p>\n<p>  用于传达连接端点之间的配置参数，标为ACK&#x3D;0表示被对等的SETTINGS帧使用，不为0时表示FRAME_SIZE_ERROR连接错误</p>\n</li>\n<li><p>PUSH_PROMISE帧</p>\n<p>  服务端向客户端推送的帧，客户端可以返回RST_STREAM拒绝</p>\n</li>\n<li><p>PING帧</p>\n<p>  心跳监测，测量发送往还时间，确定连接是否正常，ACK&#x3D;0表示PING帧响应，1表示PING帧</p>\n</li>\n<li><p>GOAWAY帧</p>\n<p>  用于关闭连接或发出错误，允许停止接受新的流并完成前面的流处理</p>\n<p>  包括R+Last Stream Id + Error Code + Addictional Debug Data</p>\n</li>\n<li><p>WINDOW_UPDATE帧</p>\n<p>  用于连接和流的流量控制</p>\n</li>\n<li><p>CONTINUATION帧</p>\n<p>  一种持续帧，用于继续传输Header头块片段。通常Header块比较大，在HEADERS、PUSH_PROMISE、CONTINUATION帧之后继续传输</p>\n</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>http2只解决了应用层的问题，但是由于其还是基于tcp的，因此tcp硬伤的队头阻塞依旧存在</p>\n<p>tcp由于“可靠传输”而包含的按序到达的机制，使得http2的队头阻塞问题仍然存在</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.cnblogs.com/huansky/p/14420723.html\">HTTP 1.x 学习笔记 —— Web 性能权威指南</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/330300133\">关于队头阻塞（Head-of-Line blocking），看这一篇就足够了</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_63951768/article/details/144917352\">HTTP1.1 对头阻塞和 HTTP2 中对其的解决措施</a></p>\n","excerpt":"","more":"<h2 id=\"http1队头阻塞\"><a href=\"#http1队头阻塞\" class=\"headerlink\" title=\"http1队头阻塞\"></a>http1队头阻塞</h2><p>除了TCP的本身限制外，http1的先进先出（FIFO）的设计导致的。即浏览器在发送了请求后，必须按照发送顺序获取到相应的响应结果。例如请求A、请求B按顺序发送，请求A需要1s响应，请求B需要0.1s响应，即使B请求响应更加快速，但是浏览器依旧需要等待A的响应才能获取到B的响应。这就是http1的队头阻塞</p>\n<h3 id=\"FIFO\"><a href=\"#FIFO\" class=\"headerlink\" title=\"FIFO\"></a>FIFO</h3><h4 id=\"使用原因\"><a href=\"#使用原因\" class=\"headerlink\" title=\"使用原因\"></a>使用原因</h4><ul>\n<li><p>简化协议实现</p>\n<p>  http1设计在早期互联网，顺序处理模型更加简单，减少协议复杂性</p>\n</li>\n<li><p>避免资源竞争</p>\n<p>  顺序处理可以避免服务器或客户端因并发处理多个请求导致数据混乱</p>\n</li>\n<li><p>兼容性</p>\n<p>  早期浏览器和服务器对并发有限制，因此使用FIFO是权衡之后的结果</p>\n</li>\n</ul>\n<h4 id=\"表现\"><a href=\"#表现\" class=\"headerlink\" title=\"表现\"></a>表现</h4><p>请求顺序化和相应顺序化</p>\n<h4 id=\"导致问题\"><a href=\"#导致问题\" class=\"headerlink\" title=\"导致问题\"></a>导致问题</h4><ul>\n<li><p>队头阻塞</p>\n</li>\n<li><p>性能问题</p>\n<p>  高并发情况下，FIFO机制会导致连接利用率低下，无法充分利用带宽</p>\n</li>\n</ul>\n<h4 id=\"改进尝试\"><a href=\"#改进尝试\" class=\"headerlink\" title=\"改进尝试\"></a>改进尝试</h4><p>管道化：允许客户端在未接受响应是连续发送多个请求</p>\n<ul>\n<li><p>缺点</p>\n<ul>\n<li>响应必须按顺序返回</li>\n<li>服务器实现复杂，且易因队头阻塞导致性能问题</li>\n<li>浏览器默认禁用管道话</li>\n</ul>\n</li>\n</ul>\n<p>因此管道化实际并未解决队头阻塞问题</p>\n<h2 id=\"http2\"><a href=\"#http2\" class=\"headerlink\" title=\"http2\"></a>http2</h2><h3 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h3><ul>\n<li><p>二进制分帧</p>\n<p>  http2中引入了二进制分帧的概念，即将请求的参数及数据全部分解为一个一个的二进制格式帧，这样可以提升传输和解析的效率。</p>\n</li>\n<li><p>多路复用</p>\n<p>  流是一组双向的帧序列，每个流都有一个唯一的标识符，并且可以在同一个连接中并发传输多个流，可以最大程度实现多路复用</p>\n<p>  一个流可以由多个帧组成，这些帧按顺序发送，接收方根据流标识符将其重新组合为完整的请求或响应</p>\n</li>\n</ul>\n<p>因此多个http可以同时并发传输或者交错传输，从而减少队头阻塞</p>\n<h3 id=\"帧\"><a href=\"#帧\" class=\"headerlink\" title=\"帧\"></a>帧</h3><h4 id=\"内容\"><a href=\"#内容\" class=\"headerlink\" title=\"内容\"></a>内容</h4><p>每个帧有一个固定头部（9字节），包括：</p>\n<ul>\n<li><p>长度：Length</p>\n<p>  帧负载长度，由24位3个字节大小表示</p>\n</li>\n<li><p>类型：Type</p>\n<p>  帧类型，说明格式及其语义，用8位1个字节表示</p>\n</li>\n<li><p>标志：Flags</p>\n<p>  指示帧的特定属性或状态，用8位1个字节表示</p>\n</li>\n<li><p>流标识符：Stream Identifier</p>\n<p>  表示该帧关联的流，用31为表示，上限为2^31</p>\n</li>\n<li><p>帧数据</p>\n<p>  传输的数据内容Payload由帧类型决定</p>\n</li>\n<li><p>R<br>  1位保留字段，未定义，以0x0结尾</p>\n</li>\n</ul>\n<h4 id=\"帧类型\"><a href=\"#帧类型\" class=\"headerlink\" title=\"帧类型\"></a>帧类型</h4><p>Pad Length：填充字节长度<br>E：标识流是否为独占，设置PRIORITY时才有值<br>Stream Dependency：流的依赖流，设置PRIORITY时才有值<br>Weight：流优先级权重，设置PRIORITY时才有值<br>Header Block Fragment：Header块片段<br>Padding：填充字节长度</p>\n<ul>\n<li><p>DATA帧</p>\n<p>  数据帧主要存储http2数据报文，包含8位填充字节+填充字节长度（PADDED）标记位true时说明由填充字节+Data具体传输的数据</p>\n</li>\n<li><p>HEADER帧</p>\n<p>  包含Pad Length（填充字节长度）+E（标识流是否为独占，设置PRIORITY时才有值）+Stream Dependency（流的依赖流，设置PRIORITY时才有值）+ Weight（流优先级权重，设置PRIORITY时才有值）+ Header Block Fragment（Header块片段）+ Padding（填充字节长度）</p>\n</li>\n<li><p>PROIRITY帧</p>\n<p>  发送流的优先级，包含E+Stream Dependency+Weight</p>\n</li>\n<li><p>RST_STREAM帧</p>\n<p>  当发送错误或取消时，用于终止一个流，包含Error Code，32位错误代码，说明错误原因</p>\n</li>\n<li><p>SETTINGS帧</p>\n<p>  用于传达连接端点之间的配置参数，标为ACK&#x3D;0表示被对等的SETTINGS帧使用，不为0时表示FRAME_SIZE_ERROR连接错误</p>\n</li>\n<li><p>PUSH_PROMISE帧</p>\n<p>  服务端向客户端推送的帧，客户端可以返回RST_STREAM拒绝</p>\n</li>\n<li><p>PING帧</p>\n<p>  心跳监测，测量发送往还时间，确定连接是否正常，ACK&#x3D;0表示PING帧响应，1表示PING帧</p>\n</li>\n<li><p>GOAWAY帧</p>\n<p>  用于关闭连接或发出错误，允许停止接受新的流并完成前面的流处理</p>\n<p>  包括R+Last Stream Id + Error Code + Addictional Debug Data</p>\n</li>\n<li><p>WINDOW_UPDATE帧</p>\n<p>  用于连接和流的流量控制</p>\n</li>\n<li><p>CONTINUATION帧</p>\n<p>  一种持续帧，用于继续传输Header头块片段。通常Header块比较大，在HEADERS、PUSH_PROMISE、CONTINUATION帧之后继续传输</p>\n</li>\n</ul>\n<h3 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h3><p>http2只解决了应用层的问题，但是由于其还是基于tcp的，因此tcp硬伤的队头阻塞依旧存在</p>\n<p>tcp由于“可靠传输”而包含的按序到达的机制，使得http2的队头阻塞问题仍然存在</p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.cnblogs.com/huansky/p/14420723.html\">HTTP 1.x 学习笔记 —— Web 性能权威指南</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/330300133\">关于队头阻塞（Head-of-Line blocking），看这一篇就足够了</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_63951768/article/details/144917352\">HTTP1.1 对头阻塞和 HTTP2 中对其的解决措施</a></p>\n"},{"title":"【css】BFC","_content":"\n定义：页面中的一块渲染区域，同一个格式化上下文内和不同格式化上下文之间的定位方式都会发生变化\n\n## bfc(块级格式化上下文)\n\n### 创建条件\n\n- 根元素\n\n- 脱离普通文档流的元素(浮动，绝对定位，固定定位)\n\n- 非块级元素(包含flex，table)\n\n- overflow ！== visible(默认值)的块级元素\n\n### 影响\n\n- 同一个bfc内的相邻块级元素垂直外边距会发生折叠，即两者边距取决于双方边距的最大值而不是边距和\n\n- 内部元素与外部元素互不影响，因为bfc是独立容器\n\n- 在计算bfc高度时，内部的浮动元素也会被计算在哪内\n\n## ifc(内联格式化上下文)\n\n### 形成\n\n多个内联（块级）元素排列在一起的时候，这些内联（块级）元素之间不能穿插块级元素，否则会被切割为多个ifc\n\n### 影响\n\n- 一个ifc内的元素都是水平排列的\n\n- 横向的margin，border，padding属性对这些元素都是有效的\n","source":"_posts/css/【css】BFC.md","raw":"---\ntitle: 【css】BFC\ncategories: css\n---\n\n定义：页面中的一块渲染区域，同一个格式化上下文内和不同格式化上下文之间的定位方式都会发生变化\n\n## bfc(块级格式化上下文)\n\n### 创建条件\n\n- 根元素\n\n- 脱离普通文档流的元素(浮动，绝对定位，固定定位)\n\n- 非块级元素(包含flex，table)\n\n- overflow ！== visible(默认值)的块级元素\n\n### 影响\n\n- 同一个bfc内的相邻块级元素垂直外边距会发生折叠，即两者边距取决于双方边距的最大值而不是边距和\n\n- 内部元素与外部元素互不影响，因为bfc是独立容器\n\n- 在计算bfc高度时，内部的浮动元素也会被计算在哪内\n\n## ifc(内联格式化上下文)\n\n### 形成\n\n多个内联（块级）元素排列在一起的时候，这些内联（块级）元素之间不能穿插块级元素，否则会被切割为多个ifc\n\n### 影响\n\n- 一个ifc内的元素都是水平排列的\n\n- 横向的margin，border，padding属性对这些元素都是有效的\n","slug":"css/【css】BFC","published":1,"date":"2025-08-13T07:29:09.382Z","updated":"2025-03-06T09:08:26.514Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xd000nbofm8nfo4pwy","content":"<p>定义：页面中的一块渲染区域，同一个格式化上下文内和不同格式化上下文之间的定位方式都会发生变化</p>\n<h2 id=\"bfc-块级格式化上下文\"><a href=\"#bfc-块级格式化上下文\" class=\"headerlink\" title=\"bfc(块级格式化上下文)\"></a>bfc(块级格式化上下文)</h2><h3 id=\"创建条件\"><a href=\"#创建条件\" class=\"headerlink\" title=\"创建条件\"></a>创建条件</h3><ul>\n<li><p>根元素</p>\n</li>\n<li><p>脱离普通文档流的元素(浮动，绝对定位，固定定位)</p>\n</li>\n<li><p>非块级元素(包含flex，table)</p>\n</li>\n<li><p>overflow ！&#x3D;&#x3D; visible(默认值)的块级元素</p>\n</li>\n</ul>\n<h3 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h3><ul>\n<li><p>同一个bfc内的相邻块级元素垂直外边距会发生折叠，即两者边距取决于双方边距的最大值而不是边距和</p>\n</li>\n<li><p>内部元素与外部元素互不影响，因为bfc是独立容器</p>\n</li>\n<li><p>在计算bfc高度时，内部的浮动元素也会被计算在哪内</p>\n</li>\n</ul>\n<h2 id=\"ifc-内联格式化上下文\"><a href=\"#ifc-内联格式化上下文\" class=\"headerlink\" title=\"ifc(内联格式化上下文)\"></a>ifc(内联格式化上下文)</h2><h3 id=\"形成\"><a href=\"#形成\" class=\"headerlink\" title=\"形成\"></a>形成</h3><p>多个内联（块级）元素排列在一起的时候，这些内联（块级）元素之间不能穿插块级元素，否则会被切割为多个ifc</p>\n<h3 id=\"影响-1\"><a href=\"#影响-1\" class=\"headerlink\" title=\"影响\"></a>影响</h3><ul>\n<li><p>一个ifc内的元素都是水平排列的</p>\n</li>\n<li><p>横向的margin，border，padding属性对这些元素都是有效的</p>\n</li>\n</ul>\n","excerpt":"","more":"<p>定义：页面中的一块渲染区域，同一个格式化上下文内和不同格式化上下文之间的定位方式都会发生变化</p>\n<h2 id=\"bfc-块级格式化上下文\"><a href=\"#bfc-块级格式化上下文\" class=\"headerlink\" title=\"bfc(块级格式化上下文)\"></a>bfc(块级格式化上下文)</h2><h3 id=\"创建条件\"><a href=\"#创建条件\" class=\"headerlink\" title=\"创建条件\"></a>创建条件</h3><ul>\n<li><p>根元素</p>\n</li>\n<li><p>脱离普通文档流的元素(浮动，绝对定位，固定定位)</p>\n</li>\n<li><p>非块级元素(包含flex，table)</p>\n</li>\n<li><p>overflow ！&#x3D;&#x3D; visible(默认值)的块级元素</p>\n</li>\n</ul>\n<h3 id=\"影响\"><a href=\"#影响\" class=\"headerlink\" title=\"影响\"></a>影响</h3><ul>\n<li><p>同一个bfc内的相邻块级元素垂直外边距会发生折叠，即两者边距取决于双方边距的最大值而不是边距和</p>\n</li>\n<li><p>内部元素与外部元素互不影响，因为bfc是独立容器</p>\n</li>\n<li><p>在计算bfc高度时，内部的浮动元素也会被计算在哪内</p>\n</li>\n</ul>\n<h2 id=\"ifc-内联格式化上下文\"><a href=\"#ifc-内联格式化上下文\" class=\"headerlink\" title=\"ifc(内联格式化上下文)\"></a>ifc(内联格式化上下文)</h2><h3 id=\"形成\"><a href=\"#形成\" class=\"headerlink\" title=\"形成\"></a>形成</h3><p>多个内联（块级）元素排列在一起的时候，这些内联（块级）元素之间不能穿插块级元素，否则会被切割为多个ifc</p>\n<h3 id=\"影响-1\"><a href=\"#影响-1\" class=\"headerlink\" title=\"影响\"></a>影响</h3><ul>\n<li><p>一个ifc内的元素都是水平排列的</p>\n</li>\n<li><p>横向的margin，border，padding属性对这些元素都是有效的</p>\n</li>\n</ul>\n"},{"title":"Chrome的Performance","_content":"\n# Chrome 的 performance\n\n## 开始记录\n\n可以通过调整这两个参数模拟低网低 cpu 情况 [![bRXxL4.png](https://s1.ax1x.com/2022/03/09/bRXxL4.png)](https://imgtu.com/i/bRXxL4)\n\n点击按钮，刷新页面或者只需要旁边的刷新按钮开始进行记录分析 [![bRjuTA.png](https://s1.ax1x.com/2022/03/09/bRjuTA.png)](https://imgtu.com/i/bRjuTA)\n\n## 操作设置栏 controls\n\n- 可以通过这个下拉框看到之前的分析数据\n\n[![bRjI1K.png](https://s1.ax1x.com/2022/03/09/bRjI1K.png)](https://imgtu.com/i/bRjI1K)\n\n- 其他配置\n\n[![bRvDUA.png](https://s1.ax1x.com/2022/03/09/bRvDUA.png)](https://imgtu.com/i/bRvDUA)\n\n## 页面性能的高级汇总 overview\n\n[![bRzmmF.png](https://s1.ax1x.com/2022/03/09/bRzmmF.png)](https://imgtu.com/i/bRzmmF) [![bWF68H.png](https://s1.ax1x.com/2022/03/09/bWF68H.png)](https://imgtu.com/i/bWF68H)\n\n- 颜色表示\n> <font color=#87CEFA>HTML</font>\n\n> <font color=yellow>脚本</font>\n\n> <font color=#9370DB>样式</font>\n\n> <font color=green>媒体资源</font>\n\n> <font color=gray>其他资源</font>\n\n| 名称 | 描述 |\n| --- | --- |\n| FPS，帧数 | <font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿 |\n| CPU，CPU 资源 | 指示消耗 CPU 资源的事件类型 |\n| NET，网络请求 | 每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据 |\n\n[![bWCE4J.png](https://s1.ax1x.com/2022/03/09/bWCE4J.png)](https://imgtu.com/i/bWCE4J)\n\n## 火焰图： CPU 堆叠可视化\n\n[![bWEmgH.png](https://s1.ax1x.com/2022/03/09/bWEmgH.png)](https://imgtu.com/i/bWEmgH)\n\n\n- Timing\n\n> FCP: First Contentful Paint，白屏时间，第一个元素出现的时间\n\n> [LCP](https://zhuanlan.zhihu.com/p/174837488): Largest Contentful Paint，视窗最大可见图片或者文本块的渲染时间\n\n> [FMP](https://blog.csdn.net/qiwoo_weekly/article/details/98818202): First Meaningful Paint，首次有效绘制时间，页面的“主要内容”开始出现在屏幕上的时间点\n\n> DCL: DOMContentLoaded Event，dom 加载完毕时间\n\n> L: Onload Event，完全加载完毕时间\n\n| 名称 | 描述 |\n| --- | --- |\n| Network | 资源加载顺序及时长 |\n| Main | 渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况[![bWV5Os.png](https://s1.ax1x.com/2022/03/09/bWV5Os.png)](https://imgtu.com/i/bWV5Os) |\n| Timings | 用户交互操作，比如点击鼠标、输入文字、动画等 |\n| Compositor | r 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操 |\n| Raster | 光栅化线程池，用来让 GPU 执行光栅化的任务 |\n| GPU | GPU 进程主线程的执行过程记录，如 可以直观看到何时启动 GPU 加速 |\n| Frame | ifream 框架加载详情 |\n| Memory | 不同的时间段的执行情况。页面中的内存使用的情况[![bWZwNV.png](https://s1.ax1x.com/2022/03/09/bWZwNV.png)](https://imgtu.com/i/bWZwNV) |\n\n\n* 在火焰图上看到一到三条垂直的虚线。蓝线代表 DOMContentLoaded 事件。 绿线代表首次绘制的时间。 红线代表 load 事件\n\n* 如果是耗时长的 Task，其右上角会标红，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。这样我们就很方便地定位到耗时函数了。\n[![bWu7JP.png](https://s1.ax1x.com/2022/03/09/bWu7JP.png)](https://imgtu.com/i/bWu7JP)\n\n## Summary性能摘要\n\n[![bWmDOJ.png](https://s1.ax1x.com/2022/03/09/bWmDOJ.png)](https://imgtu.com/i/bWmDOJ)\n- 颜色表示\n> <font color=#87CEFA>Loading</font>：网络通信和HTML解析\n\n> <font color=yellow>Scripting</font>：JavaScript执行\n\n> <font color=#9370DB>Rendering</font>：样式计算和布局，即重排\n\n> <font color=green>Painting</font>：重绘\n\n> <font color=gray>other</font>：其它事件花费的时间\n\n> <font color=white>Idle</font>：空闲时间\n\n[事件包含](https://www.cnblogs.com/zjjing/p/9106111.html)\n\n\n### 参考\n\n[Chrome Performance 使用栗子](https://zhuanlan.zhihu.com/p/29879682)\n\n[Chrome Performance 页面性能分析指南](https://zhuanlan.zhihu.com/p/163474573)\n\n[饼状图分析](https://www.jianshu.com/p/b6f87bac5381)\n\n[performance](https://www.cnblogs.com/xiaohuochai/p/9182710.html)","source":"_posts/devTools/Chrome--performance.md","raw":"---\ntitle: Chrome的Performance\ncategories: 浏览器\ntag: \n  浏览器\n  Performance\n  Chrome\n---\n\n# Chrome 的 performance\n\n## 开始记录\n\n可以通过调整这两个参数模拟低网低 cpu 情况 [![bRXxL4.png](https://s1.ax1x.com/2022/03/09/bRXxL4.png)](https://imgtu.com/i/bRXxL4)\n\n点击按钮，刷新页面或者只需要旁边的刷新按钮开始进行记录分析 [![bRjuTA.png](https://s1.ax1x.com/2022/03/09/bRjuTA.png)](https://imgtu.com/i/bRjuTA)\n\n## 操作设置栏 controls\n\n- 可以通过这个下拉框看到之前的分析数据\n\n[![bRjI1K.png](https://s1.ax1x.com/2022/03/09/bRjI1K.png)](https://imgtu.com/i/bRjI1K)\n\n- 其他配置\n\n[![bRvDUA.png](https://s1.ax1x.com/2022/03/09/bRvDUA.png)](https://imgtu.com/i/bRvDUA)\n\n## 页面性能的高级汇总 overview\n\n[![bRzmmF.png](https://s1.ax1x.com/2022/03/09/bRzmmF.png)](https://imgtu.com/i/bRzmmF) [![bWF68H.png](https://s1.ax1x.com/2022/03/09/bWF68H.png)](https://imgtu.com/i/bWF68H)\n\n- 颜色表示\n> <font color=#87CEFA>HTML</font>\n\n> <font color=yellow>脚本</font>\n\n> <font color=#9370DB>样式</font>\n\n> <font color=green>媒体资源</font>\n\n> <font color=gray>其他资源</font>\n\n| 名称 | 描述 |\n| --- | --- |\n| FPS，帧数 | <font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿 |\n| CPU，CPU 资源 | 指示消耗 CPU 资源的事件类型 |\n| NET，网络请求 | 每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据 |\n\n[![bWCE4J.png](https://s1.ax1x.com/2022/03/09/bWCE4J.png)](https://imgtu.com/i/bWCE4J)\n\n## 火焰图： CPU 堆叠可视化\n\n[![bWEmgH.png](https://s1.ax1x.com/2022/03/09/bWEmgH.png)](https://imgtu.com/i/bWEmgH)\n\n\n- Timing\n\n> FCP: First Contentful Paint，白屏时间，第一个元素出现的时间\n\n> [LCP](https://zhuanlan.zhihu.com/p/174837488): Largest Contentful Paint，视窗最大可见图片或者文本块的渲染时间\n\n> [FMP](https://blog.csdn.net/qiwoo_weekly/article/details/98818202): First Meaningful Paint，首次有效绘制时间，页面的“主要内容”开始出现在屏幕上的时间点\n\n> DCL: DOMContentLoaded Event，dom 加载完毕时间\n\n> L: Onload Event，完全加载完毕时间\n\n| 名称 | 描述 |\n| --- | --- |\n| Network | 资源加载顺序及时长 |\n| Main | 渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况[![bWV5Os.png](https://s1.ax1x.com/2022/03/09/bWV5Os.png)](https://imgtu.com/i/bWV5Os) |\n| Timings | 用户交互操作，比如点击鼠标、输入文字、动画等 |\n| Compositor | r 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操 |\n| Raster | 光栅化线程池，用来让 GPU 执行光栅化的任务 |\n| GPU | GPU 进程主线程的执行过程记录，如 可以直观看到何时启动 GPU 加速 |\n| Frame | ifream 框架加载详情 |\n| Memory | 不同的时间段的执行情况。页面中的内存使用的情况[![bWZwNV.png](https://s1.ax1x.com/2022/03/09/bWZwNV.png)](https://imgtu.com/i/bWZwNV) |\n\n\n* 在火焰图上看到一到三条垂直的虚线。蓝线代表 DOMContentLoaded 事件。 绿线代表首次绘制的时间。 红线代表 load 事件\n\n* 如果是耗时长的 Task，其右上角会标红，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。这样我们就很方便地定位到耗时函数了。\n[![bWu7JP.png](https://s1.ax1x.com/2022/03/09/bWu7JP.png)](https://imgtu.com/i/bWu7JP)\n\n## Summary性能摘要\n\n[![bWmDOJ.png](https://s1.ax1x.com/2022/03/09/bWmDOJ.png)](https://imgtu.com/i/bWmDOJ)\n- 颜色表示\n> <font color=#87CEFA>Loading</font>：网络通信和HTML解析\n\n> <font color=yellow>Scripting</font>：JavaScript执行\n\n> <font color=#9370DB>Rendering</font>：样式计算和布局，即重排\n\n> <font color=green>Painting</font>：重绘\n\n> <font color=gray>other</font>：其它事件花费的时间\n\n> <font color=white>Idle</font>：空闲时间\n\n[事件包含](https://www.cnblogs.com/zjjing/p/9106111.html)\n\n\n### 参考\n\n[Chrome Performance 使用栗子](https://zhuanlan.zhihu.com/p/29879682)\n\n[Chrome Performance 页面性能分析指南](https://zhuanlan.zhihu.com/p/163474573)\n\n[饼状图分析](https://www.jianshu.com/p/b6f87bac5381)\n\n[performance](https://www.cnblogs.com/xiaohuochai/p/9182710.html)","slug":"devTools/Chrome--performance","published":1,"date":"2025-08-13T07:29:09.412Z","updated":"2025-03-06T09:08:26.517Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xd000rbofmejgz41yo","content":"<h1 id=\"Chrome-的-performance\"><a href=\"#Chrome-的-performance\" class=\"headerlink\" title=\"Chrome 的 performance\"></a>Chrome 的 performance</h1><h2 id=\"开始记录\"><a href=\"#开始记录\" class=\"headerlink\" title=\"开始记录\"></a>开始记录</h2><p>可以通过调整这两个参数模拟低网低 cpu 情况 <a href=\"https://imgtu.com/i/bRXxL4\"><img src=\"https://s1.ax1x.com/2022/03/09/bRXxL4.png\" alt=\"bRXxL4.png\"></a></p>\n<p>点击按钮，刷新页面或者只需要旁边的刷新按钮开始进行记录分析 <a href=\"https://imgtu.com/i/bRjuTA\"><img src=\"https://s1.ax1x.com/2022/03/09/bRjuTA.png\" alt=\"bRjuTA.png\"></a></p>\n<h2 id=\"操作设置栏-controls\"><a href=\"#操作设置栏-controls\" class=\"headerlink\" title=\"操作设置栏 controls\"></a>操作设置栏 controls</h2><ul>\n<li>可以通过这个下拉框看到之前的分析数据</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/bRjI1K\"><img src=\"https://s1.ax1x.com/2022/03/09/bRjI1K.png\" alt=\"bRjI1K.png\"></a></p>\n<ul>\n<li>其他配置</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/bRvDUA\"><img src=\"https://s1.ax1x.com/2022/03/09/bRvDUA.png\" alt=\"bRvDUA.png\"></a></p>\n<h2 id=\"页面性能的高级汇总-overview\"><a href=\"#页面性能的高级汇总-overview\" class=\"headerlink\" title=\"页面性能的高级汇总 overview\"></a>页面性能的高级汇总 overview</h2><p><a href=\"https://imgtu.com/i/bRzmmF\"><img src=\"https://s1.ax1x.com/2022/03/09/bRzmmF.png\" alt=\"bRzmmF.png\"></a> <a href=\"https://imgtu.com/i/bWF68H\"><img src=\"https://s1.ax1x.com/2022/03/09/bWF68H.png\" alt=\"bWF68H.png\"></a></p>\n<ul>\n<li>颜色表示<blockquote>\n<p><font color=#87CEFA>HTML</font></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><font color=yellow>脚本</font></p>\n</blockquote>\n<blockquote>\n<p><font color=#9370DB>样式</font></p>\n</blockquote>\n<blockquote>\n<p><font color=green>媒体资源</font></p>\n</blockquote>\n<blockquote>\n<p><font color=gray>其他资源</font></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FPS，帧数</td>\n<td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td>\n</tr>\n<tr>\n<td>CPU，CPU 资源</td>\n<td>指示消耗 CPU 资源的事件类型</td>\n</tr>\n<tr>\n<td>NET，网络请求</td>\n<td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://imgtu.com/i/bWCE4J\"><img src=\"https://s1.ax1x.com/2022/03/09/bWCE4J.png\" alt=\"bWCE4J.png\"></a></p>\n<h2 id=\"火焰图：-CPU-堆叠可视化\"><a href=\"#火焰图：-CPU-堆叠可视化\" class=\"headerlink\" title=\"火焰图： CPU 堆叠可视化\"></a>火焰图： CPU 堆叠可视化</h2><p><a href=\"https://imgtu.com/i/bWEmgH\"><img src=\"https://s1.ax1x.com/2022/03/09/bWEmgH.png\" alt=\"bWEmgH.png\"></a></p>\n<ul>\n<li>Timing</li>\n</ul>\n<blockquote>\n<p>FCP: First Contentful Paint，白屏时间，第一个元素出现的时间</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/174837488\">LCP</a>: Largest Contentful Paint，视窗最大可见图片或者文本块的渲染时间</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qiwoo_weekly/article/details/98818202\">FMP</a>: First Meaningful Paint，首次有效绘制时间，页面的“主要内容”开始出现在屏幕上的时间点</p>\n</blockquote>\n<blockquote>\n<p>DCL: DOMContentLoaded Event，dom 加载完毕时间</p>\n</blockquote>\n<blockquote>\n<p>L: Onload Event，完全加载完毕时间</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Network</td>\n<td>资源加载顺序及时长</td>\n</tr>\n<tr>\n<td>Main</td>\n<td>渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况<a href=\"https://imgtu.com/i/bWV5Os\"><img src=\"https://s1.ax1x.com/2022/03/09/bWV5Os.png\" alt=\"bWV5Os.png\"></a></td>\n</tr>\n<tr>\n<td>Timings</td>\n<td>用户交互操作，比如点击鼠标、输入文字、动画等</td>\n</tr>\n<tr>\n<td>Compositor</td>\n<td>r 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操</td>\n</tr>\n<tr>\n<td>Raster</td>\n<td>光栅化线程池，用来让 GPU 执行光栅化的任务</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>GPU 进程主线程的执行过程记录，如 可以直观看到何时启动 GPU 加速</td>\n</tr>\n<tr>\n<td>Frame</td>\n<td>ifream 框架加载详情</td>\n</tr>\n<tr>\n<td>Memory</td>\n<td>不同的时间段的执行情况。页面中的内存使用的情况<a href=\"https://imgtu.com/i/bWZwNV\"><img src=\"https://s1.ax1x.com/2022/03/09/bWZwNV.png\" alt=\"bWZwNV.png\"></a></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>在火焰图上看到一到三条垂直的虚线。蓝线代表 DOMContentLoaded 事件。 绿线代表首次绘制的时间。 红线代表 load 事件</p>\n</li>\n<li><p>如果是耗时长的 Task，其右上角会标红，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。这样我们就很方便地定位到耗时函数了。<br><a href=\"https://imgtu.com/i/bWu7JP\"><img src=\"https://s1.ax1x.com/2022/03/09/bWu7JP.png\" alt=\"bWu7JP.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"Summary性能摘要\"><a href=\"#Summary性能摘要\" class=\"headerlink\" title=\"Summary性能摘要\"></a>Summary性能摘要</h2><p><a href=\"https://imgtu.com/i/bWmDOJ\"><img src=\"https://s1.ax1x.com/2022/03/09/bWmDOJ.png\" alt=\"bWmDOJ.png\"></a></p>\n<ul>\n<li>颜色表示<blockquote>\n<p><font color=#87CEFA>Loading</font>：网络通信和HTML解析</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><font color=yellow>Scripting</font>：JavaScript执行</p>\n</blockquote>\n<blockquote>\n<p><font color=#9370DB>Rendering</font>：样式计算和布局，即重排</p>\n</blockquote>\n<blockquote>\n<p><font color=green>Painting</font>：重绘</p>\n</blockquote>\n<blockquote>\n<p><font color=gray>other</font>：其它事件花费的时间</p>\n</blockquote>\n<blockquote>\n<p><font color=white>Idle</font>：空闲时间</p>\n</blockquote>\n<p><a href=\"https://www.cnblogs.com/zjjing/p/9106111.html\">事件包含</a></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/29879682\">Chrome Performance 使用栗子</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/163474573\">Chrome Performance 页面性能分析指南</a></p>\n<p><a href=\"https://www.jianshu.com/p/b6f87bac5381\">饼状图分析</a></p>\n<p><a href=\"https://www.cnblogs.com/xiaohuochai/p/9182710.html\">performance</a></p>\n","excerpt":"","more":"<h1 id=\"Chrome-的-performance\"><a href=\"#Chrome-的-performance\" class=\"headerlink\" title=\"Chrome 的 performance\"></a>Chrome 的 performance</h1><h2 id=\"开始记录\"><a href=\"#开始记录\" class=\"headerlink\" title=\"开始记录\"></a>开始记录</h2><p>可以通过调整这两个参数模拟低网低 cpu 情况 <a href=\"https://imgtu.com/i/bRXxL4\"><img src=\"https://s1.ax1x.com/2022/03/09/bRXxL4.png\" alt=\"bRXxL4.png\"></a></p>\n<p>点击按钮，刷新页面或者只需要旁边的刷新按钮开始进行记录分析 <a href=\"https://imgtu.com/i/bRjuTA\"><img src=\"https://s1.ax1x.com/2022/03/09/bRjuTA.png\" alt=\"bRjuTA.png\"></a></p>\n<h2 id=\"操作设置栏-controls\"><a href=\"#操作设置栏-controls\" class=\"headerlink\" title=\"操作设置栏 controls\"></a>操作设置栏 controls</h2><ul>\n<li>可以通过这个下拉框看到之前的分析数据</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/bRjI1K\"><img src=\"https://s1.ax1x.com/2022/03/09/bRjI1K.png\" alt=\"bRjI1K.png\"></a></p>\n<ul>\n<li>其他配置</li>\n</ul>\n<p><a href=\"https://imgtu.com/i/bRvDUA\"><img src=\"https://s1.ax1x.com/2022/03/09/bRvDUA.png\" alt=\"bRvDUA.png\"></a></p>\n<h2 id=\"页面性能的高级汇总-overview\"><a href=\"#页面性能的高级汇总-overview\" class=\"headerlink\" title=\"页面性能的高级汇总 overview\"></a>页面性能的高级汇总 overview</h2><p><a href=\"https://imgtu.com/i/bRzmmF\"><img src=\"https://s1.ax1x.com/2022/03/09/bRzmmF.png\" alt=\"bRzmmF.png\"></a> <a href=\"https://imgtu.com/i/bWF68H\"><img src=\"https://s1.ax1x.com/2022/03/09/bWF68H.png\" alt=\"bWF68H.png\"></a></p>\n<ul>\n<li>颜色表示<blockquote>\n<p><font color=#87CEFA>HTML</font></p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><font color=yellow>脚本</font></p>\n</blockquote>\n<blockquote>\n<p><font color=#9370DB>样式</font></p>\n</blockquote>\n<blockquote>\n<p><font color=green>媒体资源</font></p>\n</blockquote>\n<blockquote>\n<p><font color=gray>其他资源</font></p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FPS，帧数</td>\n<td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td>\n</tr>\n<tr>\n<td>CPU，CPU 资源</td>\n<td>指示消耗 CPU 资源的事件类型</td>\n</tr>\n<tr>\n<td>NET，网络请求</td>\n<td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td>\n</tr>\n</tbody></table>\n<p><a href=\"https://imgtu.com/i/bWCE4J\"><img src=\"https://s1.ax1x.com/2022/03/09/bWCE4J.png\" alt=\"bWCE4J.png\"></a></p>\n<h2 id=\"火焰图：-CPU-堆叠可视化\"><a href=\"#火焰图：-CPU-堆叠可视化\" class=\"headerlink\" title=\"火焰图： CPU 堆叠可视化\"></a>火焰图： CPU 堆叠可视化</h2><p><a href=\"https://imgtu.com/i/bWEmgH\"><img src=\"https://s1.ax1x.com/2022/03/09/bWEmgH.png\" alt=\"bWEmgH.png\"></a></p>\n<ul>\n<li>Timing</li>\n</ul>\n<blockquote>\n<p>FCP: First Contentful Paint，白屏时间，第一个元素出现的时间</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://zhuanlan.zhihu.com/p/174837488\">LCP</a>: Largest Contentful Paint，视窗最大可见图片或者文本块的渲染时间</p>\n</blockquote>\n<blockquote>\n<p><a href=\"https://blog.csdn.net/qiwoo_weekly/article/details/98818202\">FMP</a>: First Meaningful Paint，首次有效绘制时间，页面的“主要内容”开始出现在屏幕上的时间点</p>\n</blockquote>\n<blockquote>\n<p>DCL: DOMContentLoaded Event，dom 加载完毕时间</p>\n</blockquote>\n<blockquote>\n<p>L: Onload Event，完全加载完毕时间</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Network</td>\n<td>资源加载顺序及时长</td>\n</tr>\n<tr>\n<td>Main</td>\n<td>渲染进程中主线程的执行记录，点击 main 可以看到某个任务执行的具体情况<a href=\"https://imgtu.com/i/bWV5Os\"><img src=\"https://s1.ax1x.com/2022/03/09/bWV5Os.png\" alt=\"bWV5Os.png\"></a></td>\n</tr>\n<tr>\n<td>Timings</td>\n<td>用户交互操作，比如点击鼠标、输入文字、动画等</td>\n</tr>\n<tr>\n<td>Compositor</td>\n<td>r 合成线程的执行记录，用来记录 html 绘制阶段 (Paint)结束后的图层合成操</td>\n</tr>\n<tr>\n<td>Raster</td>\n<td>光栅化线程池，用来让 GPU 执行光栅化的任务</td>\n</tr>\n<tr>\n<td>GPU</td>\n<td>GPU 进程主线程的执行过程记录，如 可以直观看到何时启动 GPU 加速</td>\n</tr>\n<tr>\n<td>Frame</td>\n<td>ifream 框架加载详情</td>\n</tr>\n<tr>\n<td>Memory</td>\n<td>不同的时间段的执行情况。页面中的内存使用的情况<a href=\"https://imgtu.com/i/bWZwNV\"><img src=\"https://s1.ax1x.com/2022/03/09/bWZwNV.png\" alt=\"bWZwNV.png\"></a></td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>在火焰图上看到一到三条垂直的虚线。蓝线代表 DOMContentLoaded 事件。 绿线代表首次绘制的时间。 红线代表 load 事件</p>\n</li>\n<li><p>如果是耗时长的 Task，其右上角会标红，这个时候，我们可以选中标红的 Task，然后放大，看其具体的耗时点。放大后，这里可以看到都在做哪些操作，哪些函数耗时了多少,这里代码有压缩，看到的是压缩后的函数名。然后我们点击一下某个函数，在面板最下面，就会出现代码的信息，是哪个函数，耗时多少，在哪个文件上的第几行等。这样我们就很方便地定位到耗时函数了。<br><a href=\"https://imgtu.com/i/bWu7JP\"><img src=\"https://s1.ax1x.com/2022/03/09/bWu7JP.png\" alt=\"bWu7JP.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"Summary性能摘要\"><a href=\"#Summary性能摘要\" class=\"headerlink\" title=\"Summary性能摘要\"></a>Summary性能摘要</h2><p><a href=\"https://imgtu.com/i/bWmDOJ\"><img src=\"https://s1.ax1x.com/2022/03/09/bWmDOJ.png\" alt=\"bWmDOJ.png\"></a></p>\n<ul>\n<li>颜色表示<blockquote>\n<p><font color=#87CEFA>Loading</font>：网络通信和HTML解析</p>\n</blockquote>\n</li>\n</ul>\n<blockquote>\n<p><font color=yellow>Scripting</font>：JavaScript执行</p>\n</blockquote>\n<blockquote>\n<p><font color=#9370DB>Rendering</font>：样式计算和布局，即重排</p>\n</blockquote>\n<blockquote>\n<p><font color=green>Painting</font>：重绘</p>\n</blockquote>\n<blockquote>\n<p><font color=gray>other</font>：其它事件花费的时间</p>\n</blockquote>\n<blockquote>\n<p><font color=white>Idle</font>：空闲时间</p>\n</blockquote>\n<p><a href=\"https://www.cnblogs.com/zjjing/p/9106111.html\">事件包含</a></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><p><a href=\"https://zhuanlan.zhihu.com/p/29879682\">Chrome Performance 使用栗子</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/163474573\">Chrome Performance 页面性能分析指南</a></p>\n<p><a href=\"https://www.jianshu.com/p/b6f87bac5381\">饼状图分析</a></p>\n<p><a href=\"https://www.cnblogs.com/xiaohuochai/p/9182710.html\">performance</a></p>\n"},{"title":"【css】border-raduis","_content":"\n## border-raduis\n\n### 语法\n\n- 只有一个值\n\n表示圆角属性作用在全部四个角上\n\n- 有两个值\n\n第一个作用于左上角和右下角，第二个作用于右上角和左下角\n\n- 三个值\n\n第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角\n\n- 四个值\n\n按照顺时针的方向，左上、右上、右下、左下\n\n### 水平半径和垂直半径\n\n``` css\nborder-left-top-radius: 10px 20px\nborder-raduis：10px / 20px\n```\n表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的\n\n### 重叠曲线\n\nf=min(Lh/Sh, Lv/Sv)\n\nS为半径之和，L为元素宽高，h和v表示方向，f为计算值。\n\nLh：元素宽\n\nSh：垂直方向的半径和\n\nLv：元素高度\n\nSv：水平方向的半径和\n\n如果f计算值小于1，那么所有圆角半径都乘以f\n\neg：\n\n``` css\nborder-top-left-raduis：30px 100%；\nborder-bottom-left-raduis：30px 100%；\nwidth：150px；\nheight：100px；\n```\n左上角和左下角的垂直半径是100%（元素高），水平半径是30px\nf=min（150/60，100/200）=0.5\n\n所以渲染结果为\n\n``` css\nborder-top-left-raduis：15px 50%；\nborder-bottom-left-raduis：15px 50%；\n```\n\n## 渲染细节\n\n如果元素设置了border边框，则圆角半径会被分为内半径和外半径\n\n- padding边缘的圆角大小为设置的border- radius - 边框厚度\n\n- 如果相邻两侧边框厚度不同，则圆角大小将在较厚和较薄边界之间显示平滑过度\n\n- 圆角边框的连接线和直角边框连接线位置一致，但是角度有所不同\n\n- border-raduis不支持负值\n\n- 圆角以外的区域不可点击，无法响应click事件\n\n- borser-radius没有继承性\n\n- 支持transition过渡效果，支持animation动画效果\n","source":"_posts/css/【css】border-raduis.md","raw":"---\ntitle: 【css】border-raduis\ncategories: css\n---\n\n## border-raduis\n\n### 语法\n\n- 只有一个值\n\n表示圆角属性作用在全部四个角上\n\n- 有两个值\n\n第一个作用于左上角和右下角，第二个作用于右上角和左下角\n\n- 三个值\n\n第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角\n\n- 四个值\n\n按照顺时针的方向，左上、右上、右下、左下\n\n### 水平半径和垂直半径\n\n``` css\nborder-left-top-radius: 10px 20px\nborder-raduis：10px / 20px\n```\n表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的\n\n### 重叠曲线\n\nf=min(Lh/Sh, Lv/Sv)\n\nS为半径之和，L为元素宽高，h和v表示方向，f为计算值。\n\nLh：元素宽\n\nSh：垂直方向的半径和\n\nLv：元素高度\n\nSv：水平方向的半径和\n\n如果f计算值小于1，那么所有圆角半径都乘以f\n\neg：\n\n``` css\nborder-top-left-raduis：30px 100%；\nborder-bottom-left-raduis：30px 100%；\nwidth：150px；\nheight：100px；\n```\n左上角和左下角的垂直半径是100%（元素高），水平半径是30px\nf=min（150/60，100/200）=0.5\n\n所以渲染结果为\n\n``` css\nborder-top-left-raduis：15px 50%；\nborder-bottom-left-raduis：15px 50%；\n```\n\n## 渲染细节\n\n如果元素设置了border边框，则圆角半径会被分为内半径和外半径\n\n- padding边缘的圆角大小为设置的border- radius - 边框厚度\n\n- 如果相邻两侧边框厚度不同，则圆角大小将在较厚和较薄边界之间显示平滑过度\n\n- 圆角边框的连接线和直角边框连接线位置一致，但是角度有所不同\n\n- border-raduis不支持负值\n\n- 圆角以外的区域不可点击，无法响应click事件\n\n- borser-radius没有继承性\n\n- 支持transition过渡效果，支持animation动画效果\n","slug":"css/【css】border-raduis","published":1,"date":"2025-08-13T07:29:09.385Z","updated":"2025-03-06T09:08:26.515Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xe000tbofmf6gec3l2","content":"<h2 id=\"border-raduis\"><a href=\"#border-raduis\" class=\"headerlink\" title=\"border-raduis\"></a>border-raduis</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>只有一个值</li>\n</ul>\n<p>表示圆角属性作用在全部四个角上</p>\n<ul>\n<li>有两个值</li>\n</ul>\n<p>第一个作用于左上角和右下角，第二个作用于右上角和左下角</p>\n<ul>\n<li>三个值</li>\n</ul>\n<p>第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角</p>\n<ul>\n<li>四个值</li>\n</ul>\n<p>按照顺时针的方向，左上、右上、右下、左下</p>\n<h3 id=\"水平半径和垂直半径\"><a href=\"#水平半径和垂直半径\" class=\"headerlink\" title=\"水平半径和垂直半径\"></a>水平半径和垂直半径</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-left</span>-<span class=\"attribute\">top</span>-radius: <span class=\"number\">10px</span> <span class=\"number\">20px</span></span><br><span class=\"line\">border-raduis：<span class=\"number\">10px</span> / <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的</p>\n<h3 id=\"重叠曲线\"><a href=\"#重叠曲线\" class=\"headerlink\" title=\"重叠曲线\"></a>重叠曲线</h3><p>f&#x3D;min(Lh&#x2F;Sh, Lv&#x2F;Sv)</p>\n<p>S为半径之和，L为元素宽高，h和v表示方向，f为计算值。</p>\n<p>Lh：元素宽</p>\n<p>Sh：垂直方向的半径和</p>\n<p>Lv：元素高度</p>\n<p>Sv：水平方向的半径和</p>\n<p>如果f计算值小于1，那么所有圆角半径都乘以f</p>\n<p>eg：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">width</span>：<span class=\"number\">150px</span>；</span><br><span class=\"line\"><span class=\"attribute\">height</span>：<span class=\"number\">100px</span>；</span><br></pre></td></tr></table></figure>\n<p>左上角和左下角的垂直半径是100%（元素高），水平半径是30px<br>f&#x3D;min（150&#x2F;60，100&#x2F;200）&#x3D;0.5</p>\n<p>所以渲染结果为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"渲染细节\"><a href=\"#渲染细节\" class=\"headerlink\" title=\"渲染细节\"></a>渲染细节</h2><p>如果元素设置了border边框，则圆角半径会被分为内半径和外半径</p>\n<ul>\n<li><p>padding边缘的圆角大小为设置的border- radius - 边框厚度</p>\n</li>\n<li><p>如果相邻两侧边框厚度不同，则圆角大小将在较厚和较薄边界之间显示平滑过度</p>\n</li>\n<li><p>圆角边框的连接线和直角边框连接线位置一致，但是角度有所不同</p>\n</li>\n<li><p>border-raduis不支持负值</p>\n</li>\n<li><p>圆角以外的区域不可点击，无法响应click事件</p>\n</li>\n<li><p>borser-radius没有继承性</p>\n</li>\n<li><p>支持transition过渡效果，支持animation动画效果</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"border-raduis\"><a href=\"#border-raduis\" class=\"headerlink\" title=\"border-raduis\"></a>border-raduis</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>只有一个值</li>\n</ul>\n<p>表示圆角属性作用在全部四个角上</p>\n<ul>\n<li>有两个值</li>\n</ul>\n<p>第一个作用于左上角和右下角，第二个作用于右上角和左下角</p>\n<ul>\n<li>三个值</li>\n</ul>\n<p>第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角</p>\n<ul>\n<li>四个值</li>\n</ul>\n<p>按照顺时针的方向，左上、右上、右下、左下</p>\n<h3 id=\"水平半径和垂直半径\"><a href=\"#水平半径和垂直半径\" class=\"headerlink\" title=\"水平半径和垂直半径\"></a>水平半径和垂直半径</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-left</span>-<span class=\"attribute\">top</span>-radius: <span class=\"number\">10px</span> <span class=\"number\">20px</span></span><br><span class=\"line\">border-raduis：<span class=\"number\">10px</span> / <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的</p>\n<h3 id=\"重叠曲线\"><a href=\"#重叠曲线\" class=\"headerlink\" title=\"重叠曲线\"></a>重叠曲线</h3><p>f&#x3D;min(Lh&#x2F;Sh, Lv&#x2F;Sv)</p>\n<p>S为半径之和，L为元素宽高，h和v表示方向，f为计算值。</p>\n<p>Lh：元素宽</p>\n<p>Sh：垂直方向的半径和</p>\n<p>Lv：元素高度</p>\n<p>Sv：水平方向的半径和</p>\n<p>如果f计算值小于1，那么所有圆角半径都乘以f</p>\n<p>eg：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">width</span>：<span class=\"number\">150px</span>；</span><br><span class=\"line\"><span class=\"attribute\">height</span>：<span class=\"number\">100px</span>；</span><br></pre></td></tr></table></figure>\n<p>左上角和左下角的垂直半径是100%（元素高），水平半径是30px<br>f&#x3D;min（150&#x2F;60，100&#x2F;200）&#x3D;0.5</p>\n<p>所以渲染结果为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"渲染细节\"><a href=\"#渲染细节\" class=\"headerlink\" title=\"渲染细节\"></a>渲染细节</h2><p>如果元素设置了border边框，则圆角半径会被分为内半径和外半径</p>\n<ul>\n<li><p>padding边缘的圆角大小为设置的border- radius - 边框厚度</p>\n</li>\n<li><p>如果相邻两侧边框厚度不同，则圆角大小将在较厚和较薄边界之间显示平滑过度</p>\n</li>\n<li><p>圆角边框的连接线和直角边框连接线位置一致，但是角度有所不同</p>\n</li>\n<li><p>border-raduis不支持负值</p>\n</li>\n<li><p>圆角以外的区域不可点击，无法响应click事件</p>\n</li>\n<li><p>borser-radius没有继承性</p>\n</li>\n<li><p>支持transition过渡效果，支持animation动画效果</p>\n</li>\n</ul>\n"},{"title":"【devTools】layers","_content":"\n# 【devTools】layers\n\n## 元素绘制\n\n可以查看哪些元素正在绘制\n\n### 打开\n\n- 在devtools页面按esc，点击左上角的三个点，打开rendering分页\n\n- 勾选对应的选项\n\n### 页面表现\n\n- 勾选了paint flashing\n\n元素正在绘制时，会由绿色小框表示\n\n[![pCVha38.png](https://s1.ax1x.com/2023/06/11/pCVha38.png)](https://imgse.com/i/pCVha38)\n\n- 勾选layer borders\n\n可以显示每个图层的区域范围\n\n[![pCVh4u4.png](https://s1.ax1x.com/2023/06/11/pCVh4u4.png)](https://imgse.com/i/pCVh4u4)\n\n## layers\n\n### 打开\n\n在devtools右上角三个点，点击more tools，点击layers打开layers标签\n\n### 效果\n\n[![pCV4AxS.png](https://s1.ax1x.com/2023/06/11/pCV4AxS.png)](https://imgse.com/i/pCV4AxS)\n\n可以显示当前页面存在哪些图层，对于具体的图层，可以看到其对应的大小、产生原因及内存占有量","source":"_posts/devTools/【devTools】layers.md","raw":"---\ntitle: 【devTools】layers\ncategories: 浏览器\n---\n\n# 【devTools】layers\n\n## 元素绘制\n\n可以查看哪些元素正在绘制\n\n### 打开\n\n- 在devtools页面按esc，点击左上角的三个点，打开rendering分页\n\n- 勾选对应的选项\n\n### 页面表现\n\n- 勾选了paint flashing\n\n元素正在绘制时，会由绿色小框表示\n\n[![pCVha38.png](https://s1.ax1x.com/2023/06/11/pCVha38.png)](https://imgse.com/i/pCVha38)\n\n- 勾选layer borders\n\n可以显示每个图层的区域范围\n\n[![pCVh4u4.png](https://s1.ax1x.com/2023/06/11/pCVh4u4.png)](https://imgse.com/i/pCVh4u4)\n\n## layers\n\n### 打开\n\n在devtools右上角三个点，点击more tools，点击layers打开layers标签\n\n### 效果\n\n[![pCV4AxS.png](https://s1.ax1x.com/2023/06/11/pCV4AxS.png)](https://imgse.com/i/pCV4AxS)\n\n可以显示当前页面存在哪些图层，对于具体的图层，可以看到其对应的大小、产生原因及内存占有量","slug":"devTools/【devTools】layers","published":1,"date":"2025-08-13T07:29:09.414Z","updated":"2025-03-06T09:08:26.518Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xf000xbofmgt5ggql0","content":"<h1 id=\"【devTools】layers\"><a href=\"#【devTools】layers\" class=\"headerlink\" title=\"【devTools】layers\"></a>【devTools】layers</h1><h2 id=\"元素绘制\"><a href=\"#元素绘制\" class=\"headerlink\" title=\"元素绘制\"></a>元素绘制</h2><p>可以查看哪些元素正在绘制</p>\n<h3 id=\"打开\"><a href=\"#打开\" class=\"headerlink\" title=\"打开\"></a>打开</h3><ul>\n<li><p>在devtools页面按esc，点击左上角的三个点，打开rendering分页</p>\n</li>\n<li><p>勾选对应的选项</p>\n</li>\n</ul>\n<h3 id=\"页面表现\"><a href=\"#页面表现\" class=\"headerlink\" title=\"页面表现\"></a>页面表现</h3><ul>\n<li>勾选了paint flashing</li>\n</ul>\n<p>元素正在绘制时，会由绿色小框表示</p>\n<p><a href=\"https://imgse.com/i/pCVha38\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVha38.png\" alt=\"pCVha38.png\"></a></p>\n<ul>\n<li>勾选layer borders</li>\n</ul>\n<p>可以显示每个图层的区域范围</p>\n<p><a href=\"https://imgse.com/i/pCVh4u4\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVh4u4.png\" alt=\"pCVh4u4.png\"></a></p>\n<h2 id=\"layers\"><a href=\"#layers\" class=\"headerlink\" title=\"layers\"></a>layers</h2><h3 id=\"打开-1\"><a href=\"#打开-1\" class=\"headerlink\" title=\"打开\"></a>打开</h3><p>在devtools右上角三个点，点击more tools，点击layers打开layers标签</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><a href=\"https://imgse.com/i/pCV4AxS\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV4AxS.png\" alt=\"pCV4AxS.png\"></a></p>\n<p>可以显示当前页面存在哪些图层，对于具体的图层，可以看到其对应的大小、产生原因及内存占有量</p>\n","excerpt":"","more":"<h1 id=\"【devTools】layers\"><a href=\"#【devTools】layers\" class=\"headerlink\" title=\"【devTools】layers\"></a>【devTools】layers</h1><h2 id=\"元素绘制\"><a href=\"#元素绘制\" class=\"headerlink\" title=\"元素绘制\"></a>元素绘制</h2><p>可以查看哪些元素正在绘制</p>\n<h3 id=\"打开\"><a href=\"#打开\" class=\"headerlink\" title=\"打开\"></a>打开</h3><ul>\n<li><p>在devtools页面按esc，点击左上角的三个点，打开rendering分页</p>\n</li>\n<li><p>勾选对应的选项</p>\n</li>\n</ul>\n<h3 id=\"页面表现\"><a href=\"#页面表现\" class=\"headerlink\" title=\"页面表现\"></a>页面表现</h3><ul>\n<li>勾选了paint flashing</li>\n</ul>\n<p>元素正在绘制时，会由绿色小框表示</p>\n<p><a href=\"https://imgse.com/i/pCVha38\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVha38.png\" alt=\"pCVha38.png\"></a></p>\n<ul>\n<li>勾选layer borders</li>\n</ul>\n<p>可以显示每个图层的区域范围</p>\n<p><a href=\"https://imgse.com/i/pCVh4u4\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVh4u4.png\" alt=\"pCVh4u4.png\"></a></p>\n<h2 id=\"layers\"><a href=\"#layers\" class=\"headerlink\" title=\"layers\"></a>layers</h2><h3 id=\"打开-1\"><a href=\"#打开-1\" class=\"headerlink\" title=\"打开\"></a>打开</h3><p>在devtools右上角三个点，点击more tools，点击layers打开layers标签</p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><a href=\"https://imgse.com/i/pCV4AxS\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV4AxS.png\" alt=\"pCV4AxS.png\"></a></p>\n<p>可以显示当前页面存在哪些图层，对于具体的图层，可以看到其对应的大小、产生原因及内存占有量</p>\n"},{"title":"【devTools】performance","time":"2023-06-11T02:59:41.000Z","_content":"# Performance面板\n\n## 开始\n\n### 前提\n\n- 保持环境整洁，例如使用隐私模式、清除缓存等\n\n- 确定目标，在执行过程中，尽可能缩短持续时间，避免额外的操作等\n\n### 开始记录\n\n- 打开devTools，切换到Performance面板\n\n- 点击左上角的圆形按钮开始记录\n\n[![pCVcIH0.png](https://s1.ax1x.com/2023/06/11/pCVcIH0.png)](https://imgse.com/i/pCVcIH0)\n\n- 记录过程种可以做一些交互\n\n- 点击stop停止监测\n\n### 生成内容\n\n[![pCVvNc9.png](https://s1.ax1x.com/2023/06/11/pCVvNc9.png)](https://imgse.com/i/pCVvNc9)\n\n- 工具栏：与整体面板有关的操作选项和设置\n\n- overview图表：可视化呈现完整时间轴的基本信息\n\n- Activities：将性能信息以方块式的Activity为单位显示在不同种类的列表中\n\n## 工具栏\n\n[![pCVvshD.png](https://s1.ax1x.com/2023/06/11/pCVvshD.png)](https://imgse.com/i/pCVvshD)\n\n### Disabled Javascript Call Stack\n\nMain列表不会显示js的Call stack信息\n\n### Enable advanced paint instrumentation\n\n记录绘制性能的详细信息，并显示在\n\n- Frames：Frame activity的Layers分页\n\n- Main：Paint activity的Paint Profiler分页\n\n## Overview图表\n\n[![pCVv79g.png](https://s1.ax1x.com/2023/06/11/pCVv79g.png)](https://imgse.com/i/pCVv79g)\n\n| 名称 | 描述 |\n| --- | --- |\n| FPS，帧数 | <font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿 |\n| CPU，CPU 资源 | 指示消耗 CPU 资源的事件类型 |\n| NET，网络请求 | 每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据 |\n\n### FPS\n\n绿色方块：每秒帧数的变化，红色、粉色横条为低帧数警告，即可能会让用户感受到卡顿的部分\n\n### CPU\n\n- 灰色：浏览器内部的工作\n\n- 蓝色：HTML请求、文件解析\n\n- 黄色：事件、js\n\n- 绿色：图像处理、画面绘制\n\n- 紫色：样式计算\n\n### NET\n\n- 蓝色：有请求正在执行\n\n- 深色：优先权较高的请求\n\n## Activities\n\n### Main\n\n[![pCVxZE6.png](https://s1.ax1x.com/2023/06/11/pCVxZE6.png)](https://imgse.com/i/pCVxZE6)\n\n- 作用\n\n  显示主线程所有的任务，持续事件超过50ms（长任务）的任务会以红色虚线和右上角的三角形标识\n\n任务底下的Activities依据类型有不同颜色，黄色的js Activity底下以随机颜色显示Call Stack Activities\n\n### Network\n\n[![pCVx5rR.png](https://s1.ax1x.com/2023/06/11/pCVx5rR.png)](https://imgse.com/i/pCVx5rR)\n\n- 左侧的细线：连接至发送请求前\n\n- 浅色区域：等待服务器响应\n\n- 深色区域：下载资源\n\n- 右侧的细线：解析资源\n\n- 左上角的小方块：请求优先级，深色表示高，浅色表示浅\n\n### Frames\n\n显示每一帧画面的详细信息\n\n### Timeings\n\n显示网页使用的重要时间点\n\n- DCL：HTML已经加载且解析完毕\n\n- FP：绘制出默认背景颜色之外的任何内容\n\n- FCP：绘制出任何文字、图片、有颜色的canvas时\n\n- LCP：绘制出页面最大的内容时\n\n- L：解析HTML期间请求的资源都载入完成时\n\n### Experience\n\n显示所有元素位移并计算分数，越低表示页面稳定性越高\n\n### GPU\n\n显示GPU的使用事件\n\n### Raster\n\n定义：浏览器渲染流程中Paint阶段的一环\n\n作用：显示产生Raster时各个线程的信息\n\n## 信息面板：\n\n- summary：显示activity的持续时间，并将期间发生的其他activities分类显示\n\n- botton-up：将同一种activity的运行时间加总\n\n- call tree：以触发关系自上而下显示activities，最上方的称为root activity，是下面各个activities的起点\n\n- event log：以时间顺序显示activities\n\n> 注：activity占用主线程超过50ms会被加上红色三角形，成为long task\n\n### Summary\n\n显示该Activity的持续事件，并将期间发生的其他Activists分类显示\n\n### call tree\n\n[![pCV2ztK.png](https://s1.ax1x.com/2023/06/11/pCV2ztK.png)](https://imgse.com/i/pCV2ztK)\n\ncall tree会显示任务由哪些activities组成，若activity的类型为程序代码，则层层展开可以看到函数的call stack\n\n- self time\n  \n  函数本身的运行时间，并不包含函数执行其他函数的时间\n\n- total time\n\n  函数本身和其下所有函数的运行时间的总和\n\n### bottom-up\n\n会将同一种activity的运行时间加总，因此分页中self time较长的函数通常是性能瓶颈的来源\n\n注：总运行时间长也可能是因为执行次数多\n\n### Event Log\n\n以触发事件顺序显示Activities\n\n## performance monitor\n\n### 打开\n\n1、在devtool按esc打开drawer，在左上角三个点打开\n\n2、在devtools右上角的三个点，打开more tools打开\n\n### 作用\n\n实时监测性能信息，用于检查特定功能是否存在内存泄漏的问题，实时反应内存用量的趋势。一般会把重点放在js heap size（js内存使用占有量）和dom tools\n\n[![pCVf0T1.png](https://s1.ax1x.com/2023/06/11/pCVf0T1.png)](https://imgse.com/i/pCVf0T1)\n\n## Web Vitals\n\n### LCP：前端性能指标，用于表示加载速度\n\n可以在performance的timeing中可以看到\n\n[![pCV4QP0.png](https://s1.ax1x.com/2023/06/11/pCV4QP0.png)](https://imgse.com/i/pCV4QP0)\n\n### FID：表示首次输入延迟\n\n通过rendering分页的Core Web Vitals来判断\n\n[![pCV45z8.png](https://s1.ax1x.com/2023/06/11/pCV45z8.png)](https://imgse.com/i/pCV45z8)\n\n### CLS：表示累计布局偏移\n\n通过performance的Experience的layout shift标签","source":"_posts/devTools/【devTools】performance.md","raw":"---\ntitle: 【devTools】performance\ntime: 2023-06-11 10:59:41\ncategories: 浏览器\n---\n# Performance面板\n\n## 开始\n\n### 前提\n\n- 保持环境整洁，例如使用隐私模式、清除缓存等\n\n- 确定目标，在执行过程中，尽可能缩短持续时间，避免额外的操作等\n\n### 开始记录\n\n- 打开devTools，切换到Performance面板\n\n- 点击左上角的圆形按钮开始记录\n\n[![pCVcIH0.png](https://s1.ax1x.com/2023/06/11/pCVcIH0.png)](https://imgse.com/i/pCVcIH0)\n\n- 记录过程种可以做一些交互\n\n- 点击stop停止监测\n\n### 生成内容\n\n[![pCVvNc9.png](https://s1.ax1x.com/2023/06/11/pCVvNc9.png)](https://imgse.com/i/pCVvNc9)\n\n- 工具栏：与整体面板有关的操作选项和设置\n\n- overview图表：可视化呈现完整时间轴的基本信息\n\n- Activities：将性能信息以方块式的Activity为单位显示在不同种类的列表中\n\n## 工具栏\n\n[![pCVvshD.png](https://s1.ax1x.com/2023/06/11/pCVvshD.png)](https://imgse.com/i/pCVvshD)\n\n### Disabled Javascript Call Stack\n\nMain列表不会显示js的Call stack信息\n\n### Enable advanced paint instrumentation\n\n记录绘制性能的详细信息，并显示在\n\n- Frames：Frame activity的Layers分页\n\n- Main：Paint activity的Paint Profiler分页\n\n## Overview图表\n\n[![pCVv79g.png](https://s1.ax1x.com/2023/06/11/pCVv79g.png)](https://imgse.com/i/pCVv79g)\n\n| 名称 | 描述 |\n| --- | --- |\n| FPS，帧数 | <font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿 |\n| CPU，CPU 资源 | 指示消耗 CPU 资源的事件类型 |\n| NET，网络请求 | 每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据 |\n\n### FPS\n\n绿色方块：每秒帧数的变化，红色、粉色横条为低帧数警告，即可能会让用户感受到卡顿的部分\n\n### CPU\n\n- 灰色：浏览器内部的工作\n\n- 蓝色：HTML请求、文件解析\n\n- 黄色：事件、js\n\n- 绿色：图像处理、画面绘制\n\n- 紫色：样式计算\n\n### NET\n\n- 蓝色：有请求正在执行\n\n- 深色：优先权较高的请求\n\n## Activities\n\n### Main\n\n[![pCVxZE6.png](https://s1.ax1x.com/2023/06/11/pCVxZE6.png)](https://imgse.com/i/pCVxZE6)\n\n- 作用\n\n  显示主线程所有的任务，持续事件超过50ms（长任务）的任务会以红色虚线和右上角的三角形标识\n\n任务底下的Activities依据类型有不同颜色，黄色的js Activity底下以随机颜色显示Call Stack Activities\n\n### Network\n\n[![pCVx5rR.png](https://s1.ax1x.com/2023/06/11/pCVx5rR.png)](https://imgse.com/i/pCVx5rR)\n\n- 左侧的细线：连接至发送请求前\n\n- 浅色区域：等待服务器响应\n\n- 深色区域：下载资源\n\n- 右侧的细线：解析资源\n\n- 左上角的小方块：请求优先级，深色表示高，浅色表示浅\n\n### Frames\n\n显示每一帧画面的详细信息\n\n### Timeings\n\n显示网页使用的重要时间点\n\n- DCL：HTML已经加载且解析完毕\n\n- FP：绘制出默认背景颜色之外的任何内容\n\n- FCP：绘制出任何文字、图片、有颜色的canvas时\n\n- LCP：绘制出页面最大的内容时\n\n- L：解析HTML期间请求的资源都载入完成时\n\n### Experience\n\n显示所有元素位移并计算分数，越低表示页面稳定性越高\n\n### GPU\n\n显示GPU的使用事件\n\n### Raster\n\n定义：浏览器渲染流程中Paint阶段的一环\n\n作用：显示产生Raster时各个线程的信息\n\n## 信息面板：\n\n- summary：显示activity的持续时间，并将期间发生的其他activities分类显示\n\n- botton-up：将同一种activity的运行时间加总\n\n- call tree：以触发关系自上而下显示activities，最上方的称为root activity，是下面各个activities的起点\n\n- event log：以时间顺序显示activities\n\n> 注：activity占用主线程超过50ms会被加上红色三角形，成为long task\n\n### Summary\n\n显示该Activity的持续事件，并将期间发生的其他Activists分类显示\n\n### call tree\n\n[![pCV2ztK.png](https://s1.ax1x.com/2023/06/11/pCV2ztK.png)](https://imgse.com/i/pCV2ztK)\n\ncall tree会显示任务由哪些activities组成，若activity的类型为程序代码，则层层展开可以看到函数的call stack\n\n- self time\n  \n  函数本身的运行时间，并不包含函数执行其他函数的时间\n\n- total time\n\n  函数本身和其下所有函数的运行时间的总和\n\n### bottom-up\n\n会将同一种activity的运行时间加总，因此分页中self time较长的函数通常是性能瓶颈的来源\n\n注：总运行时间长也可能是因为执行次数多\n\n### Event Log\n\n以触发事件顺序显示Activities\n\n## performance monitor\n\n### 打开\n\n1、在devtool按esc打开drawer，在左上角三个点打开\n\n2、在devtools右上角的三个点，打开more tools打开\n\n### 作用\n\n实时监测性能信息，用于检查特定功能是否存在内存泄漏的问题，实时反应内存用量的趋势。一般会把重点放在js heap size（js内存使用占有量）和dom tools\n\n[![pCVf0T1.png](https://s1.ax1x.com/2023/06/11/pCVf0T1.png)](https://imgse.com/i/pCVf0T1)\n\n## Web Vitals\n\n### LCP：前端性能指标，用于表示加载速度\n\n可以在performance的timeing中可以看到\n\n[![pCV4QP0.png](https://s1.ax1x.com/2023/06/11/pCV4QP0.png)](https://imgse.com/i/pCV4QP0)\n\n### FID：表示首次输入延迟\n\n通过rendering分页的Core Web Vitals来判断\n\n[![pCV45z8.png](https://s1.ax1x.com/2023/06/11/pCV45z8.png)](https://imgse.com/i/pCV45z8)\n\n### CLS：表示累计布局偏移\n\n通过performance的Experience的layout shift标签","slug":"devTools/【devTools】performance","published":1,"date":"2025-08-13T07:29:09.417Z","updated":"2025-03-06T09:08:26.518Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xg000ybofm8j7dgl2i","content":"<h1 id=\"Performance面板\"><a href=\"#Performance面板\" class=\"headerlink\" title=\"Performance面板\"></a>Performance面板</h1><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ul>\n<li><p>保持环境整洁，例如使用隐私模式、清除缓存等</p>\n</li>\n<li><p>确定目标，在执行过程中，尽可能缩短持续时间，避免额外的操作等</p>\n</li>\n</ul>\n<h3 id=\"开始记录\"><a href=\"#开始记录\" class=\"headerlink\" title=\"开始记录\"></a>开始记录</h3><ul>\n<li><p>打开devTools，切换到Performance面板</p>\n</li>\n<li><p>点击左上角的圆形按钮开始记录</p>\n</li>\n</ul>\n<p><a href=\"https://imgse.com/i/pCVcIH0\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVcIH0.png\" alt=\"pCVcIH0.png\"></a></p>\n<ul>\n<li><p>记录过程种可以做一些交互</p>\n</li>\n<li><p>点击stop停止监测</p>\n</li>\n</ul>\n<h3 id=\"生成内容\"><a href=\"#生成内容\" class=\"headerlink\" title=\"生成内容\"></a>生成内容</h3><p><a href=\"https://imgse.com/i/pCVvNc9\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVvNc9.png\" alt=\"pCVvNc9.png\"></a></p>\n<ul>\n<li><p>工具栏：与整体面板有关的操作选项和设置</p>\n</li>\n<li><p>overview图表：可视化呈现完整时间轴的基本信息</p>\n</li>\n<li><p>Activities：将性能信息以方块式的Activity为单位显示在不同种类的列表中</p>\n</li>\n</ul>\n<h2 id=\"工具栏\"><a href=\"#工具栏\" class=\"headerlink\" title=\"工具栏\"></a>工具栏</h2><p><a href=\"https://imgse.com/i/pCVvshD\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVvshD.png\" alt=\"pCVvshD.png\"></a></p>\n<h3 id=\"Disabled-Javascript-Call-Stack\"><a href=\"#Disabled-Javascript-Call-Stack\" class=\"headerlink\" title=\"Disabled Javascript Call Stack\"></a>Disabled Javascript Call Stack</h3><p>Main列表不会显示js的Call stack信息</p>\n<h3 id=\"Enable-advanced-paint-instrumentation\"><a href=\"#Enable-advanced-paint-instrumentation\" class=\"headerlink\" title=\"Enable advanced paint instrumentation\"></a>Enable advanced paint instrumentation</h3><p>记录绘制性能的详细信息，并显示在</p>\n<ul>\n<li><p>Frames：Frame activity的Layers分页</p>\n</li>\n<li><p>Main：Paint activity的Paint Profiler分页</p>\n</li>\n</ul>\n<h2 id=\"Overview图表\"><a href=\"#Overview图表\" class=\"headerlink\" title=\"Overview图表\"></a>Overview图表</h2><p><a href=\"https://imgse.com/i/pCVv79g\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVv79g.png\" alt=\"pCVv79g.png\"></a></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FPS，帧数</td>\n<td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td>\n</tr>\n<tr>\n<td>CPU，CPU 资源</td>\n<td>指示消耗 CPU 资源的事件类型</td>\n</tr>\n<tr>\n<td>NET，网络请求</td>\n<td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"FPS\"><a href=\"#FPS\" class=\"headerlink\" title=\"FPS\"></a>FPS</h3><p>绿色方块：每秒帧数的变化，红色、粉色横条为低帧数警告，即可能会让用户感受到卡顿的部分</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ul>\n<li><p>灰色：浏览器内部的工作</p>\n</li>\n<li><p>蓝色：HTML请求、文件解析</p>\n</li>\n<li><p>黄色：事件、js</p>\n</li>\n<li><p>绿色：图像处理、画面绘制</p>\n</li>\n<li><p>紫色：样式计算</p>\n</li>\n</ul>\n<h3 id=\"NET\"><a href=\"#NET\" class=\"headerlink\" title=\"NET\"></a>NET</h3><ul>\n<li><p>蓝色：有请求正在执行</p>\n</li>\n<li><p>深色：优先权较高的请求</p>\n</li>\n</ul>\n<h2 id=\"Activities\"><a href=\"#Activities\" class=\"headerlink\" title=\"Activities\"></a>Activities</h2><h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><p><a href=\"https://imgse.com/i/pCVxZE6\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVxZE6.png\" alt=\"pCVxZE6.png\"></a></p>\n<ul>\n<li><p>作用</p>\n<p>显示主线程所有的任务，持续事件超过50ms（长任务）的任务会以红色虚线和右上角的三角形标识</p>\n</li>\n</ul>\n<p>任务底下的Activities依据类型有不同颜色，黄色的js Activity底下以随机颜色显示Call Stack Activities</p>\n<h3 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h3><p><a href=\"https://imgse.com/i/pCVx5rR\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVx5rR.png\" alt=\"pCVx5rR.png\"></a></p>\n<ul>\n<li><p>左侧的细线：连接至发送请求前</p>\n</li>\n<li><p>浅色区域：等待服务器响应</p>\n</li>\n<li><p>深色区域：下载资源</p>\n</li>\n<li><p>右侧的细线：解析资源</p>\n</li>\n<li><p>左上角的小方块：请求优先级，深色表示高，浅色表示浅</p>\n</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><p>显示每一帧画面的详细信息</p>\n<h3 id=\"Timeings\"><a href=\"#Timeings\" class=\"headerlink\" title=\"Timeings\"></a>Timeings</h3><p>显示网页使用的重要时间点</p>\n<ul>\n<li><p>DCL：HTML已经加载且解析完毕</p>\n</li>\n<li><p>FP：绘制出默认背景颜色之外的任何内容</p>\n</li>\n<li><p>FCP：绘制出任何文字、图片、有颜色的canvas时</p>\n</li>\n<li><p>LCP：绘制出页面最大的内容时</p>\n</li>\n<li><p>L：解析HTML期间请求的资源都载入完成时</p>\n</li>\n</ul>\n<h3 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h3><p>显示所有元素位移并计算分数，越低表示页面稳定性越高</p>\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><p>显示GPU的使用事件</p>\n<h3 id=\"Raster\"><a href=\"#Raster\" class=\"headerlink\" title=\"Raster\"></a>Raster</h3><p>定义：浏览器渲染流程中Paint阶段的一环</p>\n<p>作用：显示产生Raster时各个线程的信息</p>\n<h2 id=\"信息面板：\"><a href=\"#信息面板：\" class=\"headerlink\" title=\"信息面板：\"></a>信息面板：</h2><ul>\n<li><p>summary：显示activity的持续时间，并将期间发生的其他activities分类显示</p>\n</li>\n<li><p>botton-up：将同一种activity的运行时间加总</p>\n</li>\n<li><p>call tree：以触发关系自上而下显示activities，最上方的称为root activity，是下面各个activities的起点</p>\n</li>\n<li><p>event log：以时间顺序显示activities</p>\n</li>\n</ul>\n<blockquote>\n<p>注：activity占用主线程超过50ms会被加上红色三角形，成为long task</p>\n</blockquote>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>显示该Activity的持续事件，并将期间发生的其他Activists分类显示</p>\n<h3 id=\"call-tree\"><a href=\"#call-tree\" class=\"headerlink\" title=\"call tree\"></a>call tree</h3><p><a href=\"https://imgse.com/i/pCV2ztK\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV2ztK.png\" alt=\"pCV2ztK.png\"></a></p>\n<p>call tree会显示任务由哪些activities组成，若activity的类型为程序代码，则层层展开可以看到函数的call stack</p>\n<ul>\n<li><p>self time</p>\n<p>函数本身的运行时间，并不包含函数执行其他函数的时间</p>\n</li>\n<li><p>total time</p>\n<p>函数本身和其下所有函数的运行时间的总和</p>\n</li>\n</ul>\n<h3 id=\"bottom-up\"><a href=\"#bottom-up\" class=\"headerlink\" title=\"bottom-up\"></a>bottom-up</h3><p>会将同一种activity的运行时间加总，因此分页中self time较长的函数通常是性能瓶颈的来源</p>\n<p>注：总运行时间长也可能是因为执行次数多</p>\n<h3 id=\"Event-Log\"><a href=\"#Event-Log\" class=\"headerlink\" title=\"Event Log\"></a>Event Log</h3><p>以触发事件顺序显示Activities</p>\n<h2 id=\"performance-monitor\"><a href=\"#performance-monitor\" class=\"headerlink\" title=\"performance monitor\"></a>performance monitor</h2><h3 id=\"打开\"><a href=\"#打开\" class=\"headerlink\" title=\"打开\"></a>打开</h3><p>1、在devtool按esc打开drawer，在左上角三个点打开</p>\n<p>2、在devtools右上角的三个点，打开more tools打开</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>实时监测性能信息，用于检查特定功能是否存在内存泄漏的问题，实时反应内存用量的趋势。一般会把重点放在js heap size（js内存使用占有量）和dom tools</p>\n<p><a href=\"https://imgse.com/i/pCVf0T1\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVf0T1.png\" alt=\"pCVf0T1.png\"></a></p>\n<h2 id=\"Web-Vitals\"><a href=\"#Web-Vitals\" class=\"headerlink\" title=\"Web Vitals\"></a>Web Vitals</h2><h3 id=\"LCP：前端性能指标，用于表示加载速度\"><a href=\"#LCP：前端性能指标，用于表示加载速度\" class=\"headerlink\" title=\"LCP：前端性能指标，用于表示加载速度\"></a>LCP：前端性能指标，用于表示加载速度</h3><p>可以在performance的timeing中可以看到</p>\n<p><a href=\"https://imgse.com/i/pCV4QP0\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV4QP0.png\" alt=\"pCV4QP0.png\"></a></p>\n<h3 id=\"FID：表示首次输入延迟\"><a href=\"#FID：表示首次输入延迟\" class=\"headerlink\" title=\"FID：表示首次输入延迟\"></a>FID：表示首次输入延迟</h3><p>通过rendering分页的Core Web Vitals来判断</p>\n<p><a href=\"https://imgse.com/i/pCV45z8\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV45z8.png\" alt=\"pCV45z8.png\"></a></p>\n<h3 id=\"CLS：表示累计布局偏移\"><a href=\"#CLS：表示累计布局偏移\" class=\"headerlink\" title=\"CLS：表示累计布局偏移\"></a>CLS：表示累计布局偏移</h3><p>通过performance的Experience的layout shift标签</p>\n","excerpt":"","more":"<h1 id=\"Performance面板\"><a href=\"#Performance面板\" class=\"headerlink\" title=\"Performance面板\"></a>Performance面板</h1><h2 id=\"开始\"><a href=\"#开始\" class=\"headerlink\" title=\"开始\"></a>开始</h2><h3 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h3><ul>\n<li><p>保持环境整洁，例如使用隐私模式、清除缓存等</p>\n</li>\n<li><p>确定目标，在执行过程中，尽可能缩短持续时间，避免额外的操作等</p>\n</li>\n</ul>\n<h3 id=\"开始记录\"><a href=\"#开始记录\" class=\"headerlink\" title=\"开始记录\"></a>开始记录</h3><ul>\n<li><p>打开devTools，切换到Performance面板</p>\n</li>\n<li><p>点击左上角的圆形按钮开始记录</p>\n</li>\n</ul>\n<p><a href=\"https://imgse.com/i/pCVcIH0\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVcIH0.png\" alt=\"pCVcIH0.png\"></a></p>\n<ul>\n<li><p>记录过程种可以做一些交互</p>\n</li>\n<li><p>点击stop停止监测</p>\n</li>\n</ul>\n<h3 id=\"生成内容\"><a href=\"#生成内容\" class=\"headerlink\" title=\"生成内容\"></a>生成内容</h3><p><a href=\"https://imgse.com/i/pCVvNc9\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVvNc9.png\" alt=\"pCVvNc9.png\"></a></p>\n<ul>\n<li><p>工具栏：与整体面板有关的操作选项和设置</p>\n</li>\n<li><p>overview图表：可视化呈现完整时间轴的基本信息</p>\n</li>\n<li><p>Activities：将性能信息以方块式的Activity为单位显示在不同种类的列表中</p>\n</li>\n</ul>\n<h2 id=\"工具栏\"><a href=\"#工具栏\" class=\"headerlink\" title=\"工具栏\"></a>工具栏</h2><p><a href=\"https://imgse.com/i/pCVvshD\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVvshD.png\" alt=\"pCVvshD.png\"></a></p>\n<h3 id=\"Disabled-Javascript-Call-Stack\"><a href=\"#Disabled-Javascript-Call-Stack\" class=\"headerlink\" title=\"Disabled Javascript Call Stack\"></a>Disabled Javascript Call Stack</h3><p>Main列表不会显示js的Call stack信息</p>\n<h3 id=\"Enable-advanced-paint-instrumentation\"><a href=\"#Enable-advanced-paint-instrumentation\" class=\"headerlink\" title=\"Enable advanced paint instrumentation\"></a>Enable advanced paint instrumentation</h3><p>记录绘制性能的详细信息，并显示在</p>\n<ul>\n<li><p>Frames：Frame activity的Layers分页</p>\n</li>\n<li><p>Main：Paint activity的Paint Profiler分页</p>\n</li>\n</ul>\n<h2 id=\"Overview图表\"><a href=\"#Overview图表\" class=\"headerlink\" title=\"Overview图表\"></a>Overview图表</h2><p><a href=\"https://imgse.com/i/pCVv79g\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVv79g.png\" alt=\"pCVv79g.png\"></a></p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>FPS，帧数</td>\n<td><font color=green>绿色</font>竖线越高，FPS 越高。 FPS 图表上的<font color=red>红色</font>块表示长时间帧，很可能会出现卡顿</td>\n</tr>\n<tr>\n<td>CPU，CPU 资源</td>\n<td>指示消耗 CPU 资源的事件类型</td>\n</tr>\n<tr>\n<td>NET，网络请求</td>\n<td>每条彩色横杠表示一种资源。横杠越长，检索资源所需的时间越长。 每个横杠的浅色部分表示等待时间（从请求资源到第一个字节下载完成的时间），可以在屏幕快照下面查看具体的网络请求数据</td>\n</tr>\n</tbody></table>\n<h3 id=\"FPS\"><a href=\"#FPS\" class=\"headerlink\" title=\"FPS\"></a>FPS</h3><p>绿色方块：每秒帧数的变化，红色、粉色横条为低帧数警告，即可能会让用户感受到卡顿的部分</p>\n<h3 id=\"CPU\"><a href=\"#CPU\" class=\"headerlink\" title=\"CPU\"></a>CPU</h3><ul>\n<li><p>灰色：浏览器内部的工作</p>\n</li>\n<li><p>蓝色：HTML请求、文件解析</p>\n</li>\n<li><p>黄色：事件、js</p>\n</li>\n<li><p>绿色：图像处理、画面绘制</p>\n</li>\n<li><p>紫色：样式计算</p>\n</li>\n</ul>\n<h3 id=\"NET\"><a href=\"#NET\" class=\"headerlink\" title=\"NET\"></a>NET</h3><ul>\n<li><p>蓝色：有请求正在执行</p>\n</li>\n<li><p>深色：优先权较高的请求</p>\n</li>\n</ul>\n<h2 id=\"Activities\"><a href=\"#Activities\" class=\"headerlink\" title=\"Activities\"></a>Activities</h2><h3 id=\"Main\"><a href=\"#Main\" class=\"headerlink\" title=\"Main\"></a>Main</h3><p><a href=\"https://imgse.com/i/pCVxZE6\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVxZE6.png\" alt=\"pCVxZE6.png\"></a></p>\n<ul>\n<li><p>作用</p>\n<p>显示主线程所有的任务，持续事件超过50ms（长任务）的任务会以红色虚线和右上角的三角形标识</p>\n</li>\n</ul>\n<p>任务底下的Activities依据类型有不同颜色，黄色的js Activity底下以随机颜色显示Call Stack Activities</p>\n<h3 id=\"Network\"><a href=\"#Network\" class=\"headerlink\" title=\"Network\"></a>Network</h3><p><a href=\"https://imgse.com/i/pCVx5rR\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVx5rR.png\" alt=\"pCVx5rR.png\"></a></p>\n<ul>\n<li><p>左侧的细线：连接至发送请求前</p>\n</li>\n<li><p>浅色区域：等待服务器响应</p>\n</li>\n<li><p>深色区域：下载资源</p>\n</li>\n<li><p>右侧的细线：解析资源</p>\n</li>\n<li><p>左上角的小方块：请求优先级，深色表示高，浅色表示浅</p>\n</li>\n</ul>\n<h3 id=\"Frames\"><a href=\"#Frames\" class=\"headerlink\" title=\"Frames\"></a>Frames</h3><p>显示每一帧画面的详细信息</p>\n<h3 id=\"Timeings\"><a href=\"#Timeings\" class=\"headerlink\" title=\"Timeings\"></a>Timeings</h3><p>显示网页使用的重要时间点</p>\n<ul>\n<li><p>DCL：HTML已经加载且解析完毕</p>\n</li>\n<li><p>FP：绘制出默认背景颜色之外的任何内容</p>\n</li>\n<li><p>FCP：绘制出任何文字、图片、有颜色的canvas时</p>\n</li>\n<li><p>LCP：绘制出页面最大的内容时</p>\n</li>\n<li><p>L：解析HTML期间请求的资源都载入完成时</p>\n</li>\n</ul>\n<h3 id=\"Experience\"><a href=\"#Experience\" class=\"headerlink\" title=\"Experience\"></a>Experience</h3><p>显示所有元素位移并计算分数，越低表示页面稳定性越高</p>\n<h3 id=\"GPU\"><a href=\"#GPU\" class=\"headerlink\" title=\"GPU\"></a>GPU</h3><p>显示GPU的使用事件</p>\n<h3 id=\"Raster\"><a href=\"#Raster\" class=\"headerlink\" title=\"Raster\"></a>Raster</h3><p>定义：浏览器渲染流程中Paint阶段的一环</p>\n<p>作用：显示产生Raster时各个线程的信息</p>\n<h2 id=\"信息面板：\"><a href=\"#信息面板：\" class=\"headerlink\" title=\"信息面板：\"></a>信息面板：</h2><ul>\n<li><p>summary：显示activity的持续时间，并将期间发生的其他activities分类显示</p>\n</li>\n<li><p>botton-up：将同一种activity的运行时间加总</p>\n</li>\n<li><p>call tree：以触发关系自上而下显示activities，最上方的称为root activity，是下面各个activities的起点</p>\n</li>\n<li><p>event log：以时间顺序显示activities</p>\n</li>\n</ul>\n<blockquote>\n<p>注：activity占用主线程超过50ms会被加上红色三角形，成为long task</p>\n</blockquote>\n<h3 id=\"Summary\"><a href=\"#Summary\" class=\"headerlink\" title=\"Summary\"></a>Summary</h3><p>显示该Activity的持续事件，并将期间发生的其他Activists分类显示</p>\n<h3 id=\"call-tree\"><a href=\"#call-tree\" class=\"headerlink\" title=\"call tree\"></a>call tree</h3><p><a href=\"https://imgse.com/i/pCV2ztK\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV2ztK.png\" alt=\"pCV2ztK.png\"></a></p>\n<p>call tree会显示任务由哪些activities组成，若activity的类型为程序代码，则层层展开可以看到函数的call stack</p>\n<ul>\n<li><p>self time</p>\n<p>函数本身的运行时间，并不包含函数执行其他函数的时间</p>\n</li>\n<li><p>total time</p>\n<p>函数本身和其下所有函数的运行时间的总和</p>\n</li>\n</ul>\n<h3 id=\"bottom-up\"><a href=\"#bottom-up\" class=\"headerlink\" title=\"bottom-up\"></a>bottom-up</h3><p>会将同一种activity的运行时间加总，因此分页中self time较长的函数通常是性能瓶颈的来源</p>\n<p>注：总运行时间长也可能是因为执行次数多</p>\n<h3 id=\"Event-Log\"><a href=\"#Event-Log\" class=\"headerlink\" title=\"Event Log\"></a>Event Log</h3><p>以触发事件顺序显示Activities</p>\n<h2 id=\"performance-monitor\"><a href=\"#performance-monitor\" class=\"headerlink\" title=\"performance monitor\"></a>performance monitor</h2><h3 id=\"打开\"><a href=\"#打开\" class=\"headerlink\" title=\"打开\"></a>打开</h3><p>1、在devtool按esc打开drawer，在左上角三个点打开</p>\n<p>2、在devtools右上角的三个点，打开more tools打开</p>\n<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>实时监测性能信息，用于检查特定功能是否存在内存泄漏的问题，实时反应内存用量的趋势。一般会把重点放在js heap size（js内存使用占有量）和dom tools</p>\n<p><a href=\"https://imgse.com/i/pCVf0T1\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVf0T1.png\" alt=\"pCVf0T1.png\"></a></p>\n<h2 id=\"Web-Vitals\"><a href=\"#Web-Vitals\" class=\"headerlink\" title=\"Web Vitals\"></a>Web Vitals</h2><h3 id=\"LCP：前端性能指标，用于表示加载速度\"><a href=\"#LCP：前端性能指标，用于表示加载速度\" class=\"headerlink\" title=\"LCP：前端性能指标，用于表示加载速度\"></a>LCP：前端性能指标，用于表示加载速度</h3><p>可以在performance的timeing中可以看到</p>\n<p><a href=\"https://imgse.com/i/pCV4QP0\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV4QP0.png\" alt=\"pCV4QP0.png\"></a></p>\n<h3 id=\"FID：表示首次输入延迟\"><a href=\"#FID：表示首次输入延迟\" class=\"headerlink\" title=\"FID：表示首次输入延迟\"></a>FID：表示首次输入延迟</h3><p>通过rendering分页的Core Web Vitals来判断</p>\n<p><a href=\"https://imgse.com/i/pCV45z8\"><img src=\"https://s1.ax1x.com/2023/06/11/pCV45z8.png\" alt=\"pCV45z8.png\"></a></p>\n<h3 id=\"CLS：表示累计布局偏移\"><a href=\"#CLS：表示累计布局偏移\" class=\"headerlink\" title=\"CLS：表示累计布局偏移\"></a>CLS：表示累计布局偏移</h3><p>通过performance的Experience的layout shift标签</p>\n"},{"title":"【css】contain","time":"2024-1-19 19:44","_content":"\n# 【css】contain\n\n标示了元素及其内容尽可能独立于文档树的其余部分。可以防止元素内部在其包围盒外产生副作用。局限使 DOM 的一部分得以被隔离，且通过将布局、样式、绘制、尺寸或其任意组合的计算限制于 DOM 子树而非整个页面使性能受益。局限也可用于限制 CSS 计数器和引号的作用域。\n\n局限的主要**益处**在于浏览器无需经常重渲 DOM 或页面布局，由此在静态页面的渲染中带来小幅性能收益，在更动态的应用中带来更多的性能收益。\n\n允许我们指定特定的 DOM 元素和它的子元素，让它们能够独立于整个 DOM 树结构之外。目的是能够让浏览器有能力只对部分元素进行重绘、重排，而不必每次针对整个页面。著作权归作者所有。\n\n## 属性值\n\n此属性为五个标准值的子集或两个简写值之一构成的以空格分隔的列表\n\n```css\n/* 关键词值 */\ncontain: none;\ncontain: strict;\ncontain: content;\ncontain: size;\ncontain: inline-size;\ncontain: layout;\ncontain: style;\ncontain: paint;\n\n/* 多个关键词 */\ncontain: size paint;\ncontain: size layout paint;\ncontain: inline-size layout;\n\n/* 全局值 */\ncontain: inherit;\ncontain: initial;\ncontain: revert;\ncontain: revert-layer;\ncontain: unset;\n```\n\n> 注：`layout`、`paint`、`strict` 或 `content`将创建：\n>\n> > 新的包含区块（针对其 position 属性为 absolute 或 fixed 的后代元素）。\n> >\n> > 新的层叠上下文。\n> >\n> > 新的区块格式化上下文。\n\n## `none`\n\n元素照常渲染，不应用局限。\n\n## `size`\n\n在行向和块向上将尺寸局限应用于元素。元素尺寸可无视子元素单独计算。\n\n此值不可与 `inline-size` 结合使用。\n\n### 示例\n\n- 原始代码\n\n```html\n  <div class=\"wrap\" id=\"wrap\">\n    <p></p>\n  </div>\n  <div class=\"parent\"></div>\n</body>\n```\n\n```css\n.wrap {\n  width: 300px;\n  border: 5px solid black;\n  margin-top: 100px;\n  min-height: 200px;\n}\n.parent {\n  width: 300px;\n  height: 200px;\n  border: 5px solid yellowgreen;\n}\np {\n  width: 200px;\n  height: 90px;\n  background-color: royalblue;\n}\n```\n\n```js\nfunction fn() {\n  document.getElementById(\"wrap\").addEventListener(\"click\", () => {\n    const child = document.createElement(\"p\");\n    child.textContent =\n      \"这是内容这是内容这是内容这是内容这是内容这是内容这是内容\";\n    document.getElementById(\"wrap\").appendChild(child);\n  });\n}\n\nfn();\n```\n\n[![pFpDM24.png](https://s11.ax1x.com/2024/01/09/pFpDM24.png)](https://imgse.com/i/pFpDM24)\n\n- 修改后的\n\n```css\n.wrap {\n  width: 300px;\n+ contain: size;\n}\n```\n\n[![pFpDJVx.png](https://s11.ax1x.com/2024/01/09/pFpDJVx.png)](https://imgse.com/i/pFpDJVx)\n\n## `inline-size`\n\n将行向尺寸局限应用于元素。元素的行向尺寸可无视子元素单独计算\n\n此值不可与 `size` 结合使用。\n\n## `layout`\n\n从页面的其余部分中隔离出元素的内部布局。此值意味着元素外的任意内容和元素内部布局**互不影响**。\n\n### 示例\n\n- 原始样式\n\n```html\n<body>\n  <div class=\"wrap\" id=\"wrap\">\n    <p>这是内容这是内容这是内容这是内容这是内容这是内容这是内容</p>\n    <p style=\"top: 140px;\">\n      这是内容这是内容这是内容这是内容这是内容这是内容这是内容\n    </p>\n    <p style=\"top: 460px;\">\n      这是内容这是内容这是内容这是内容这是内容这是内容这是内容\n    </p>\n    <p class=\"float\">这是浮动元素这是浮动元素这是浮动元素</p>\n  </div>\n  <div class=\"parent\">\n    <div class=\"\">\n      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点\n    </div>\n  </div>\n</body>\n```\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n  margin-top: 100px;\n}\n.parent {\n  width: 300px;\n  height: 200px;\n  border: 5px solid yellowgreen;\n}\np {\n  width: 200px;\n  height: 90px;\n  background-color: royalblue;\n  position: fixed;\n  top: 10px;\n  margin-top: 10px;\n  color: white;\n}\n.float {\n  float: left;\n  margin-top: 150px;\n  position: inherit;\n}\n```\n\n[![pFp6U0A.png](https://s11.ax1x.com/2024/01/09/pFp6U0A.png)](https://imgse.com/i/pFp6U0A)\n\n- 修改样式\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n+  contain: layout;\n  margin-top: 100px;\n}\n```\n\n[![pFp6wkt.png](https://s11.ax1x.com/2024/01/09/pFp6wkt.png)](https://imgse.com/i/pFp6wkt)\n\n这里有**两个**变化：\n\n1、子元素的定位从相对于窗口定位变为了**相对于父元素定位**\n\n2、子元素层级**高于**父元素的兄弟元素\n\n3、浮动元素**不会影响**其他节点\n\n## `paint`\n\n元素后代不在元素边界外显示。若包含盒在屏外，则浏览器无需绘制其被局限的元素——这些元素因为完全局限于此盒故必定也在屏外。若后代元素溢出包含元素的边界，则此后代元素将被裁剪至包含元素的边框盒。\n\n类似于`overflow:hidden`，但`contain:paint`超出的范围不会再被绘制，所以其对于性能更加友好，但是`overflow`的兼容性更高\n\n[![pFpqEUf.png](https://s11.ax1x.com/2024/01/10/pFpqEUf.png)](https://imgse.com/i/pFpqEUf)\n\n[![pFpqn2Q.png](https://s11.ax1x.com/2024/01/10/pFpqn2Q.png)](https://imgse.com/i/pFpqn2Q)\n\n### 示例\n\n- 原始代码\n\n```html\n<body>\n  <div class=\"wrap\" id=\"wrap\">\n    <p>这是内容这是内容这是内容这是内容这是内容这是内容这是内容</p>\n  </div>\n  <div class=\"parent\">\n    <div class=\"\">\n      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点\n    </div>\n  </div>\n</body>\n```\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n  margin-top: 100px;\n}\n.parent {\n  width: 300px;\n  height: 200px;\n  border: 5px solid yellowgreen;\n}\np {\n  width: 400px;\n  height: 60px;\n  background-color: royalblue;\n  margin-top: 10px;\n  color: white;\n}\n```\n\n[![pFpq8aV.png](https://s11.ax1x.com/2024/01/10/pFpq8aV.png)](https://imgse.com/i/pFpq8aV)\n\n- 修改样式\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n+  contain: paint;\n  margin-top: 100px;\n}\n```\n\n[![pFpqQrn.png](https://s11.ax1x.com/2024/01/10/pFpqQrn.png)](https://imgse.com/i/pFpqQrn)\n\n超出父元素的内容都被隐藏掉了\n\n## `style`\n\n对于可在元素及其后代外产生影响的属性，其影响将不会逃离包含元素。计数器和引号的作用域被限制为元素及其内容。\n\n### 示例\n\n- 原始数据\n\n```html\n<ul>\n  <li>元素甲</li>\n  <li>元素乙</li>\n  <li>元素丙</li>\n  <li>元素丁</li>\n  <li>元素戊</li>\n</ul>\n\n<span class=\"open-quote\">\n  外\n  <span>\n    <span class=\"open-quote\">内</span>\n  </span>\n</span>\n<span class=\"close-quote\">闭 </span>\n```\n\n```css\nul {\n  counter-reset: list-items;\n}\nli::before {\n  counter-increment: list-items;\n  content: counter(list-items) \"：\";\n}\n\nbody {\n  quotes: \"【\" \"】\" \"〈\" \"〉\";\n}\n.open-quote:before {\n  content: open-quote;\n}\n\n.close-quote:after {\n  content: close-quote;\n}\n```\n\n[![pFpjPW8.png](https://s11.ax1x.com/2024/01/10/pFpjPW8.png)](https://imgse.com/i/pFpjPW8)\n\nli 元素按 1、2、3 排序，引号也是按顺序排列\n\n- 修改后\n\n```html\n<span class=\"open-quote\">\n  外\n+  <span style=\"contain: style\">\n    <span class=\"open-quote\">内</span>\n  </span>\n</span>\n<span class=\"close-quote\">闭 </span>\n```\n\n```diff\n+ li:nth-last-child(2n + 2) {\n+  contain: style;\n+ }\n```\n[![pFpjFSS.png](https://s11.ax1x.com/2024/01/10/pFpjFSS.png)](https://imgse.com/i/pFpjFSS)\n\n变化点：\n1、元素计数器会重新开始，且不影响之前的数据\n\n2、括号没有计算到第二个，直接以【为关闭\n\n## 参链\n\n[MDN-contain](https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain)\n\n[CSS新特性contain的语法、作用及使用场景](https://www.cnblogs.com/xiaonian8/p/14932371.html)\n\n[初探CSS的容器模块](https://www.w3cplus.com/css/deep-dive-into-css-contain.html)","source":"_posts/css/【css】contain.md","raw":"---\ntitle: 【css】contain\ntime: 2024-1-19 19:44\ncategories: css\ntag: css\n---\n\n# 【css】contain\n\n标示了元素及其内容尽可能独立于文档树的其余部分。可以防止元素内部在其包围盒外产生副作用。局限使 DOM 的一部分得以被隔离，且通过将布局、样式、绘制、尺寸或其任意组合的计算限制于 DOM 子树而非整个页面使性能受益。局限也可用于限制 CSS 计数器和引号的作用域。\n\n局限的主要**益处**在于浏览器无需经常重渲 DOM 或页面布局，由此在静态页面的渲染中带来小幅性能收益，在更动态的应用中带来更多的性能收益。\n\n允许我们指定特定的 DOM 元素和它的子元素，让它们能够独立于整个 DOM 树结构之外。目的是能够让浏览器有能力只对部分元素进行重绘、重排，而不必每次针对整个页面。著作权归作者所有。\n\n## 属性值\n\n此属性为五个标准值的子集或两个简写值之一构成的以空格分隔的列表\n\n```css\n/* 关键词值 */\ncontain: none;\ncontain: strict;\ncontain: content;\ncontain: size;\ncontain: inline-size;\ncontain: layout;\ncontain: style;\ncontain: paint;\n\n/* 多个关键词 */\ncontain: size paint;\ncontain: size layout paint;\ncontain: inline-size layout;\n\n/* 全局值 */\ncontain: inherit;\ncontain: initial;\ncontain: revert;\ncontain: revert-layer;\ncontain: unset;\n```\n\n> 注：`layout`、`paint`、`strict` 或 `content`将创建：\n>\n> > 新的包含区块（针对其 position 属性为 absolute 或 fixed 的后代元素）。\n> >\n> > 新的层叠上下文。\n> >\n> > 新的区块格式化上下文。\n\n## `none`\n\n元素照常渲染，不应用局限。\n\n## `size`\n\n在行向和块向上将尺寸局限应用于元素。元素尺寸可无视子元素单独计算。\n\n此值不可与 `inline-size` 结合使用。\n\n### 示例\n\n- 原始代码\n\n```html\n  <div class=\"wrap\" id=\"wrap\">\n    <p></p>\n  </div>\n  <div class=\"parent\"></div>\n</body>\n```\n\n```css\n.wrap {\n  width: 300px;\n  border: 5px solid black;\n  margin-top: 100px;\n  min-height: 200px;\n}\n.parent {\n  width: 300px;\n  height: 200px;\n  border: 5px solid yellowgreen;\n}\np {\n  width: 200px;\n  height: 90px;\n  background-color: royalblue;\n}\n```\n\n```js\nfunction fn() {\n  document.getElementById(\"wrap\").addEventListener(\"click\", () => {\n    const child = document.createElement(\"p\");\n    child.textContent =\n      \"这是内容这是内容这是内容这是内容这是内容这是内容这是内容\";\n    document.getElementById(\"wrap\").appendChild(child);\n  });\n}\n\nfn();\n```\n\n[![pFpDM24.png](https://s11.ax1x.com/2024/01/09/pFpDM24.png)](https://imgse.com/i/pFpDM24)\n\n- 修改后的\n\n```css\n.wrap {\n  width: 300px;\n+ contain: size;\n}\n```\n\n[![pFpDJVx.png](https://s11.ax1x.com/2024/01/09/pFpDJVx.png)](https://imgse.com/i/pFpDJVx)\n\n## `inline-size`\n\n将行向尺寸局限应用于元素。元素的行向尺寸可无视子元素单独计算\n\n此值不可与 `size` 结合使用。\n\n## `layout`\n\n从页面的其余部分中隔离出元素的内部布局。此值意味着元素外的任意内容和元素内部布局**互不影响**。\n\n### 示例\n\n- 原始样式\n\n```html\n<body>\n  <div class=\"wrap\" id=\"wrap\">\n    <p>这是内容这是内容这是内容这是内容这是内容这是内容这是内容</p>\n    <p style=\"top: 140px;\">\n      这是内容这是内容这是内容这是内容这是内容这是内容这是内容\n    </p>\n    <p style=\"top: 460px;\">\n      这是内容这是内容这是内容这是内容这是内容这是内容这是内容\n    </p>\n    <p class=\"float\">这是浮动元素这是浮动元素这是浮动元素</p>\n  </div>\n  <div class=\"parent\">\n    <div class=\"\">\n      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点\n    </div>\n  </div>\n</body>\n```\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n  margin-top: 100px;\n}\n.parent {\n  width: 300px;\n  height: 200px;\n  border: 5px solid yellowgreen;\n}\np {\n  width: 200px;\n  height: 90px;\n  background-color: royalblue;\n  position: fixed;\n  top: 10px;\n  margin-top: 10px;\n  color: white;\n}\n.float {\n  float: left;\n  margin-top: 150px;\n  position: inherit;\n}\n```\n\n[![pFp6U0A.png](https://s11.ax1x.com/2024/01/09/pFp6U0A.png)](https://imgse.com/i/pFp6U0A)\n\n- 修改样式\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n+  contain: layout;\n  margin-top: 100px;\n}\n```\n\n[![pFp6wkt.png](https://s11.ax1x.com/2024/01/09/pFp6wkt.png)](https://imgse.com/i/pFp6wkt)\n\n这里有**两个**变化：\n\n1、子元素的定位从相对于窗口定位变为了**相对于父元素定位**\n\n2、子元素层级**高于**父元素的兄弟元素\n\n3、浮动元素**不会影响**其他节点\n\n## `paint`\n\n元素后代不在元素边界外显示。若包含盒在屏外，则浏览器无需绘制其被局限的元素——这些元素因为完全局限于此盒故必定也在屏外。若后代元素溢出包含元素的边界，则此后代元素将被裁剪至包含元素的边框盒。\n\n类似于`overflow:hidden`，但`contain:paint`超出的范围不会再被绘制，所以其对于性能更加友好，但是`overflow`的兼容性更高\n\n[![pFpqEUf.png](https://s11.ax1x.com/2024/01/10/pFpqEUf.png)](https://imgse.com/i/pFpqEUf)\n\n[![pFpqn2Q.png](https://s11.ax1x.com/2024/01/10/pFpqn2Q.png)](https://imgse.com/i/pFpqn2Q)\n\n### 示例\n\n- 原始代码\n\n```html\n<body>\n  <div class=\"wrap\" id=\"wrap\">\n    <p>这是内容这是内容这是内容这是内容这是内容这是内容这是内容</p>\n  </div>\n  <div class=\"parent\">\n    <div class=\"\">\n      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点\n    </div>\n  </div>\n</body>\n```\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n  margin-top: 100px;\n}\n.parent {\n  width: 300px;\n  height: 200px;\n  border: 5px solid yellowgreen;\n}\np {\n  width: 400px;\n  height: 60px;\n  background-color: royalblue;\n  margin-top: 10px;\n  color: white;\n}\n```\n\n[![pFpq8aV.png](https://s11.ax1x.com/2024/01/10/pFpq8aV.png)](https://imgse.com/i/pFpq8aV)\n\n- 修改样式\n\n```css\n.wrap {\n  width: 300px;\n  height: 200px;\n  border: 5px solid black;\n+  contain: paint;\n  margin-top: 100px;\n}\n```\n\n[![pFpqQrn.png](https://s11.ax1x.com/2024/01/10/pFpqQrn.png)](https://imgse.com/i/pFpqQrn)\n\n超出父元素的内容都被隐藏掉了\n\n## `style`\n\n对于可在元素及其后代外产生影响的属性，其影响将不会逃离包含元素。计数器和引号的作用域被限制为元素及其内容。\n\n### 示例\n\n- 原始数据\n\n```html\n<ul>\n  <li>元素甲</li>\n  <li>元素乙</li>\n  <li>元素丙</li>\n  <li>元素丁</li>\n  <li>元素戊</li>\n</ul>\n\n<span class=\"open-quote\">\n  外\n  <span>\n    <span class=\"open-quote\">内</span>\n  </span>\n</span>\n<span class=\"close-quote\">闭 </span>\n```\n\n```css\nul {\n  counter-reset: list-items;\n}\nli::before {\n  counter-increment: list-items;\n  content: counter(list-items) \"：\";\n}\n\nbody {\n  quotes: \"【\" \"】\" \"〈\" \"〉\";\n}\n.open-quote:before {\n  content: open-quote;\n}\n\n.close-quote:after {\n  content: close-quote;\n}\n```\n\n[![pFpjPW8.png](https://s11.ax1x.com/2024/01/10/pFpjPW8.png)](https://imgse.com/i/pFpjPW8)\n\nli 元素按 1、2、3 排序，引号也是按顺序排列\n\n- 修改后\n\n```html\n<span class=\"open-quote\">\n  外\n+  <span style=\"contain: style\">\n    <span class=\"open-quote\">内</span>\n  </span>\n</span>\n<span class=\"close-quote\">闭 </span>\n```\n\n```diff\n+ li:nth-last-child(2n + 2) {\n+  contain: style;\n+ }\n```\n[![pFpjFSS.png](https://s11.ax1x.com/2024/01/10/pFpjFSS.png)](https://imgse.com/i/pFpjFSS)\n\n变化点：\n1、元素计数器会重新开始，且不影响之前的数据\n\n2、括号没有计算到第二个，直接以【为关闭\n\n## 参链\n\n[MDN-contain](https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain)\n\n[CSS新特性contain的语法、作用及使用场景](https://www.cnblogs.com/xiaonian8/p/14932371.html)\n\n[初探CSS的容器模块](https://www.w3cplus.com/css/deep-dive-into-css-contain.html)","slug":"css/【css】contain","published":1,"date":"2025-08-13T07:29:09.387Z","updated":"2025-03-06T09:08:26.515Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xh0011bofmg6ouh67p","content":"<h1 id=\"【css】contain\"><a href=\"#【css】contain\" class=\"headerlink\" title=\"【css】contain\"></a>【css】contain</h1><p>标示了元素及其内容尽可能独立于文档树的其余部分。可以防止元素内部在其包围盒外产生副作用。局限使 DOM 的一部分得以被隔离，且通过将布局、样式、绘制、尺寸或其任意组合的计算限制于 DOM 子树而非整个页面使性能受益。局限也可用于限制 CSS 计数器和引号的作用域。</p>\n<p>局限的主要<strong>益处</strong>在于浏览器无需经常重渲 DOM 或页面布局，由此在静态页面的渲染中带来小幅性能收益，在更动态的应用中带来更多的性能收益。</p>\n<p>允许我们指定特定的 DOM 元素和它的子元素，让它们能够独立于整个 DOM 树结构之外。目的是能够让浏览器有能力只对部分元素进行重绘、重排，而不必每次针对整个页面。著作权归作者所有。</p>\n<h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a>属性值</h2><p>此属性为五个标准值的子集或两个简写值之一构成的以空格分隔的列表</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 关键词值 */</span></span><br><span class=\"line\"><span class=\"attribute\">contain</span>: none;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: strict;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: content;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: size;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: inline-size;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: layout;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: style;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: paint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 多个关键词 */</span></span><br><span class=\"line\"><span class=\"attribute\">contain</span>: size paint;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: size layout paint;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: inline-size layout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 全局值 */</span></span><br><span class=\"line\"><span class=\"attribute\">contain</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: initial;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: revert;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: revert-layer;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: unset;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：<code>layout</code>、<code>paint</code>、<code>strict</code> 或 <code>content</code>将创建：</p>\n<blockquote>\n<p>新的包含区块（针对其 position 属性为 absolute 或 fixed 的后代元素）。</p>\n<p>新的层叠上下文。</p>\n<p>新的区块格式化上下文。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a><code>none</code></h2><p>元素照常渲染，不应用局限。</p>\n<h2 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a><code>size</code></h2><p>在行向和块向上将尺寸局限应用于元素。元素尺寸可无视子元素单独计算。</p>\n<p>此值不可与 <code>inline-size</code> 结合使用。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始代码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: royalblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;wrap&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">    child.<span class=\"property\">textContent</span> =</span><br><span class=\"line\">      <span class=\"string\">&quot;这是内容这是内容这是内容这是内容这是内容这是内容这是内容&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;wrap&quot;</span>).<span class=\"title function_\">appendChild</span>(child);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpDM24\"><img src=\"https://s11.ax1x.com/2024/01/09/pFpDM24.png\" alt=\"pFpDM24.png\"></a></p>\n<ul>\n<li>修改后的</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">+ <span class=\"attribute\">contain</span>: size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpDJVx\"><img src=\"https://s11.ax1x.com/2024/01/09/pFpDJVx.png\" alt=\"pFpDJVx.png\"></a></p>\n<h2 id=\"inline-size\"><a href=\"#inline-size\" class=\"headerlink\" title=\"inline-size\"></a><code>inline-size</code></h2><p>将行向尺寸局限应用于元素。元素的行向尺寸可无视子元素单独计算</p>\n<p>此值不可与 <code>size</code> 结合使用。</p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a><code>layout</code></h2><p>从页面的其余部分中隔离出元素的内部布局。此值意味着元素外的任意内容和元素内部布局<strong>互不影响</strong>。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始样式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;top: 140px;&quot;</span>&gt;</span></span><br><span class=\"line\">      这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;top: 460px;&quot;</span>&gt;</span></span><br><span class=\"line\">      这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>这是浮动元素这是浮动元素这是浮动元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: royalblue;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFp6U0A\"><img src=\"https://s11.ax1x.com/2024/01/09/pFp6U0A.png\" alt=\"pFp6U0A.png\"></a></p>\n<ul>\n<li>修改样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">+  <span class=\"attribute\">contain</span>: layout;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFp6wkt\"><img src=\"https://s11.ax1x.com/2024/01/09/pFp6wkt.png\" alt=\"pFp6wkt.png\"></a></p>\n<p>这里有<strong>两个</strong>变化：</p>\n<p>1、子元素的定位从相对于窗口定位变为了<strong>相对于父元素定位</strong></p>\n<p>2、子元素层级<strong>高于</strong>父元素的兄弟元素</p>\n<p>3、浮动元素<strong>不会影响</strong>其他节点</p>\n<h2 id=\"paint\"><a href=\"#paint\" class=\"headerlink\" title=\"paint\"></a><code>paint</code></h2><p>元素后代不在元素边界外显示。若包含盒在屏外，则浏览器无需绘制其被局限的元素——这些元素因为完全局限于此盒故必定也在屏外。若后代元素溢出包含元素的边界，则此后代元素将被裁剪至包含元素的边框盒。</p>\n<p>类似于<code>overflow:hidden</code>，但<code>contain:paint</code>超出的范围不会再被绘制，所以其对于性能更加友好，但是<code>overflow</code>的兼容性更高</p>\n<p><a href=\"https://imgse.com/i/pFpqEUf\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpqEUf.png\" alt=\"pFpqEUf.png\"></a></p>\n<p><a href=\"https://imgse.com/i/pFpqn2Q\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpqn2Q.png\" alt=\"pFpqn2Q.png\"></a></p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始代码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: royalblue;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpq8aV\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpq8aV.png\" alt=\"pFpq8aV.png\"></a></p>\n<ul>\n<li>修改样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">+  <span class=\"attribute\">contain</span>: paint;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpqQrn\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpqQrn.png\" alt=\"pFpqQrn.png\"></a></p>\n<p>超出父元素的内容都被隐藏掉了</p>\n<h2 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a><code>style</code></h2><p>对于可在元素及其后代外产生影响的属性，其影响将不会逃离包含元素。计数器和引号的作用域被限制为元素及其内容。</p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素甲<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素乙<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素丙<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素丁<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素戊<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span></span><br><span class=\"line\">  外</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span>内<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close-quote&quot;</span>&gt;</span>闭 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: list-items;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: list-items;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(list-items) <span class=\"string\">&quot;：&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;【&quot;</span> <span class=\"string\">&quot;】&quot;</span> <span class=\"string\">&quot;〈&quot;</span> <span class=\"string\">&quot;〉&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.open-quote</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: open-quote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.close-quote</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: close-quote;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpjPW8\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpjPW8.png\" alt=\"pFpjPW8.png\"></a></p>\n<p>li 元素按 1、2、3 排序，引号也是按顺序排列</p>\n<ul>\n<li>修改后</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span></span><br><span class=\"line\">  外</span><br><span class=\"line\">+  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;contain: style&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span>内<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close-quote&quot;</span>&gt;</span>闭 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ li:nth-last-child(2n + 2) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  contain: style;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgse.com/i/pFpjFSS\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpjFSS.png\" alt=\"pFpjFSS.png\"></a></p>\n<p>变化点：<br>1、元素计数器会重新开始，且不影响之前的数据</p>\n<p>2、括号没有计算到第二个，直接以【为关闭</p>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain\">MDN-contain</a></p>\n<p><a href=\"https://www.cnblogs.com/xiaonian8/p/14932371.html\">CSS新特性contain的语法、作用及使用场景</a></p>\n<p><a href=\"https://www.w3cplus.com/css/deep-dive-into-css-contain.html\">初探CSS的容器模块</a></p>\n","excerpt":"","more":"<h1 id=\"【css】contain\"><a href=\"#【css】contain\" class=\"headerlink\" title=\"【css】contain\"></a>【css】contain</h1><p>标示了元素及其内容尽可能独立于文档树的其余部分。可以防止元素内部在其包围盒外产生副作用。局限使 DOM 的一部分得以被隔离，且通过将布局、样式、绘制、尺寸或其任意组合的计算限制于 DOM 子树而非整个页面使性能受益。局限也可用于限制 CSS 计数器和引号的作用域。</p>\n<p>局限的主要<strong>益处</strong>在于浏览器无需经常重渲 DOM 或页面布局，由此在静态页面的渲染中带来小幅性能收益，在更动态的应用中带来更多的性能收益。</p>\n<p>允许我们指定特定的 DOM 元素和它的子元素，让它们能够独立于整个 DOM 树结构之外。目的是能够让浏览器有能力只对部分元素进行重绘、重排，而不必每次针对整个页面。著作权归作者所有。</p>\n<h2 id=\"属性值\"><a href=\"#属性值\" class=\"headerlink\" title=\"属性值\"></a>属性值</h2><p>此属性为五个标准值的子集或两个简写值之一构成的以空格分隔的列表</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 关键词值 */</span></span><br><span class=\"line\"><span class=\"attribute\">contain</span>: none;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: strict;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: content;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: size;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: inline-size;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: layout;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: style;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: paint;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 多个关键词 */</span></span><br><span class=\"line\"><span class=\"attribute\">contain</span>: size paint;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: size layout paint;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: inline-size layout;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 全局值 */</span></span><br><span class=\"line\"><span class=\"attribute\">contain</span>: inherit;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: initial;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: revert;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: revert-layer;</span><br><span class=\"line\"><span class=\"attribute\">contain</span>: unset;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：<code>layout</code>、<code>paint</code>、<code>strict</code> 或 <code>content</code>将创建：</p>\n<blockquote>\n<p>新的包含区块（针对其 position 属性为 absolute 或 fixed 的后代元素）。</p>\n<p>新的层叠上下文。</p>\n<p>新的区块格式化上下文。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"none\"><a href=\"#none\" class=\"headerlink\" title=\"none\"></a><code>none</code></h2><p>元素照常渲染，不应用局限。</p>\n<h2 id=\"size\"><a href=\"#size\" class=\"headerlink\" title=\"size\"></a><code>size</code></h2><p>在行向和块向上将尺寸局限应用于元素。元素尺寸可无视子元素单独计算。</p>\n<p>此值不可与 <code>inline-size</code> 结合使用。</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始代码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">min-height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: royalblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;wrap&quot;</span>).<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> child = <span class=\"variable language_\">document</span>.<span class=\"title function_\">createElement</span>(<span class=\"string\">&quot;p&quot;</span>);</span><br><span class=\"line\">    child.<span class=\"property\">textContent</span> =</span><br><span class=\"line\">      <span class=\"string\">&quot;这是内容这是内容这是内容这是内容这是内容这是内容这是内容&quot;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;wrap&quot;</span>).<span class=\"title function_\">appendChild</span>(child);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn</span>();</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpDM24\"><img src=\"https://s11.ax1x.com/2024/01/09/pFpDM24.png\" alt=\"pFpDM24.png\"></a></p>\n<ul>\n<li>修改后的</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">+ <span class=\"attribute\">contain</span>: size;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpDJVx\"><img src=\"https://s11.ax1x.com/2024/01/09/pFpDJVx.png\" alt=\"pFpDJVx.png\"></a></p>\n<h2 id=\"inline-size\"><a href=\"#inline-size\" class=\"headerlink\" title=\"inline-size\"></a><code>inline-size</code></h2><p>将行向尺寸局限应用于元素。元素的行向尺寸可无视子元素单独计算</p>\n<p>此值不可与 <code>size</code> 结合使用。</p>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a><code>layout</code></h2><p>从页面的其余部分中隔离出元素的内部布局。此值意味着元素外的任意内容和元素内部布局<strong>互不影响</strong>。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始样式</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;top: 140px;&quot;</span>&gt;</span></span><br><span class=\"line\">      这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;top: 460px;&quot;</span>&gt;</span></span><br><span class=\"line\">      这是内容这是内容这是内容这是内容这是内容这是内容这是内容</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;float&quot;</span>&gt;</span>这是浮动元素这是浮动元素这是浮动元素<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">90px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: royalblue;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.float</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: inherit;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFp6U0A\"><img src=\"https://s11.ax1x.com/2024/01/09/pFp6U0A.png\" alt=\"pFp6U0A.png\"></a></p>\n<ul>\n<li>修改样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">+  <span class=\"attribute\">contain</span>: layout;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFp6wkt\"><img src=\"https://s11.ax1x.com/2024/01/09/pFp6wkt.png\" alt=\"pFp6wkt.png\"></a></p>\n<p>这里有<strong>两个</strong>变化：</p>\n<p>1、子元素的定位从相对于窗口定位变为了<strong>相对于父元素定位</strong></p>\n<p>2、子元素层级<strong>高于</strong>父元素的兄弟元素</p>\n<p>3、浮动元素<strong>不会影响</strong>其他节点</p>\n<h2 id=\"paint\"><a href=\"#paint\" class=\"headerlink\" title=\"paint\"></a><code>paint</code></h2><p>元素后代不在元素边界外显示。若包含盒在屏外，则浏览器无需绘制其被局限的元素——这些元素因为完全局限于此盒故必定也在屏外。若后代元素溢出包含元素的边界，则此后代元素将被裁剪至包含元素的边框盒。</p>\n<p>类似于<code>overflow:hidden</code>，但<code>contain:paint</code>超出的范围不会再被绘制，所以其对于性能更加友好，但是<code>overflow</code>的兼容性更高</p>\n<p><a href=\"https://imgse.com/i/pFpqEUf\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpqEUf.png\" alt=\"pFpqEUf.png\"></a></p>\n<p><a href=\"https://imgse.com/i/pFpqn2Q\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpqn2Q.png\" alt=\"pFpqn2Q.png\"></a></p>\n<h3 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始代码</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;wrap&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;wrap&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>这是内容这是内容这是内容这是内容这是内容这是内容这是内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">      兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点兄弟结点</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid yellowgreen;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">p</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">60px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: royalblue;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpq8aV\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpq8aV.png\" alt=\"pFpq8aV.png\"></a></p>\n<ul>\n<li>修改样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.wrap</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">5px</span> solid black;</span><br><span class=\"line\">+  <span class=\"attribute\">contain</span>: paint;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpqQrn\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpqQrn.png\" alt=\"pFpqQrn.png\"></a></p>\n<p>超出父元素的内容都被隐藏掉了</p>\n<h2 id=\"style\"><a href=\"#style\" class=\"headerlink\" title=\"style\"></a><code>style</code></h2><p>对于可在元素及其后代外产生影响的属性，其影响将不会逃离包含元素。计数器和引号的作用域被限制为元素及其内容。</p>\n<h3 id=\"示例-3\"><a href=\"#示例-3\" class=\"headerlink\" title=\"示例\"></a>示例</h3><ul>\n<li>原始数据</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素甲<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素乙<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素丙<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素丁<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>元素戊<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span></span><br><span class=\"line\">  外</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span>内<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close-quote&quot;</span>&gt;</span>闭 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">ul</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-reset</span>: list-items;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">li</span><span class=\"selector-pseudo\">::before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">counter-increment</span>: list-items;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: <span class=\"built_in\">counter</span>(list-items) <span class=\"string\">&quot;：&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">quotes</span>: <span class=\"string\">&quot;【&quot;</span> <span class=\"string\">&quot;】&quot;</span> <span class=\"string\">&quot;〈&quot;</span> <span class=\"string\">&quot;〉&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.open-quote</span><span class=\"selector-pseudo\">:before</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: open-quote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.close-quote</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">content</span>: close-quote;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pFpjPW8\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpjPW8.png\" alt=\"pFpjPW8.png\"></a></p>\n<p>li 元素按 1、2、3 排序，引号也是按顺序排列</p>\n<ul>\n<li>修改后</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span></span><br><span class=\"line\">  外</span><br><span class=\"line\">+  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;contain: style&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;open-quote&quot;</span>&gt;</span>内<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;close-quote&quot;</span>&gt;</span>闭 <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"addition\">+ li:nth-last-child(2n + 2) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+  contain: style;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"https://imgse.com/i/pFpjFSS\"><img src=\"https://s11.ax1x.com/2024/01/10/pFpjFSS.png\" alt=\"pFpjFSS.png\"></a></p>\n<p>变化点：<br>1、元素计数器会重新开始，且不影响之前的数据</p>\n<p>2、括号没有计算到第二个，直接以【为关闭</p>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain\">MDN-contain</a></p>\n<p><a href=\"https://www.cnblogs.com/xiaonian8/p/14932371.html\">CSS新特性contain的语法、作用及使用场景</a></p>\n<p><a href=\"https://www.w3cplus.com/css/deep-dive-into-css-contain.html\">初探CSS的容器模块</a></p>\n"},{"title":"【devTools】常用面板","_content":"\n# 【devTools】常用面板\n\n## Elements面板\n\n### 将元素存入变量\n\n- 右击\n\n- 选择store as global variable\n\n- 通过$0、$1...获取对应的元素\n\n[![pCVIrHH.png](https://s1.ax1x.com/2023/06/11/pCVIrHH.png)](https://imgse.com/i/pCVIrHH)\n\n## console面板\n\n### 自动合并相似信息\n\nGroup similar message in console，浏览器默认开启的\n\n[![pCVoeqe.png](https://s1.ax1x.com/2023/06/11/pCVoeqe.png)](https://imgse.com/i/pCVoeqe)\n\n### Hide network\n\n隐藏网络的错误提示信息\n\n### preserve log\n\n页面跳转时保留console信息\n\n### show timestamps\n\n打印时，会默认输入每一行信息的时间\n\n打开：devtools右上角设置按钮，perferces下show timestamps\n\n[![pCVoGM8.png](https://s1.ax1x.com/2023/06/11/pCVoGM8.png)](https://imgse.com/i/pCVoGM8)\n\n### $_\n\n作用：获取最近一次的执行结果\n\n[![pCVosMT.png](https://s1.ax1x.com/2023/06/11/pCVosMT.png)](https://imgse.com/i/pCVosMT)\n\n### $和$$\n\n`$`：document.querySelector\n\n`$$`: document.querySelectorAll\n\n### $x\n\n可以使用xpath选择元素。\n\neg：$x(\"/html/body/div\")\n\n[![pCVofiR.png](https://s1.ax1x.com/2023/06/11/pCVofiR.png)](https://imgse.com/i/pCVofiR)\n\n### debug\n\n执行到该函数时就会触发断点\n\n``` js\nconst fn = () => {\n    return 1;\n}\ndebug(fn)\nfn()\n```\n\n[![pCVo4Rx.png](https://s1.ax1x.com/2023/06/11/pCVo4Rx.png)](https://imgse.com/i/pCVo4Rx)\n\n[![pCVooQK.png](https://s1.ax1x.com/2023/06/11/pCVooQK.png)](https://imgse.com/i/pCVooQK)\n\n### monitor\n\n函数执行时打印参数值，但无法打印箭头函数的参数\n\n执行unmonitor删除效果\n\n``` js\nfunction fn3(a, b){\n    return a+b\n}\nmonitor(fn3)\nfn3(1,2)\n//输出：VM3370:1 function fn3 called with arguments: 1, 2\n```\n\n### monitroEvents\n\n监听并打印元素触发的事件，可以用数组一次性监听多个事件。\n\n执行unmonitorEvents取消监听\n\n\n### getEventListeners\n\n获取注册在元素上的所有事件监听器\n\n### queryObjects\n\n获取所有原型链中包含该原型的对象\n\n## source面板\n\n### FileSystem\n\n可以直接与本地的文件连接，在devtools修改文件之后，会将本地的文件内容也进行修改\n\n[![pCVXADP.png](https://s1.ax1x.com/2023/06/11/pCVXADP.png)](https://imgse.com/i/pCVXADP)\n\n### overrides\n\n可以以本地的文件取代页面中载入的资源\n\n### 断点\n\n#### 条件断点\n\n在source代码块需要设置时，在对应的行号右键，选择Add Condition Break Point，写上具体的条件\n\n[![pCVXrb6.png](https://s1.ax1x.com/2023/06/11/pCVXrb6.png)](https://imgse.com/i/pCVXrb6)\n\n#### 断点打印信息，Logpoint\n\n在执行时经过该程序代码时打印信息\n\n[![pCVXR8H.png](https://s1.ax1x.com/2023/06/11/pCVXR8H.png)](https://imgse.com/i/pCVXR8H)\n\n#### dom断点\n\n在element tab，右键元素，展开break on，有三种断点形式：\n\n- subtree modifications ：元素内发生变化时暂停，如添加、删除、修改子节点\n\n- attribute modifications ：添加、删除、修改元素本身的属性时暂停\n\n- node removal：元素被删除时暂停，同时删除dom断点\n\n#### 请求断点\n\n在debugger时，点击在XHR/fetch Breapoints列表右上角的+按钮，输入data，回车保存。\n\n#### 事件监听器断点\n\n在debugger时，在Event Listener BreakPoint列表的Control下勾选对应的事件，然后手动触发对应的事件\n\n#### 忽略进入文件\n\n在对应的文件代码内容区域，右键选择Add script to ignore list，添加之后，这个文件就不会在调试时进入了\n\n## NetWork\n\n### 设置区域\n[![pCVjISJ.png](https://s1.ax1x.com/2023/06/11/pCVjISJ.png)](https://imgse.com/i/pCVjISJ)\n\n- Use large request rows\n\n  使用宽版的流量记录列表来显示\n\n- Group by frame\n\n  将来自相同iframe的请求聚焦在一起\n\n- show overview\n\n  是否显示时间轴\n[![pCVj7O1.png](https://s1.ax1x.com/2023/06/11/pCVj7O1.png)](https://imgse.com/i/pCVj7O1)\n\n- Capture screenslots\n\n  是否截图","source":"_posts/devTools/【devTools】常用面板.md","raw":"---\ntitle: 【devTools】常用面板\ncategories: 浏览器\n---\n\n# 【devTools】常用面板\n\n## Elements面板\n\n### 将元素存入变量\n\n- 右击\n\n- 选择store as global variable\n\n- 通过$0、$1...获取对应的元素\n\n[![pCVIrHH.png](https://s1.ax1x.com/2023/06/11/pCVIrHH.png)](https://imgse.com/i/pCVIrHH)\n\n## console面板\n\n### 自动合并相似信息\n\nGroup similar message in console，浏览器默认开启的\n\n[![pCVoeqe.png](https://s1.ax1x.com/2023/06/11/pCVoeqe.png)](https://imgse.com/i/pCVoeqe)\n\n### Hide network\n\n隐藏网络的错误提示信息\n\n### preserve log\n\n页面跳转时保留console信息\n\n### show timestamps\n\n打印时，会默认输入每一行信息的时间\n\n打开：devtools右上角设置按钮，perferces下show timestamps\n\n[![pCVoGM8.png](https://s1.ax1x.com/2023/06/11/pCVoGM8.png)](https://imgse.com/i/pCVoGM8)\n\n### $_\n\n作用：获取最近一次的执行结果\n\n[![pCVosMT.png](https://s1.ax1x.com/2023/06/11/pCVosMT.png)](https://imgse.com/i/pCVosMT)\n\n### $和$$\n\n`$`：document.querySelector\n\n`$$`: document.querySelectorAll\n\n### $x\n\n可以使用xpath选择元素。\n\neg：$x(\"/html/body/div\")\n\n[![pCVofiR.png](https://s1.ax1x.com/2023/06/11/pCVofiR.png)](https://imgse.com/i/pCVofiR)\n\n### debug\n\n执行到该函数时就会触发断点\n\n``` js\nconst fn = () => {\n    return 1;\n}\ndebug(fn)\nfn()\n```\n\n[![pCVo4Rx.png](https://s1.ax1x.com/2023/06/11/pCVo4Rx.png)](https://imgse.com/i/pCVo4Rx)\n\n[![pCVooQK.png](https://s1.ax1x.com/2023/06/11/pCVooQK.png)](https://imgse.com/i/pCVooQK)\n\n### monitor\n\n函数执行时打印参数值，但无法打印箭头函数的参数\n\n执行unmonitor删除效果\n\n``` js\nfunction fn3(a, b){\n    return a+b\n}\nmonitor(fn3)\nfn3(1,2)\n//输出：VM3370:1 function fn3 called with arguments: 1, 2\n```\n\n### monitroEvents\n\n监听并打印元素触发的事件，可以用数组一次性监听多个事件。\n\n执行unmonitorEvents取消监听\n\n\n### getEventListeners\n\n获取注册在元素上的所有事件监听器\n\n### queryObjects\n\n获取所有原型链中包含该原型的对象\n\n## source面板\n\n### FileSystem\n\n可以直接与本地的文件连接，在devtools修改文件之后，会将本地的文件内容也进行修改\n\n[![pCVXADP.png](https://s1.ax1x.com/2023/06/11/pCVXADP.png)](https://imgse.com/i/pCVXADP)\n\n### overrides\n\n可以以本地的文件取代页面中载入的资源\n\n### 断点\n\n#### 条件断点\n\n在source代码块需要设置时，在对应的行号右键，选择Add Condition Break Point，写上具体的条件\n\n[![pCVXrb6.png](https://s1.ax1x.com/2023/06/11/pCVXrb6.png)](https://imgse.com/i/pCVXrb6)\n\n#### 断点打印信息，Logpoint\n\n在执行时经过该程序代码时打印信息\n\n[![pCVXR8H.png](https://s1.ax1x.com/2023/06/11/pCVXR8H.png)](https://imgse.com/i/pCVXR8H)\n\n#### dom断点\n\n在element tab，右键元素，展开break on，有三种断点形式：\n\n- subtree modifications ：元素内发生变化时暂停，如添加、删除、修改子节点\n\n- attribute modifications ：添加、删除、修改元素本身的属性时暂停\n\n- node removal：元素被删除时暂停，同时删除dom断点\n\n#### 请求断点\n\n在debugger时，点击在XHR/fetch Breapoints列表右上角的+按钮，输入data，回车保存。\n\n#### 事件监听器断点\n\n在debugger时，在Event Listener BreakPoint列表的Control下勾选对应的事件，然后手动触发对应的事件\n\n#### 忽略进入文件\n\n在对应的文件代码内容区域，右键选择Add script to ignore list，添加之后，这个文件就不会在调试时进入了\n\n## NetWork\n\n### 设置区域\n[![pCVjISJ.png](https://s1.ax1x.com/2023/06/11/pCVjISJ.png)](https://imgse.com/i/pCVjISJ)\n\n- Use large request rows\n\n  使用宽版的流量记录列表来显示\n\n- Group by frame\n\n  将来自相同iframe的请求聚焦在一起\n\n- show overview\n\n  是否显示时间轴\n[![pCVj7O1.png](https://s1.ax1x.com/2023/06/11/pCVj7O1.png)](https://imgse.com/i/pCVj7O1)\n\n- Capture screenslots\n\n  是否截图","slug":"devTools/【devTools】常用面板","published":1,"date":"2025-08-13T07:29:09.419Z","updated":"2025-03-06T09:08:26.519Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xi0013bofmez3k9x7z","content":"<h1 id=\"【devTools】常用面板\"><a href=\"#【devTools】常用面板\" class=\"headerlink\" title=\"【devTools】常用面板\"></a>【devTools】常用面板</h1><h2 id=\"Elements面板\"><a href=\"#Elements面板\" class=\"headerlink\" title=\"Elements面板\"></a>Elements面板</h2><h3 id=\"将元素存入变量\"><a href=\"#将元素存入变量\" class=\"headerlink\" title=\"将元素存入变量\"></a>将元素存入变量</h3><ul>\n<li><p>右击</p>\n</li>\n<li><p>选择store as global variable</p>\n</li>\n<li><p>通过$0、$1…获取对应的元素</p>\n</li>\n</ul>\n<p><a href=\"https://imgse.com/i/pCVIrHH\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVIrHH.png\" alt=\"pCVIrHH.png\"></a></p>\n<h2 id=\"console面板\"><a href=\"#console面板\" class=\"headerlink\" title=\"console面板\"></a>console面板</h2><h3 id=\"自动合并相似信息\"><a href=\"#自动合并相似信息\" class=\"headerlink\" title=\"自动合并相似信息\"></a>自动合并相似信息</h3><p>Group similar message in console，浏览器默认开启的</p>\n<p><a href=\"https://imgse.com/i/pCVoeqe\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVoeqe.png\" alt=\"pCVoeqe.png\"></a></p>\n<h3 id=\"Hide-network\"><a href=\"#Hide-network\" class=\"headerlink\" title=\"Hide network\"></a>Hide network</h3><p>隐藏网络的错误提示信息</p>\n<h3 id=\"preserve-log\"><a href=\"#preserve-log\" class=\"headerlink\" title=\"preserve log\"></a>preserve log</h3><p>页面跳转时保留console信息</p>\n<h3 id=\"show-timestamps\"><a href=\"#show-timestamps\" class=\"headerlink\" title=\"show timestamps\"></a>show timestamps</h3><p>打印时，会默认输入每一行信息的时间</p>\n<p>打开：devtools右上角设置按钮，perferces下show timestamps</p>\n<p><a href=\"https://imgse.com/i/pCVoGM8\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVoGM8.png\" alt=\"pCVoGM8.png\"></a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$_\"></a>$_</h3><p>作用：获取最近一次的执行结果</p>\n<p><a href=\"https://imgse.com/i/pCVosMT\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVosMT.png\" alt=\"pCVosMT.png\"></a></p>\n<h3 id=\"和\"><a href=\"#和\" class=\"headerlink\" title=\"$和$$\"></a>$和$$</h3><p><code>$</code>：document.querySelector</p>\n<p><code>$$</code>: document.querySelectorAll</p>\n<h3 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"$x\"></a>$x</h3><p>可以使用xpath选择元素。</p>\n<p>eg：$x(“&#x2F;html&#x2F;body&#x2F;div”)</p>\n<p><a href=\"https://imgse.com/i/pCVofiR\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVofiR.png\" alt=\"pCVofiR.png\"></a></p>\n<h3 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h3><p>执行到该函数时就会触发断点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">debug</span>(fn)</span><br><span class=\"line\"><span class=\"title function_\">fn</span>()</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pCVo4Rx\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVo4Rx.png\" alt=\"pCVo4Rx.png\"></a></p>\n<p><a href=\"https://imgse.com/i/pCVooQK\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVooQK.png\" alt=\"pCVooQK.png\"></a></p>\n<h3 id=\"monitor\"><a href=\"#monitor\" class=\"headerlink\" title=\"monitor\"></a>monitor</h3><p>函数执行时打印参数值，但无法打印箭头函数的参数</p>\n<p>执行unmonitor删除效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn3</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">monitor</span>(fn3)</span><br><span class=\"line\"><span class=\"title function_\">fn3</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出：VM3370:1 function fn3 called with arguments: 1, 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"monitroEvents\"><a href=\"#monitroEvents\" class=\"headerlink\" title=\"monitroEvents\"></a>monitroEvents</h3><p>监听并打印元素触发的事件，可以用数组一次性监听多个事件。</p>\n<p>执行unmonitorEvents取消监听</p>\n<h3 id=\"getEventListeners\"><a href=\"#getEventListeners\" class=\"headerlink\" title=\"getEventListeners\"></a>getEventListeners</h3><p>获取注册在元素上的所有事件监听器</p>\n<h3 id=\"queryObjects\"><a href=\"#queryObjects\" class=\"headerlink\" title=\"queryObjects\"></a>queryObjects</h3><p>获取所有原型链中包含该原型的对象</p>\n<h2 id=\"source面板\"><a href=\"#source面板\" class=\"headerlink\" title=\"source面板\"></a>source面板</h2><h3 id=\"FileSystem\"><a href=\"#FileSystem\" class=\"headerlink\" title=\"FileSystem\"></a>FileSystem</h3><p>可以直接与本地的文件连接，在devtools修改文件之后，会将本地的文件内容也进行修改</p>\n<p><a href=\"https://imgse.com/i/pCVXADP\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVXADP.png\" alt=\"pCVXADP.png\"></a></p>\n<h3 id=\"overrides\"><a href=\"#overrides\" class=\"headerlink\" title=\"overrides\"></a>overrides</h3><p>可以以本地的文件取代页面中载入的资源</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><h4 id=\"条件断点\"><a href=\"#条件断点\" class=\"headerlink\" title=\"条件断点\"></a>条件断点</h4><p>在source代码块需要设置时，在对应的行号右键，选择Add Condition Break Point，写上具体的条件</p>\n<p><a href=\"https://imgse.com/i/pCVXrb6\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVXrb6.png\" alt=\"pCVXrb6.png\"></a></p>\n<h4 id=\"断点打印信息，Logpoint\"><a href=\"#断点打印信息，Logpoint\" class=\"headerlink\" title=\"断点打印信息，Logpoint\"></a>断点打印信息，Logpoint</h4><p>在执行时经过该程序代码时打印信息</p>\n<p><a href=\"https://imgse.com/i/pCVXR8H\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVXR8H.png\" alt=\"pCVXR8H.png\"></a></p>\n<h4 id=\"dom断点\"><a href=\"#dom断点\" class=\"headerlink\" title=\"dom断点\"></a>dom断点</h4><p>在element tab，右键元素，展开break on，有三种断点形式：</p>\n<ul>\n<li><p>subtree modifications ：元素内发生变化时暂停，如添加、删除、修改子节点</p>\n</li>\n<li><p>attribute modifications ：添加、删除、修改元素本身的属性时暂停</p>\n</li>\n<li><p>node removal：元素被删除时暂停，同时删除dom断点</p>\n</li>\n</ul>\n<h4 id=\"请求断点\"><a href=\"#请求断点\" class=\"headerlink\" title=\"请求断点\"></a>请求断点</h4><p>在debugger时，点击在XHR&#x2F;fetch Breapoints列表右上角的+按钮，输入data，回车保存。</p>\n<h4 id=\"事件监听器断点\"><a href=\"#事件监听器断点\" class=\"headerlink\" title=\"事件监听器断点\"></a>事件监听器断点</h4><p>在debugger时，在Event Listener BreakPoint列表的Control下勾选对应的事件，然后手动触发对应的事件</p>\n<h4 id=\"忽略进入文件\"><a href=\"#忽略进入文件\" class=\"headerlink\" title=\"忽略进入文件\"></a>忽略进入文件</h4><p>在对应的文件代码内容区域，右键选择Add script to ignore list，添加之后，这个文件就不会在调试时进入了</p>\n<h2 id=\"NetWork\"><a href=\"#NetWork\" class=\"headerlink\" title=\"NetWork\"></a>NetWork</h2><h3 id=\"设置区域\"><a href=\"#设置区域\" class=\"headerlink\" title=\"设置区域\"></a>设置区域</h3><p><a href=\"https://imgse.com/i/pCVjISJ\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVjISJ.png\" alt=\"pCVjISJ.png\"></a></p>\n<ul>\n<li><p>Use large request rows</p>\n<p>使用宽版的流量记录列表来显示</p>\n</li>\n<li><p>Group by frame</p>\n<p>将来自相同iframe的请求聚焦在一起</p>\n</li>\n<li><p>show overview</p>\n<p>是否显示时间轴</p>\n</li>\n</ul>\n<p><a href=\"https://imgse.com/i/pCVj7O1\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVj7O1.png\" alt=\"pCVj7O1.png\"></a></p>\n<ul>\n<li><p>Capture screenslots</p>\n<p>是否截图</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"【devTools】常用面板\"><a href=\"#【devTools】常用面板\" class=\"headerlink\" title=\"【devTools】常用面板\"></a>【devTools】常用面板</h1><h2 id=\"Elements面板\"><a href=\"#Elements面板\" class=\"headerlink\" title=\"Elements面板\"></a>Elements面板</h2><h3 id=\"将元素存入变量\"><a href=\"#将元素存入变量\" class=\"headerlink\" title=\"将元素存入变量\"></a>将元素存入变量</h3><ul>\n<li><p>右击</p>\n</li>\n<li><p>选择store as global variable</p>\n</li>\n<li><p>通过$0、$1…获取对应的元素</p>\n</li>\n</ul>\n<p><a href=\"https://imgse.com/i/pCVIrHH\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVIrHH.png\" alt=\"pCVIrHH.png\"></a></p>\n<h2 id=\"console面板\"><a href=\"#console面板\" class=\"headerlink\" title=\"console面板\"></a>console面板</h2><h3 id=\"自动合并相似信息\"><a href=\"#自动合并相似信息\" class=\"headerlink\" title=\"自动合并相似信息\"></a>自动合并相似信息</h3><p>Group similar message in console，浏览器默认开启的</p>\n<p><a href=\"https://imgse.com/i/pCVoeqe\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVoeqe.png\" alt=\"pCVoeqe.png\"></a></p>\n<h3 id=\"Hide-network\"><a href=\"#Hide-network\" class=\"headerlink\" title=\"Hide network\"></a>Hide network</h3><p>隐藏网络的错误提示信息</p>\n<h3 id=\"preserve-log\"><a href=\"#preserve-log\" class=\"headerlink\" title=\"preserve log\"></a>preserve log</h3><p>页面跳转时保留console信息</p>\n<h3 id=\"show-timestamps\"><a href=\"#show-timestamps\" class=\"headerlink\" title=\"show timestamps\"></a>show timestamps</h3><p>打印时，会默认输入每一行信息的时间</p>\n<p>打开：devtools右上角设置按钮，perferces下show timestamps</p>\n<p><a href=\"https://imgse.com/i/pCVoGM8\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVoGM8.png\" alt=\"pCVoGM8.png\"></a></p>\n<h3 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"$_\"></a>$_</h3><p>作用：获取最近一次的执行结果</p>\n<p><a href=\"https://imgse.com/i/pCVosMT\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVosMT.png\" alt=\"pCVosMT.png\"></a></p>\n<h3 id=\"和\"><a href=\"#和\" class=\"headerlink\" title=\"$和$$\"></a>$和$$</h3><p><code>$</code>：document.querySelector</p>\n<p><code>$$</code>: document.querySelectorAll</p>\n<h3 id=\"x\"><a href=\"#x\" class=\"headerlink\" title=\"$x\"></a>$x</h3><p>可以使用xpath选择元素。</p>\n<p>eg：$x(“&#x2F;html&#x2F;body&#x2F;div”)</p>\n<p><a href=\"https://imgse.com/i/pCVofiR\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVofiR.png\" alt=\"pCVofiR.png\"></a></p>\n<h3 id=\"debug\"><a href=\"#debug\" class=\"headerlink\" title=\"debug\"></a>debug</h3><p>执行到该函数时就会触发断点</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">debug</span>(fn)</span><br><span class=\"line\"><span class=\"title function_\">fn</span>()</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pCVo4Rx\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVo4Rx.png\" alt=\"pCVo4Rx.png\"></a></p>\n<p><a href=\"https://imgse.com/i/pCVooQK\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVooQK.png\" alt=\"pCVooQK.png\"></a></p>\n<h3 id=\"monitor\"><a href=\"#monitor\" class=\"headerlink\" title=\"monitor\"></a>monitor</h3><p>函数执行时打印参数值，但无法打印箭头函数的参数</p>\n<p>执行unmonitor删除效果</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn3</span>(<span class=\"params\">a, b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">monitor</span>(fn3)</span><br><span class=\"line\"><span class=\"title function_\">fn3</span>(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"comment\">//输出：VM3370:1 function fn3 called with arguments: 1, 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"monitroEvents\"><a href=\"#monitroEvents\" class=\"headerlink\" title=\"monitroEvents\"></a>monitroEvents</h3><p>监听并打印元素触发的事件，可以用数组一次性监听多个事件。</p>\n<p>执行unmonitorEvents取消监听</p>\n<h3 id=\"getEventListeners\"><a href=\"#getEventListeners\" class=\"headerlink\" title=\"getEventListeners\"></a>getEventListeners</h3><p>获取注册在元素上的所有事件监听器</p>\n<h3 id=\"queryObjects\"><a href=\"#queryObjects\" class=\"headerlink\" title=\"queryObjects\"></a>queryObjects</h3><p>获取所有原型链中包含该原型的对象</p>\n<h2 id=\"source面板\"><a href=\"#source面板\" class=\"headerlink\" title=\"source面板\"></a>source面板</h2><h3 id=\"FileSystem\"><a href=\"#FileSystem\" class=\"headerlink\" title=\"FileSystem\"></a>FileSystem</h3><p>可以直接与本地的文件连接，在devtools修改文件之后，会将本地的文件内容也进行修改</p>\n<p><a href=\"https://imgse.com/i/pCVXADP\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVXADP.png\" alt=\"pCVXADP.png\"></a></p>\n<h3 id=\"overrides\"><a href=\"#overrides\" class=\"headerlink\" title=\"overrides\"></a>overrides</h3><p>可以以本地的文件取代页面中载入的资源</p>\n<h3 id=\"断点\"><a href=\"#断点\" class=\"headerlink\" title=\"断点\"></a>断点</h3><h4 id=\"条件断点\"><a href=\"#条件断点\" class=\"headerlink\" title=\"条件断点\"></a>条件断点</h4><p>在source代码块需要设置时，在对应的行号右键，选择Add Condition Break Point，写上具体的条件</p>\n<p><a href=\"https://imgse.com/i/pCVXrb6\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVXrb6.png\" alt=\"pCVXrb6.png\"></a></p>\n<h4 id=\"断点打印信息，Logpoint\"><a href=\"#断点打印信息，Logpoint\" class=\"headerlink\" title=\"断点打印信息，Logpoint\"></a>断点打印信息，Logpoint</h4><p>在执行时经过该程序代码时打印信息</p>\n<p><a href=\"https://imgse.com/i/pCVXR8H\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVXR8H.png\" alt=\"pCVXR8H.png\"></a></p>\n<h4 id=\"dom断点\"><a href=\"#dom断点\" class=\"headerlink\" title=\"dom断点\"></a>dom断点</h4><p>在element tab，右键元素，展开break on，有三种断点形式：</p>\n<ul>\n<li><p>subtree modifications ：元素内发生变化时暂停，如添加、删除、修改子节点</p>\n</li>\n<li><p>attribute modifications ：添加、删除、修改元素本身的属性时暂停</p>\n</li>\n<li><p>node removal：元素被删除时暂停，同时删除dom断点</p>\n</li>\n</ul>\n<h4 id=\"请求断点\"><a href=\"#请求断点\" class=\"headerlink\" title=\"请求断点\"></a>请求断点</h4><p>在debugger时，点击在XHR&#x2F;fetch Breapoints列表右上角的+按钮，输入data，回车保存。</p>\n<h4 id=\"事件监听器断点\"><a href=\"#事件监听器断点\" class=\"headerlink\" title=\"事件监听器断点\"></a>事件监听器断点</h4><p>在debugger时，在Event Listener BreakPoint列表的Control下勾选对应的事件，然后手动触发对应的事件</p>\n<h4 id=\"忽略进入文件\"><a href=\"#忽略进入文件\" class=\"headerlink\" title=\"忽略进入文件\"></a>忽略进入文件</h4><p>在对应的文件代码内容区域，右键选择Add script to ignore list，添加之后，这个文件就不会在调试时进入了</p>\n<h2 id=\"NetWork\"><a href=\"#NetWork\" class=\"headerlink\" title=\"NetWork\"></a>NetWork</h2><h3 id=\"设置区域\"><a href=\"#设置区域\" class=\"headerlink\" title=\"设置区域\"></a>设置区域</h3><p><a href=\"https://imgse.com/i/pCVjISJ\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVjISJ.png\" alt=\"pCVjISJ.png\"></a></p>\n<ul>\n<li><p>Use large request rows</p>\n<p>使用宽版的流量记录列表来显示</p>\n</li>\n<li><p>Group by frame</p>\n<p>将来自相同iframe的请求聚焦在一起</p>\n</li>\n<li><p>show overview</p>\n<p>是否显示时间轴</p>\n</li>\n</ul>\n<p><a href=\"https://imgse.com/i/pCVj7O1\"><img src=\"https://s1.ax1x.com/2023/06/11/pCVj7O1.png\" alt=\"pCVj7O1.png\"></a></p>\n<ul>\n<li><p>Capture screenslots</p>\n<p>是否截图</p>\n</li>\n</ul>\n"},{"title":"【css】不常用属性总结","date":"2023-07-28T07:42:03.000Z","_content":"# 【css】、不常用样式总结\n\n## 关于文字换行\n\n- `word-break`\n\n  换行规则\n\n- `white-space`\n\n  保留换行和空格\n\n- `word-wrap`(老) / `overflow-wrap`(新) \n\n- `line-break`\n\n- `hyphens`\n\n  用于英文字符\n\n- <wbr />\n\n  有机会就断开换行\n\n- <br />\n\n  直接换行\n\n  \n## 背景\n\n- `background-size`\n\n- `background-image`\n\n  可以设置多背景\n\n- `background-clip`\n\n  控制背景显示区域，还可以设置文字的渐变色\n\n- `background-origin`\n\n  背景定位原点\n\n- `background-repeat`\n\n  背景图片重复设置\n\n- `background-position`\n\n## 叠加属性\n\n即父组件和子组件 同时设置一个属性，其表现并非是子组件覆盖父组件或者父组件覆盖子组件，而是将其两个属性值进行叠加计算\n\n- `opacity`\n\n  用乘法计算出的结果\n\n- `text-decoration`\n\n  会两个都进行显示\n\n","source":"_posts/css/【css】不常用属性总结.md","raw":"---\ntitle: 【css】不常用属性总结\ndate: 2023-07-28 15:42:03\ncategories: css\n---\n# 【css】、不常用样式总结\n\n## 关于文字换行\n\n- `word-break`\n\n  换行规则\n\n- `white-space`\n\n  保留换行和空格\n\n- `word-wrap`(老) / `overflow-wrap`(新) \n\n- `line-break`\n\n- `hyphens`\n\n  用于英文字符\n\n- <wbr />\n\n  有机会就断开换行\n\n- <br />\n\n  直接换行\n\n  \n## 背景\n\n- `background-size`\n\n- `background-image`\n\n  可以设置多背景\n\n- `background-clip`\n\n  控制背景显示区域，还可以设置文字的渐变色\n\n- `background-origin`\n\n  背景定位原点\n\n- `background-repeat`\n\n  背景图片重复设置\n\n- `background-position`\n\n## 叠加属性\n\n即父组件和子组件 同时设置一个属性，其表现并非是子组件覆盖父组件或者父组件覆盖子组件，而是将其两个属性值进行叠加计算\n\n- `opacity`\n\n  用乘法计算出的结果\n\n- `text-decoration`\n\n  会两个都进行显示\n\n","slug":"css/【css】不常用属性总结","published":1,"updated":"2025-03-06T09:08:26.515Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xs001sbofm60feall2","content":"<h1 id=\"【css】、不常用样式总结\"><a href=\"#【css】、不常用样式总结\" class=\"headerlink\" title=\"【css】、不常用样式总结\"></a>【css】、不常用样式总结</h1><h2 id=\"关于文字换行\"><a href=\"#关于文字换行\" class=\"headerlink\" title=\"关于文字换行\"></a>关于文字换行</h2><ul>\n<li><p><code>word-break</code></p>\n<p>换行规则</p>\n</li>\n<li><p><code>white-space</code></p>\n<p>保留换行和空格</p>\n</li>\n<li><p><code>word-wrap</code>(老) &#x2F; <code>overflow-wrap</code>(新) </p>\n</li>\n<li><p><code>line-break</code></p>\n</li>\n<li><p><code>hyphens</code></p>\n<p>用于英文字符</p>\n</li>\n<li><wbr />\n\n<p>有机会就断开换行</p>\n</li>\n<li><br />\n\n<p>直接换行</p>\n</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li><p><code>background-size</code></p>\n</li>\n<li><p><code>background-image</code></p>\n<p>可以设置多背景</p>\n</li>\n<li><p><code>background-clip</code></p>\n<p>控制背景显示区域，还可以设置文字的渐变色</p>\n</li>\n<li><p><code>background-origin</code></p>\n<p>背景定位原点</p>\n</li>\n<li><p><code>background-repeat</code></p>\n<p>背景图片重复设置</p>\n</li>\n<li><p><code>background-position</code></p>\n</li>\n</ul>\n<h2 id=\"叠加属性\"><a href=\"#叠加属性\" class=\"headerlink\" title=\"叠加属性\"></a>叠加属性</h2><p>即父组件和子组件 同时设置一个属性，其表现并非是子组件覆盖父组件或者父组件覆盖子组件，而是将其两个属性值进行叠加计算</p>\n<ul>\n<li><p><code>opacity</code></p>\n<p>用乘法计算出的结果</p>\n</li>\n<li><p><code>text-decoration</code></p>\n<p>会两个都进行显示</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"【css】、不常用样式总结\"><a href=\"#【css】、不常用样式总结\" class=\"headerlink\" title=\"【css】、不常用样式总结\"></a>【css】、不常用样式总结</h1><h2 id=\"关于文字换行\"><a href=\"#关于文字换行\" class=\"headerlink\" title=\"关于文字换行\"></a>关于文字换行</h2><ul>\n<li><p><code>word-break</code></p>\n<p>换行规则</p>\n</li>\n<li><p><code>white-space</code></p>\n<p>保留换行和空格</p>\n</li>\n<li><p><code>word-wrap</code>(老) &#x2F; <code>overflow-wrap</code>(新) </p>\n</li>\n<li><p><code>line-break</code></p>\n</li>\n<li><p><code>hyphens</code></p>\n<p>用于英文字符</p>\n</li>\n<li><wbr />\n\n<p>有机会就断开换行</p>\n</li>\n<li><br />\n\n<p>直接换行</p>\n</li>\n</ul>\n<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><ul>\n<li><p><code>background-size</code></p>\n</li>\n<li><p><code>background-image</code></p>\n<p>可以设置多背景</p>\n</li>\n<li><p><code>background-clip</code></p>\n<p>控制背景显示区域，还可以设置文字的渐变色</p>\n</li>\n<li><p><code>background-origin</code></p>\n<p>背景定位原点</p>\n</li>\n<li><p><code>background-repeat</code></p>\n<p>背景图片重复设置</p>\n</li>\n<li><p><code>background-position</code></p>\n</li>\n</ul>\n<h2 id=\"叠加属性\"><a href=\"#叠加属性\" class=\"headerlink\" title=\"叠加属性\"></a>叠加属性</h2><p>即父组件和子组件 同时设置一个属性，其表现并非是子组件覆盖父组件或者父组件覆盖子组件，而是将其两个属性值进行叠加计算</p>\n<ul>\n<li><p><code>opacity</code></p>\n<p>用乘法计算出的结果</p>\n</li>\n<li><p><code>text-decoration</code></p>\n<p>会两个都进行显示</p>\n</li>\n</ul>\n"},{"title":"【css】层叠上下文","_content":"# 【css】层叠上下文\n\n## 层叠水平\n\n层叠水平，stacking level，其决定了同一个层叠上下文中元素在z轴上的显示顺序\n\n所有元素都有层叠水平，包括层叠上下文和普通元素。但对于普通元素的层叠水平只局限于当前的层叠上下文中。\n\nzindex在某些情况下可以影响层叠水平，但仅限于定位元素以及flex盒子的子元素，而层叠水平是所有元素都存在。\n\n### flex与zindex\n\nflex布局下zindex生效是父元素设置了flex，子元素设置了zindex，子元素的zindex生效，flex当前元素是不生效的\n- 非flex布局下：\n  遵循后来者居上原则，son3覆盖了son2\n  ``` html\n    .father{\n      width: 600px;\n      height: 150px;\n      z-index: 3;\n      background-color: aquamarine;\n    }\n    .son2{\n      z-index: 2;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      background-color: white;\n    }\n    .son3{\n      z-index: 1;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      margin-left: -20px;\n      background-color: chocolate;\n    }\n    <div class=\"father\">\n      son1\n      <div class=\"son2\">son2</div>\n      <div class=\"son3\">son3</div>\n    </div>\n  ```\n\n  [![pEkTk1U.png](https://s21.ax1x.com/2025/01/20/pEkTk1U.png)](https://imgse.com/i/pEkTk1U)\n\n- flex布局下\n\n  遵循zindex谁大谁上的原则，son2覆盖了son3\n  ``` diff\n    .father{\n      width: 600px;\n      height: 150px;\n      z-index: 3;\n  + display: flex;\n      background-color: aquamarine;\n    }\n    .son2{\n      z-index: 2;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      background-color: white;\n    }\n    .son3{\n      z-index: 1;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      margin-left: -20px;\n      background-color: chocolate;\n    }\n    <div class=\"father\">\n      son1\n      <div class=\"son2\">son2</div>\n      <div class=\"son3\">son3</div>\n    </div>\n  ```\n\n  [![pEkTZnJ.png](https://s21.ax1x.com/2025/01/20/pEkTZnJ.png)](https://imgse.com/i/pEkTZnJ)\n\n## 层叠顺序\n\nstacking order，其表示元素层叠时有特定的垂直显示顺序，其是规则而非概念\n\n### 层叠顺序规则\n\n从下到上的顺序为：\n\n层叠上下文 background/border -> 负zindex -> block块状水平盒子 -> float浮动盒子 -> inline水平盒子 -> zindex=auto/0 -> 正zindex\n\n注：\n\n- 位于最下面的background/border指层叠上下文元素的边框和背景色，每个层叠顺序规则仅适用于当前层叠上下文元素的小世界\n\n- inline水平盒子指的是 inline/inline-block/inline- table\n\n- background/border作为装饰属性，float/block一般用于布局，inline都是内容，而内容的重要性是相对优先的\n\n## 层叠准则\n\n当元素发生层叠的时候，其覆盖关系遵循下面两天准则\n\n- 谁大谁上：当有明显的层叠水平标识时，如生效的zindex，在同一个层叠上下文领域，层叠水平值大的一个覆盖小的一个\n\n- 后来居上：当元素的层叠水平一致、层叠顺序相同时，在dom流中处于后面的元素覆盖前面的元素\n\n## 层叠上下文\n\n### 定义\n\n层叠上下文（Stacking Context）是一个HTML元素的三维概念。在CSS2.1规范中，每个盒模型的位置是三维的，分别是平面画布上的x轴、y轴和表示层叠的z轴。\n\n它是页面中的一部分，决定了元素在**Z轴**上的堆叠顺序。在层叠上下文中，元素可以在三维空间中相对于其他元素前后排列，类似于一叠卡片。\n\n层叠上下文的创建是可以嵌套的，也就是说一个层叠上下文内部可以包含另一个层叠上下文.在这种情况下，内部的层叠上下文会被整体地放在外部层叠上下文的某个层叠等级上，而内部层叠上下文的z-index值不会影响到外部层叠上下文的堆叠顺序。\n\n> 作用\n\n这个概念主要用于解决覆盖和重叠元素的问题，例如当元素的部分透明或定位不同导致元素重叠时，层叠上下文就会决定哪个元素在上面，哪个在下面。\n\n### 特性\n\n- 层叠上下文的层叠水平高于普通元素\n\n- 层叠上下文可以阻断元素的混合模式\n\n- 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文\n\n- 每个层叠上下文和兄弟元素独立，即当进行层叠变化或者渲染时，只需要考虑后代元素\n\n- 每个层叠上下文是自成体系的，当元素发生层叠时，整个元素被认为是在父层叠上下文的层叠顺序中\n\n### 层叠等级\n\n<h1></h1>\n\n层叠等级（stacking level），又称层叠级别、层叠水平。在**同一个**层叠上下文中有作用。\n\n> 作用\n\n- 决定该层叠上下文中的层叠上下文元素在z轴上的上下顺序\n\n- 在普通元素中，它决定这些普通元素在z轴上的上下顺序\n\n### 层叠顺序\n\n<h1></h1>\n\n层叠顺序（stacking order）表示元素发生层叠时有着特定的垂直显示顺序。\n\n注: 层叠上下文和层叠水平是概念，层叠顺序是规则\n\n[![堆叠顺序规则](https://s1.ax1x.com/2023/07/28/pCzHpgf.png)](https://imgse.com/i/pCzHpgf)\n\n\n### 层叠上下文与层叠顺序\n\n- 如果层叠上下文元素不依赖于zindex，其层叠顺序是zindex：auto，可看成zindex=0\n\n- 如果层叠上下文依赖于zindex数值，则层叠顺序由zindex决定\n\n从下到上的顺序为：\n\n层叠上下文 background/border -> 负zindex -> block块状水平盒子 -> float浮动盒子 -> inline水平盒子 -> zindex=auto/0 ，不依赖zindex的层叠上下文-> 正zindex\n\n因此，元素一旦成为定位元素，其zindex会自动生效，此时其zindex就是默认的auto，即0级别，根据上面的层叠顺序表，其会覆盖float/block/inline元素\n\n\n## 触发条件\n\n### 创建\n\n#### 根层叠上下文\n\n指页面根元素，可以看成是html元素.  HTML中的根元素<html></html>本身就具有层叠上下文，称为“根层叠上下文”。这也时绝对定位元素在没有其他定位元素限制时，会相对于浏览器窗口定位的原因。\n\n页面中所有元素一定处于至少一个层叠结界中\n\n#### 定位元素与传统层叠上下文\n\n- position=relative/absolute\n\n- position=fixed（Firefox/ie，不包括chrome\n\nchrome在此情景下，会将此元素作为天然层叠上下文元素\n\n当满足上面其一条件时，zindex！=auto时，会创建层叠上下文\n\n#### css3\n\n- flex元素，同时zindex！= auto\n\n- opacity ！= 1\n\n- mix-blend-mode ！= normal\n\n- filter ！= none\n\n- isolation = isolate\n\n- will-change为上面2～6的任意一个\n\n- -webkit- overflow-scrolling = touch\n\n\n\n## 比较规则\n\n- 同一个层叠上下文中，\n\n  - 元素层级不同\n  \n    比较“内部元素层叠级别”，层叠等级大的元素显示在上，层叠等级小的显示在下\n\n  - 两个元素的层叠等级相同\n  \n    后面元素堆叠到前面元素的上面，即“后来者居上”\n\n- 在不同层叠上下文中\n\n  比较“父级元素层叠等级”，元素显示顺序以“父级”的层叠级别来决定元素的先后顺序，与自身的层叠顺序无关\n\n- 当页面中两个元素发生堆叠时，其或其祖先元素必处于同一层叠上下文（最差情况下同处根层叠上下文）\n\n## 参链\n\n- [层叠上下文、层叠等级、层叠顺序](https://blog.csdn.net/m0_56229413/article/details/115458436)\n","source":"_posts/css/【css】层叠上下文.md","raw":"---\ntitle: 【css】层叠上下文\ncategories: css\n---\n# 【css】层叠上下文\n\n## 层叠水平\n\n层叠水平，stacking level，其决定了同一个层叠上下文中元素在z轴上的显示顺序\n\n所有元素都有层叠水平，包括层叠上下文和普通元素。但对于普通元素的层叠水平只局限于当前的层叠上下文中。\n\nzindex在某些情况下可以影响层叠水平，但仅限于定位元素以及flex盒子的子元素，而层叠水平是所有元素都存在。\n\n### flex与zindex\n\nflex布局下zindex生效是父元素设置了flex，子元素设置了zindex，子元素的zindex生效，flex当前元素是不生效的\n- 非flex布局下：\n  遵循后来者居上原则，son3覆盖了son2\n  ``` html\n    .father{\n      width: 600px;\n      height: 150px;\n      z-index: 3;\n      background-color: aquamarine;\n    }\n    .son2{\n      z-index: 2;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      background-color: white;\n    }\n    .son3{\n      z-index: 1;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      margin-left: -20px;\n      background-color: chocolate;\n    }\n    <div class=\"father\">\n      son1\n      <div class=\"son2\">son2</div>\n      <div class=\"son3\">son3</div>\n    </div>\n  ```\n\n  [![pEkTk1U.png](https://s21.ax1x.com/2025/01/20/pEkTk1U.png)](https://imgse.com/i/pEkTk1U)\n\n- flex布局下\n\n  遵循zindex谁大谁上的原则，son2覆盖了son3\n  ``` diff\n    .father{\n      width: 600px;\n      height: 150px;\n      z-index: 3;\n  + display: flex;\n      background-color: aquamarine;\n    }\n    .son2{\n      z-index: 2;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      background-color: white;\n    }\n    .son3{\n      z-index: 1;\n      width: 150px;\n      height: 150px;\n      display: inline-block;\n      margin-left: -20px;\n      background-color: chocolate;\n    }\n    <div class=\"father\">\n      son1\n      <div class=\"son2\">son2</div>\n      <div class=\"son3\">son3</div>\n    </div>\n  ```\n\n  [![pEkTZnJ.png](https://s21.ax1x.com/2025/01/20/pEkTZnJ.png)](https://imgse.com/i/pEkTZnJ)\n\n## 层叠顺序\n\nstacking order，其表示元素层叠时有特定的垂直显示顺序，其是规则而非概念\n\n### 层叠顺序规则\n\n从下到上的顺序为：\n\n层叠上下文 background/border -> 负zindex -> block块状水平盒子 -> float浮动盒子 -> inline水平盒子 -> zindex=auto/0 -> 正zindex\n\n注：\n\n- 位于最下面的background/border指层叠上下文元素的边框和背景色，每个层叠顺序规则仅适用于当前层叠上下文元素的小世界\n\n- inline水平盒子指的是 inline/inline-block/inline- table\n\n- background/border作为装饰属性，float/block一般用于布局，inline都是内容，而内容的重要性是相对优先的\n\n## 层叠准则\n\n当元素发生层叠的时候，其覆盖关系遵循下面两天准则\n\n- 谁大谁上：当有明显的层叠水平标识时，如生效的zindex，在同一个层叠上下文领域，层叠水平值大的一个覆盖小的一个\n\n- 后来居上：当元素的层叠水平一致、层叠顺序相同时，在dom流中处于后面的元素覆盖前面的元素\n\n## 层叠上下文\n\n### 定义\n\n层叠上下文（Stacking Context）是一个HTML元素的三维概念。在CSS2.1规范中，每个盒模型的位置是三维的，分别是平面画布上的x轴、y轴和表示层叠的z轴。\n\n它是页面中的一部分，决定了元素在**Z轴**上的堆叠顺序。在层叠上下文中，元素可以在三维空间中相对于其他元素前后排列，类似于一叠卡片。\n\n层叠上下文的创建是可以嵌套的，也就是说一个层叠上下文内部可以包含另一个层叠上下文.在这种情况下，内部的层叠上下文会被整体地放在外部层叠上下文的某个层叠等级上，而内部层叠上下文的z-index值不会影响到外部层叠上下文的堆叠顺序。\n\n> 作用\n\n这个概念主要用于解决覆盖和重叠元素的问题，例如当元素的部分透明或定位不同导致元素重叠时，层叠上下文就会决定哪个元素在上面，哪个在下面。\n\n### 特性\n\n- 层叠上下文的层叠水平高于普通元素\n\n- 层叠上下文可以阻断元素的混合模式\n\n- 层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文\n\n- 每个层叠上下文和兄弟元素独立，即当进行层叠变化或者渲染时，只需要考虑后代元素\n\n- 每个层叠上下文是自成体系的，当元素发生层叠时，整个元素被认为是在父层叠上下文的层叠顺序中\n\n### 层叠等级\n\n<h1></h1>\n\n层叠等级（stacking level），又称层叠级别、层叠水平。在**同一个**层叠上下文中有作用。\n\n> 作用\n\n- 决定该层叠上下文中的层叠上下文元素在z轴上的上下顺序\n\n- 在普通元素中，它决定这些普通元素在z轴上的上下顺序\n\n### 层叠顺序\n\n<h1></h1>\n\n层叠顺序（stacking order）表示元素发生层叠时有着特定的垂直显示顺序。\n\n注: 层叠上下文和层叠水平是概念，层叠顺序是规则\n\n[![堆叠顺序规则](https://s1.ax1x.com/2023/07/28/pCzHpgf.png)](https://imgse.com/i/pCzHpgf)\n\n\n### 层叠上下文与层叠顺序\n\n- 如果层叠上下文元素不依赖于zindex，其层叠顺序是zindex：auto，可看成zindex=0\n\n- 如果层叠上下文依赖于zindex数值，则层叠顺序由zindex决定\n\n从下到上的顺序为：\n\n层叠上下文 background/border -> 负zindex -> block块状水平盒子 -> float浮动盒子 -> inline水平盒子 -> zindex=auto/0 ，不依赖zindex的层叠上下文-> 正zindex\n\n因此，元素一旦成为定位元素，其zindex会自动生效，此时其zindex就是默认的auto，即0级别，根据上面的层叠顺序表，其会覆盖float/block/inline元素\n\n\n## 触发条件\n\n### 创建\n\n#### 根层叠上下文\n\n指页面根元素，可以看成是html元素.  HTML中的根元素<html></html>本身就具有层叠上下文，称为“根层叠上下文”。这也时绝对定位元素在没有其他定位元素限制时，会相对于浏览器窗口定位的原因。\n\n页面中所有元素一定处于至少一个层叠结界中\n\n#### 定位元素与传统层叠上下文\n\n- position=relative/absolute\n\n- position=fixed（Firefox/ie，不包括chrome\n\nchrome在此情景下，会将此元素作为天然层叠上下文元素\n\n当满足上面其一条件时，zindex！=auto时，会创建层叠上下文\n\n#### css3\n\n- flex元素，同时zindex！= auto\n\n- opacity ！= 1\n\n- mix-blend-mode ！= normal\n\n- filter ！= none\n\n- isolation = isolate\n\n- will-change为上面2～6的任意一个\n\n- -webkit- overflow-scrolling = touch\n\n\n\n## 比较规则\n\n- 同一个层叠上下文中，\n\n  - 元素层级不同\n  \n    比较“内部元素层叠级别”，层叠等级大的元素显示在上，层叠等级小的显示在下\n\n  - 两个元素的层叠等级相同\n  \n    后面元素堆叠到前面元素的上面，即“后来者居上”\n\n- 在不同层叠上下文中\n\n  比较“父级元素层叠等级”，元素显示顺序以“父级”的层叠级别来决定元素的先后顺序，与自身的层叠顺序无关\n\n- 当页面中两个元素发生堆叠时，其或其祖先元素必处于同一层叠上下文（最差情况下同处根层叠上下文）\n\n## 参链\n\n- [层叠上下文、层叠等级、层叠顺序](https://blog.csdn.net/m0_56229413/article/details/115458436)\n","slug":"css/【css】层叠上下文","published":1,"date":"2025-08-13T07:29:09.393Z","updated":"2025-03-06T09:08:26.515Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xt001tbofmcp5g8dj1","content":"<h1 id=\"【css】层叠上下文\"><a href=\"#【css】层叠上下文\" class=\"headerlink\" title=\"【css】层叠上下文\"></a>【css】层叠上下文</h1><h2 id=\"层叠水平\"><a href=\"#层叠水平\" class=\"headerlink\" title=\"层叠水平\"></a>层叠水平</h2><p>层叠水平，stacking level，其决定了同一个层叠上下文中元素在z轴上的显示顺序</p>\n<p>所有元素都有层叠水平，包括层叠上下文和普通元素。但对于普通元素的层叠水平只局限于当前的层叠上下文中。</p>\n<p>zindex在某些情况下可以影响层叠水平，但仅限于定位元素以及flex盒子的子元素，而层叠水平是所有元素都存在。</p>\n<h3 id=\"flex与zindex\"><a href=\"#flex与zindex\" class=\"headerlink\" title=\"flex与zindex\"></a>flex与zindex</h3><p>flex布局下zindex生效是父元素设置了flex，子元素设置了zindex，子元素的zindex生效，flex当前元素是不生效的</p>\n<ul>\n<li><p>非flex布局下：<br>遵循后来者居上原则，son3覆盖了son2</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.father&#123;</span><br><span class=\"line\">  width: 600px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  z-index: 3;</span><br><span class=\"line\">  background-color: aquamarine;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son2&#123;</span><br><span class=\"line\">  z-index: 2;</span><br><span class=\"line\">  width: 150px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  background-color: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son3&#123;</span><br><span class=\"line\">  z-index: 1;</span><br><span class=\"line\">  width: 150px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  margin-left: -20px;</span><br><span class=\"line\">  background-color: chocolate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">  son1</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son2&quot;</span>&gt;</span>son2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son3&quot;</span>&gt;</span>son3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pEkTk1U\"><img src=\"https://s21.ax1x.com/2025/01/20/pEkTk1U.png\" alt=\"pEkTk1U.png\"></a></p>\n</li>\n<li><p>flex布局下</p>\n<p>遵循zindex谁大谁上的原则，son2覆盖了son3</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  .father&#123;</span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    z-index: 3;</span><br><span class=\"line\"><span class=\"addition\">+ display: flex;</span></span><br><span class=\"line\">    background-color: aquamarine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .son2&#123;</span><br><span class=\"line\">    z-index: 2;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    background-color: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .son3&#123;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin-left: -20px;</span><br><span class=\"line\">    background-color: chocolate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;div class=&quot;father&quot;&gt;</span><br><span class=\"line\">    son1</span><br><span class=\"line\">    &lt;div class=&quot;son2&quot;&gt;son2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;son3&quot;&gt;son3&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pEkTZnJ\"><img src=\"https://s21.ax1x.com/2025/01/20/pEkTZnJ.png\" alt=\"pEkTZnJ.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h2><p>stacking order，其表示元素层叠时有特定的垂直显示顺序，其是规则而非概念</p>\n<h3 id=\"层叠顺序规则\"><a href=\"#层叠顺序规则\" class=\"headerlink\" title=\"层叠顺序规则\"></a>层叠顺序规则</h3><p>从下到上的顺序为：</p>\n<p>层叠上下文 background&#x2F;border -&gt; 负zindex -&gt; block块状水平盒子 -&gt; float浮动盒子 -&gt; inline水平盒子 -&gt; zindex&#x3D;auto&#x2F;0 -&gt; 正zindex</p>\n<p>注：</p>\n<ul>\n<li><p>位于最下面的background&#x2F;border指层叠上下文元素的边框和背景色，每个层叠顺序规则仅适用于当前层叠上下文元素的小世界</p>\n</li>\n<li><p>inline水平盒子指的是 inline&#x2F;inline-block&#x2F;inline- table</p>\n</li>\n<li><p>background&#x2F;border作为装饰属性，float&#x2F;block一般用于布局，inline都是内容，而内容的重要性是相对优先的</p>\n</li>\n</ul>\n<h2 id=\"层叠准则\"><a href=\"#层叠准则\" class=\"headerlink\" title=\"层叠准则\"></a>层叠准则</h2><p>当元素发生层叠的时候，其覆盖关系遵循下面两天准则</p>\n<ul>\n<li><p>谁大谁上：当有明显的层叠水平标识时，如生效的zindex，在同一个层叠上下文领域，层叠水平值大的一个覆盖小的一个</p>\n</li>\n<li><p>后来居上：当元素的层叠水平一致、层叠顺序相同时，在dom流中处于后面的元素覆盖前面的元素</p>\n</li>\n</ul>\n<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>层叠上下文（Stacking Context）是一个HTML元素的三维概念。在CSS2.1规范中，每个盒模型的位置是三维的，分别是平面画布上的x轴、y轴和表示层叠的z轴。</p>\n<p>它是页面中的一部分，决定了元素在<strong>Z轴</strong>上的堆叠顺序。在层叠上下文中，元素可以在三维空间中相对于其他元素前后排列，类似于一叠卡片。</p>\n<p>层叠上下文的创建是可以嵌套的，也就是说一个层叠上下文内部可以包含另一个层叠上下文.在这种情况下，内部的层叠上下文会被整体地放在外部层叠上下文的某个层叠等级上，而内部层叠上下文的z-index值不会影响到外部层叠上下文的堆叠顺序。</p>\n<blockquote>\n<p>作用</p>\n</blockquote>\n<p>这个概念主要用于解决覆盖和重叠元素的问题，例如当元素的部分透明或定位不同导致元素重叠时，层叠上下文就会决定哪个元素在上面，哪个在下面。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li><p>层叠上下文的层叠水平高于普通元素</p>\n</li>\n<li><p>层叠上下文可以阻断元素的混合模式</p>\n</li>\n<li><p>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文</p>\n</li>\n<li><p>每个层叠上下文和兄弟元素独立，即当进行层叠变化或者渲染时，只需要考虑后代元素</p>\n</li>\n<li><p>每个层叠上下文是自成体系的，当元素发生层叠时，整个元素被认为是在父层叠上下文的层叠顺序中</p>\n</li>\n</ul>\n<h3 id=\"层叠等级\"><a href=\"#层叠等级\" class=\"headerlink\" title=\"层叠等级\"></a>层叠等级</h3><h1></h1>\n\n<p>层叠等级（stacking level），又称层叠级别、层叠水平。在<strong>同一个</strong>层叠上下文中有作用。</p>\n<blockquote>\n<p>作用</p>\n</blockquote>\n<ul>\n<li><p>决定该层叠上下文中的层叠上下文元素在z轴上的上下顺序</p>\n</li>\n<li><p>在普通元素中，它决定这些普通元素在z轴上的上下顺序</p>\n</li>\n</ul>\n<h3 id=\"层叠顺序-1\"><a href=\"#层叠顺序-1\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h3><h1></h1>\n\n<p>层叠顺序（stacking order）表示元素发生层叠时有着特定的垂直显示顺序。</p>\n<p>注: 层叠上下文和层叠水平是概念，层叠顺序是规则</p>\n<p><a href=\"https://imgse.com/i/pCzHpgf\"><img src=\"https://s1.ax1x.com/2023/07/28/pCzHpgf.png\" alt=\"堆叠顺序规则\"></a></p>\n<h3 id=\"层叠上下文与层叠顺序\"><a href=\"#层叠上下文与层叠顺序\" class=\"headerlink\" title=\"层叠上下文与层叠顺序\"></a>层叠上下文与层叠顺序</h3><ul>\n<li><p>如果层叠上下文元素不依赖于zindex，其层叠顺序是zindex：auto，可看成zindex&#x3D;0</p>\n</li>\n<li><p>如果层叠上下文依赖于zindex数值，则层叠顺序由zindex决定</p>\n</li>\n</ul>\n<p>从下到上的顺序为：</p>\n<p>层叠上下文 background&#x2F;border -&gt; 负zindex -&gt; block块状水平盒子 -&gt; float浮动盒子 -&gt; inline水平盒子 -&gt; zindex&#x3D;auto&#x2F;0 ，不依赖zindex的层叠上下文-&gt; 正zindex</p>\n<p>因此，元素一旦成为定位元素，其zindex会自动生效，此时其zindex就是默认的auto，即0级别，根据上面的层叠顺序表，其会覆盖float&#x2F;block&#x2F;inline元素</p>\n<h2 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"根层叠上下文\"><a href=\"#根层叠上下文\" class=\"headerlink\" title=\"根层叠上下文\"></a>根层叠上下文</h4><p>指页面根元素，可以看成是html元素.  HTML中的根元素<html></html>本身就具有层叠上下文，称为“根层叠上下文”。这也时绝对定位元素在没有其他定位元素限制时，会相对于浏览器窗口定位的原因。</p>\n<p>页面中所有元素一定处于至少一个层叠结界中</p>\n<h4 id=\"定位元素与传统层叠上下文\"><a href=\"#定位元素与传统层叠上下文\" class=\"headerlink\" title=\"定位元素与传统层叠上下文\"></a>定位元素与传统层叠上下文</h4><ul>\n<li><p>position&#x3D;relative&#x2F;absolute</p>\n</li>\n<li><p>position&#x3D;fixed（Firefox&#x2F;ie，不包括chrome</p>\n</li>\n</ul>\n<p>chrome在此情景下，会将此元素作为天然层叠上下文元素</p>\n<p>当满足上面其一条件时，zindex！&#x3D;auto时，会创建层叠上下文</p>\n<h4 id=\"css3\"><a href=\"#css3\" class=\"headerlink\" title=\"css3\"></a>css3</h4><ul>\n<li><p>flex元素，同时zindex！&#x3D; auto</p>\n</li>\n<li><p>opacity ！&#x3D; 1</p>\n</li>\n<li><p>mix-blend-mode ！&#x3D; normal</p>\n</li>\n<li><p>filter ！&#x3D; none</p>\n</li>\n<li><p>isolation &#x3D; isolate</p>\n</li>\n<li><p>will-change为上面2～6的任意一个</p>\n</li>\n<li><p>-webkit- overflow-scrolling &#x3D; touch</p>\n</li>\n</ul>\n<h2 id=\"比较规则\"><a href=\"#比较规则\" class=\"headerlink\" title=\"比较规则\"></a>比较规则</h2><ul>\n<li><p>同一个层叠上下文中，</p>\n<ul>\n<li><p>元素层级不同</p>\n<p>比较“内部元素层叠级别”，层叠等级大的元素显示在上，层叠等级小的显示在下</p>\n</li>\n<li><p>两个元素的层叠等级相同</p>\n<p>后面元素堆叠到前面元素的上面，即“后来者居上”</p>\n</li>\n</ul>\n</li>\n<li><p>在不同层叠上下文中</p>\n<p>比较“父级元素层叠等级”，元素显示顺序以“父级”的层叠级别来决定元素的先后顺序，与自身的层叠顺序无关</p>\n</li>\n<li><p>当页面中两个元素发生堆叠时，其或其祖先元素必处于同一层叠上下文（最差情况下同处根层叠上下文）</p>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><ul>\n<li><a href=\"https://blog.csdn.net/m0_56229413/article/details/115458436\">层叠上下文、层叠等级、层叠顺序</a></li>\n</ul>\n","excerpt":"","more":"<h1 id=\"【css】层叠上下文\"><a href=\"#【css】层叠上下文\" class=\"headerlink\" title=\"【css】层叠上下文\"></a>【css】层叠上下文</h1><h2 id=\"层叠水平\"><a href=\"#层叠水平\" class=\"headerlink\" title=\"层叠水平\"></a>层叠水平</h2><p>层叠水平，stacking level，其决定了同一个层叠上下文中元素在z轴上的显示顺序</p>\n<p>所有元素都有层叠水平，包括层叠上下文和普通元素。但对于普通元素的层叠水平只局限于当前的层叠上下文中。</p>\n<p>zindex在某些情况下可以影响层叠水平，但仅限于定位元素以及flex盒子的子元素，而层叠水平是所有元素都存在。</p>\n<h3 id=\"flex与zindex\"><a href=\"#flex与zindex\" class=\"headerlink\" title=\"flex与zindex\"></a>flex与zindex</h3><p>flex布局下zindex生效是父元素设置了flex，子元素设置了zindex，子元素的zindex生效，flex当前元素是不生效的</p>\n<ul>\n<li><p>非flex布局下：<br>遵循后来者居上原则，son3覆盖了son2</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.father&#123;</span><br><span class=\"line\">  width: 600px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  z-index: 3;</span><br><span class=\"line\">  background-color: aquamarine;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son2&#123;</span><br><span class=\"line\">  z-index: 2;</span><br><span class=\"line\">  width: 150px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  background-color: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.son3&#123;</span><br><span class=\"line\">  z-index: 1;</span><br><span class=\"line\">  width: 150px;</span><br><span class=\"line\">  height: 150px;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  margin-left: -20px;</span><br><span class=\"line\">  background-color: chocolate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;father&quot;</span>&gt;</span></span><br><span class=\"line\">  son1</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son2&quot;</span>&gt;</span>son2<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;son3&quot;</span>&gt;</span>son3<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pEkTk1U\"><img src=\"https://s21.ax1x.com/2025/01/20/pEkTk1U.png\" alt=\"pEkTk1U.png\"></a></p>\n</li>\n<li><p>flex布局下</p>\n<p>遵循zindex谁大谁上的原则，son2覆盖了son3</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  .father&#123;</span><br><span class=\"line\">    width: 600px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    z-index: 3;</span><br><span class=\"line\"><span class=\"addition\">+ display: flex;</span></span><br><span class=\"line\">    background-color: aquamarine;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .son2&#123;</span><br><span class=\"line\">    z-index: 2;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    background-color: white;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  .son3&#123;</span><br><span class=\"line\">    z-index: 1;</span><br><span class=\"line\">    width: 150px;</span><br><span class=\"line\">    height: 150px;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin-left: -20px;</span><br><span class=\"line\">    background-color: chocolate;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &lt;div class=&quot;father&quot;&gt;</span><br><span class=\"line\">    son1</span><br><span class=\"line\">    &lt;div class=&quot;son2&quot;&gt;son2&lt;/div&gt;</span><br><span class=\"line\">    &lt;div class=&quot;son3&quot;&gt;son3&lt;/div&gt;</span><br><span class=\"line\">  &lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://imgse.com/i/pEkTZnJ\"><img src=\"https://s21.ax1x.com/2025/01/20/pEkTZnJ.png\" alt=\"pEkTZnJ.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"层叠顺序\"><a href=\"#层叠顺序\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h2><p>stacking order，其表示元素层叠时有特定的垂直显示顺序，其是规则而非概念</p>\n<h3 id=\"层叠顺序规则\"><a href=\"#层叠顺序规则\" class=\"headerlink\" title=\"层叠顺序规则\"></a>层叠顺序规则</h3><p>从下到上的顺序为：</p>\n<p>层叠上下文 background&#x2F;border -&gt; 负zindex -&gt; block块状水平盒子 -&gt; float浮动盒子 -&gt; inline水平盒子 -&gt; zindex&#x3D;auto&#x2F;0 -&gt; 正zindex</p>\n<p>注：</p>\n<ul>\n<li><p>位于最下面的background&#x2F;border指层叠上下文元素的边框和背景色，每个层叠顺序规则仅适用于当前层叠上下文元素的小世界</p>\n</li>\n<li><p>inline水平盒子指的是 inline&#x2F;inline-block&#x2F;inline- table</p>\n</li>\n<li><p>background&#x2F;border作为装饰属性，float&#x2F;block一般用于布局，inline都是内容，而内容的重要性是相对优先的</p>\n</li>\n</ul>\n<h2 id=\"层叠准则\"><a href=\"#层叠准则\" class=\"headerlink\" title=\"层叠准则\"></a>层叠准则</h2><p>当元素发生层叠的时候，其覆盖关系遵循下面两天准则</p>\n<ul>\n<li><p>谁大谁上：当有明显的层叠水平标识时，如生效的zindex，在同一个层叠上下文领域，层叠水平值大的一个覆盖小的一个</p>\n</li>\n<li><p>后来居上：当元素的层叠水平一致、层叠顺序相同时，在dom流中处于后面的元素覆盖前面的元素</p>\n</li>\n</ul>\n<h2 id=\"层叠上下文\"><a href=\"#层叠上下文\" class=\"headerlink\" title=\"层叠上下文\"></a>层叠上下文</h2><h3 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h3><p>层叠上下文（Stacking Context）是一个HTML元素的三维概念。在CSS2.1规范中，每个盒模型的位置是三维的，分别是平面画布上的x轴、y轴和表示层叠的z轴。</p>\n<p>它是页面中的一部分，决定了元素在<strong>Z轴</strong>上的堆叠顺序。在层叠上下文中，元素可以在三维空间中相对于其他元素前后排列，类似于一叠卡片。</p>\n<p>层叠上下文的创建是可以嵌套的，也就是说一个层叠上下文内部可以包含另一个层叠上下文.在这种情况下，内部的层叠上下文会被整体地放在外部层叠上下文的某个层叠等级上，而内部层叠上下文的z-index值不会影响到外部层叠上下文的堆叠顺序。</p>\n<blockquote>\n<p>作用</p>\n</blockquote>\n<p>这个概念主要用于解决覆盖和重叠元素的问题，例如当元素的部分透明或定位不同导致元素重叠时，层叠上下文就会决定哪个元素在上面，哪个在下面。</p>\n<h3 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h3><ul>\n<li><p>层叠上下文的层叠水平高于普通元素</p>\n</li>\n<li><p>层叠上下文可以阻断元素的混合模式</p>\n</li>\n<li><p>层叠上下文可以嵌套，内部层叠上下文及其所有子元素均受制于外部的层叠上下文</p>\n</li>\n<li><p>每个层叠上下文和兄弟元素独立，即当进行层叠变化或者渲染时，只需要考虑后代元素</p>\n</li>\n<li><p>每个层叠上下文是自成体系的，当元素发生层叠时，整个元素被认为是在父层叠上下文的层叠顺序中</p>\n</li>\n</ul>\n<h3 id=\"层叠等级\"><a href=\"#层叠等级\" class=\"headerlink\" title=\"层叠等级\"></a>层叠等级</h3><h1></h1>\n\n<p>层叠等级（stacking level），又称层叠级别、层叠水平。在<strong>同一个</strong>层叠上下文中有作用。</p>\n<blockquote>\n<p>作用</p>\n</blockquote>\n<ul>\n<li><p>决定该层叠上下文中的层叠上下文元素在z轴上的上下顺序</p>\n</li>\n<li><p>在普通元素中，它决定这些普通元素在z轴上的上下顺序</p>\n</li>\n</ul>\n<h3 id=\"层叠顺序-1\"><a href=\"#层叠顺序-1\" class=\"headerlink\" title=\"层叠顺序\"></a>层叠顺序</h3><h1></h1>\n\n<p>层叠顺序（stacking order）表示元素发生层叠时有着特定的垂直显示顺序。</p>\n<p>注: 层叠上下文和层叠水平是概念，层叠顺序是规则</p>\n<p><a href=\"https://imgse.com/i/pCzHpgf\"><img src=\"https://s1.ax1x.com/2023/07/28/pCzHpgf.png\" alt=\"堆叠顺序规则\"></a></p>\n<h3 id=\"层叠上下文与层叠顺序\"><a href=\"#层叠上下文与层叠顺序\" class=\"headerlink\" title=\"层叠上下文与层叠顺序\"></a>层叠上下文与层叠顺序</h3><ul>\n<li><p>如果层叠上下文元素不依赖于zindex，其层叠顺序是zindex：auto，可看成zindex&#x3D;0</p>\n</li>\n<li><p>如果层叠上下文依赖于zindex数值，则层叠顺序由zindex决定</p>\n</li>\n</ul>\n<p>从下到上的顺序为：</p>\n<p>层叠上下文 background&#x2F;border -&gt; 负zindex -&gt; block块状水平盒子 -&gt; float浮动盒子 -&gt; inline水平盒子 -&gt; zindex&#x3D;auto&#x2F;0 ，不依赖zindex的层叠上下文-&gt; 正zindex</p>\n<p>因此，元素一旦成为定位元素，其zindex会自动生效，此时其zindex就是默认的auto，即0级别，根据上面的层叠顺序表，其会覆盖float&#x2F;block&#x2F;inline元素</p>\n<h2 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h2><h3 id=\"创建\"><a href=\"#创建\" class=\"headerlink\" title=\"创建\"></a>创建</h3><h4 id=\"根层叠上下文\"><a href=\"#根层叠上下文\" class=\"headerlink\" title=\"根层叠上下文\"></a>根层叠上下文</h4><p>指页面根元素，可以看成是html元素.  HTML中的根元素<html></html>本身就具有层叠上下文，称为“根层叠上下文”。这也时绝对定位元素在没有其他定位元素限制时，会相对于浏览器窗口定位的原因。</p>\n<p>页面中所有元素一定处于至少一个层叠结界中</p>\n<h4 id=\"定位元素与传统层叠上下文\"><a href=\"#定位元素与传统层叠上下文\" class=\"headerlink\" title=\"定位元素与传统层叠上下文\"></a>定位元素与传统层叠上下文</h4><ul>\n<li><p>position&#x3D;relative&#x2F;absolute</p>\n</li>\n<li><p>position&#x3D;fixed（Firefox&#x2F;ie，不包括chrome</p>\n</li>\n</ul>\n<p>chrome在此情景下，会将此元素作为天然层叠上下文元素</p>\n<p>当满足上面其一条件时，zindex！&#x3D;auto时，会创建层叠上下文</p>\n<h4 id=\"css3\"><a href=\"#css3\" class=\"headerlink\" title=\"css3\"></a>css3</h4><ul>\n<li><p>flex元素，同时zindex！&#x3D; auto</p>\n</li>\n<li><p>opacity ！&#x3D; 1</p>\n</li>\n<li><p>mix-blend-mode ！&#x3D; normal</p>\n</li>\n<li><p>filter ！&#x3D; none</p>\n</li>\n<li><p>isolation &#x3D; isolate</p>\n</li>\n<li><p>will-change为上面2～6的任意一个</p>\n</li>\n<li><p>-webkit- overflow-scrolling &#x3D; touch</p>\n</li>\n</ul>\n<h2 id=\"比较规则\"><a href=\"#比较规则\" class=\"headerlink\" title=\"比较规则\"></a>比较规则</h2><ul>\n<li><p>同一个层叠上下文中，</p>\n<ul>\n<li><p>元素层级不同</p>\n<p>比较“内部元素层叠级别”，层叠等级大的元素显示在上，层叠等级小的显示在下</p>\n</li>\n<li><p>两个元素的层叠等级相同</p>\n<p>后面元素堆叠到前面元素的上面，即“后来者居上”</p>\n</li>\n</ul>\n</li>\n<li><p>在不同层叠上下文中</p>\n<p>比较“父级元素层叠等级”，元素显示顺序以“父级”的层叠级别来决定元素的先后顺序，与自身的层叠顺序无关</p>\n</li>\n<li><p>当页面中两个元素发生堆叠时，其或其祖先元素必处于同一层叠上下文（最差情况下同处根层叠上下文）</p>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><ul>\n<li><a href=\"https://blog.csdn.net/m0_56229413/article/details/115458436\">层叠上下文、层叠等级、层叠顺序</a></li>\n</ul>\n"},{"title":"【css】滚动贴合","time":"2023-07-15T02:36:58.000Z","_content":"# 【css】滚动贴合\n\n## scroll-snap-type\n\n### 作用\n\n可以设置滚动贴合的方向和方式。\n\n### 属性\n\n- `none`\n\n    没有贴合点的效果\n\n- `x`/`y` 或者 `inline`/`block`\n\n    - `x`: \n        \n        可以设置水平轴上的捕捉位置\n    \n    - `y`: \n        \n        可以设置垂直轴上的捕捉位置\n    \n    - `block`\n        \n        可以设置块状元素排列一个滚动方向的捕捉位置，默认文档流指的是垂直方向\n\n    - `inline`\n        \n        可以设置内联状元素排列一个滚动方向的捕捉位置，默认文档流指的是水平方向\n\n    在默认文档流的情况下，这`x`和`inline`, `y`和`block`的表现都是一样的。但其实际上还是有区别的\n\n    > `x`和`y`是物理轴，x对应于水平滚动，y对应于垂直滚动。\n\n    > `block`和`inline`是逻辑轴，block对应于垂直滚动，inline对应于水平滚动。\n\n    在改变文档流(`writing-mode`)之后，那么`x`和`inline`的表现就会不一致了。\n\n    <font color=red>普通</font>文档流的情况下，设置的`x`属性，贴合属性的<font color=red>生效</font>\n    [![pC5wZWV.png](https://s1.ax1x.com/2023/07/15/pC5wZWV.png)](https://imgse.com/i/pC5wZWV)\n\n    \n    <font color=red>改变</font>文档流的情况下，设置的`x`属性，贴合属性的<font color=red>不生效</font>\n    [![pC5wnQU.png](https://s1.ax1x.com/2023/07/15/pC5wnQU.png)](https://imgse.com/i/pC5wnQU)\n    \n    <font color=red>改变</font>文档流的情况下，设置的`inline`属性，贴合属性的<font color=red>生效</font>\n    [![pC5wuyF.png](https://s1.ax1x.com/2023/07/15/pC5wuyF.png)](https://imgse.com/i/pC5wuyF)\n\n\n- `both`\n\n   滚动容器会独立捕捉到其两个轴上的位置（可能会捕捉到每个轴上的不同元素）\n\n   不管是正常文档流和改变文档流后，都会被捕获\n\n- `mandatory`和`proximity`\n\n    - `mandatory`    \n\n        滚动操作结束后，滚动容器必须对齐到最近的一个滚动捕捉点。无论用户滚动的距离有多远，都会强制对齐到最近的捕捉点。这种模式下，用户不能停在两个捕捉点之间。\n\n    - `proximity`\n        当滚动操作结束后，只有当最近的滚动捕捉点在一定范围内时，滚动容器才会对齐到该捕捉点。如果最近的捕捉点距离太远，用户可以停在两个捕捉点之间。\n\n    所以，`mandatory`比`proximity`更严格，它会强制滚动容器对齐到最近的滚动捕捉点，而`proximity`则允许用户在两个滚动捕捉点之间停下。\n\n## scroll-snap-align\n\n### 作用\n\n用于子元素的属性，设置其捕获点\n\n### 属性\n\n- `start`\n\n    设置捕获点为元素的起始位置\n\n    [![pC5woYq.png](https://s1.ax1x.com/2023/07/15/pC5woYq.png)](https://imgse.com/i/pC5woYq)\n\n- `center`\n\n    设置捕获点是元素居中\n\n    [![pC5wHpV.png](https://s1.ax1x.com/2023/07/15/pC5wHpV.png)](https://imgse.com/i/pC5wHpV)\n\n- `start`\n\n    设置捕获点为元素的结束位置\n\n    [![pC5wblT.png](https://s1.ax1x.com/2023/07/15/pC5wblT.png)](https://imgse.com/i/pC5wblT)    \n\n## scroll-margin / scroll-padding\n\n### 作用\n\n可以设置贴合间距\n\n[![pC5rEBF.png](https://s1.ax1x.com/2023/07/15/pC5rEBF.png)](https://imgse.com/i/pC5rEBF)\n\n`scroll-margin`是作用于子元素的，而`scroll-margin`是父元素才生效的。这两个属性和`margin`/`padding`一样，可以设置例如`scroll-margin-top`这些属性用于不同方向的样式\n\n## scroll-behavior\n\n### 作用\n\n可以设置滚动时是否需要显示动画\n\n### 属性\n\n- `auto`\n\n    默认值，表示滚动行为立即跳转到目标位置，没有过渡效果\n\n- `smooth`\n\n    滚动行为会平滑地过渡到目标位置，产生一种动画效果。\n\n## `overscroll-behavior`\n\n### 作用\n\n用于控制页面在滚动到底部或顶部时的行为。即如果子元素滚动到最底部后继续滚动，是否需要连带父元素滚动\n\n### 属性\n\n- `auto`\n\n    允许滚动行为传播到父元素\n    \n- `contain`\n\n    防止滚动行为传播到父元素，但允许页面的弹性滚动效果（比如在移动设备上，滚动到底部时页面会稍微弹一下）\n    \n- `none`\n\n    不允许滚动行为传播到父元素\n\n## 兼容性\n\n1. `scroll-snap-type` 和 `scroll-snap-align`：这两个属性在所有主流浏览器中都得到了支持，包括 Firefox、Chrome、Edge、Opera 和 Safari。\n\n2. `scroll-margin`：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了支持，但在 Safari 中的支持情况不太理想。\n\n3. `overscroll-behavior`和`scroll-behavior`：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了很好的支持，但在 Safari 中尚未被支持。","source":"_posts/css/【css】滚动贴合.md","raw":"---\ntitle: 【css】滚动贴合\ntime: 2023-07-15 10:36:58\ncategories: css\n---\n# 【css】滚动贴合\n\n## scroll-snap-type\n\n### 作用\n\n可以设置滚动贴合的方向和方式。\n\n### 属性\n\n- `none`\n\n    没有贴合点的效果\n\n- `x`/`y` 或者 `inline`/`block`\n\n    - `x`: \n        \n        可以设置水平轴上的捕捉位置\n    \n    - `y`: \n        \n        可以设置垂直轴上的捕捉位置\n    \n    - `block`\n        \n        可以设置块状元素排列一个滚动方向的捕捉位置，默认文档流指的是垂直方向\n\n    - `inline`\n        \n        可以设置内联状元素排列一个滚动方向的捕捉位置，默认文档流指的是水平方向\n\n    在默认文档流的情况下，这`x`和`inline`, `y`和`block`的表现都是一样的。但其实际上还是有区别的\n\n    > `x`和`y`是物理轴，x对应于水平滚动，y对应于垂直滚动。\n\n    > `block`和`inline`是逻辑轴，block对应于垂直滚动，inline对应于水平滚动。\n\n    在改变文档流(`writing-mode`)之后，那么`x`和`inline`的表现就会不一致了。\n\n    <font color=red>普通</font>文档流的情况下，设置的`x`属性，贴合属性的<font color=red>生效</font>\n    [![pC5wZWV.png](https://s1.ax1x.com/2023/07/15/pC5wZWV.png)](https://imgse.com/i/pC5wZWV)\n\n    \n    <font color=red>改变</font>文档流的情况下，设置的`x`属性，贴合属性的<font color=red>不生效</font>\n    [![pC5wnQU.png](https://s1.ax1x.com/2023/07/15/pC5wnQU.png)](https://imgse.com/i/pC5wnQU)\n    \n    <font color=red>改变</font>文档流的情况下，设置的`inline`属性，贴合属性的<font color=red>生效</font>\n    [![pC5wuyF.png](https://s1.ax1x.com/2023/07/15/pC5wuyF.png)](https://imgse.com/i/pC5wuyF)\n\n\n- `both`\n\n   滚动容器会独立捕捉到其两个轴上的位置（可能会捕捉到每个轴上的不同元素）\n\n   不管是正常文档流和改变文档流后，都会被捕获\n\n- `mandatory`和`proximity`\n\n    - `mandatory`    \n\n        滚动操作结束后，滚动容器必须对齐到最近的一个滚动捕捉点。无论用户滚动的距离有多远，都会强制对齐到最近的捕捉点。这种模式下，用户不能停在两个捕捉点之间。\n\n    - `proximity`\n        当滚动操作结束后，只有当最近的滚动捕捉点在一定范围内时，滚动容器才会对齐到该捕捉点。如果最近的捕捉点距离太远，用户可以停在两个捕捉点之间。\n\n    所以，`mandatory`比`proximity`更严格，它会强制滚动容器对齐到最近的滚动捕捉点，而`proximity`则允许用户在两个滚动捕捉点之间停下。\n\n## scroll-snap-align\n\n### 作用\n\n用于子元素的属性，设置其捕获点\n\n### 属性\n\n- `start`\n\n    设置捕获点为元素的起始位置\n\n    [![pC5woYq.png](https://s1.ax1x.com/2023/07/15/pC5woYq.png)](https://imgse.com/i/pC5woYq)\n\n- `center`\n\n    设置捕获点是元素居中\n\n    [![pC5wHpV.png](https://s1.ax1x.com/2023/07/15/pC5wHpV.png)](https://imgse.com/i/pC5wHpV)\n\n- `start`\n\n    设置捕获点为元素的结束位置\n\n    [![pC5wblT.png](https://s1.ax1x.com/2023/07/15/pC5wblT.png)](https://imgse.com/i/pC5wblT)    \n\n## scroll-margin / scroll-padding\n\n### 作用\n\n可以设置贴合间距\n\n[![pC5rEBF.png](https://s1.ax1x.com/2023/07/15/pC5rEBF.png)](https://imgse.com/i/pC5rEBF)\n\n`scroll-margin`是作用于子元素的，而`scroll-margin`是父元素才生效的。这两个属性和`margin`/`padding`一样，可以设置例如`scroll-margin-top`这些属性用于不同方向的样式\n\n## scroll-behavior\n\n### 作用\n\n可以设置滚动时是否需要显示动画\n\n### 属性\n\n- `auto`\n\n    默认值，表示滚动行为立即跳转到目标位置，没有过渡效果\n\n- `smooth`\n\n    滚动行为会平滑地过渡到目标位置，产生一种动画效果。\n\n## `overscroll-behavior`\n\n### 作用\n\n用于控制页面在滚动到底部或顶部时的行为。即如果子元素滚动到最底部后继续滚动，是否需要连带父元素滚动\n\n### 属性\n\n- `auto`\n\n    允许滚动行为传播到父元素\n    \n- `contain`\n\n    防止滚动行为传播到父元素，但允许页面的弹性滚动效果（比如在移动设备上，滚动到底部时页面会稍微弹一下）\n    \n- `none`\n\n    不允许滚动行为传播到父元素\n\n## 兼容性\n\n1. `scroll-snap-type` 和 `scroll-snap-align`：这两个属性在所有主流浏览器中都得到了支持，包括 Firefox、Chrome、Edge、Opera 和 Safari。\n\n2. `scroll-margin`：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了支持，但在 Safari 中的支持情况不太理想。\n\n3. `overscroll-behavior`和`scroll-behavior`：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了很好的支持，但在 Safari 中尚未被支持。","slug":"css/【css】滚动贴合","published":1,"date":"2025-08-13T07:29:09.398Z","updated":"2025-03-06T09:08:26.516Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xu001ubofmhcg5dv7f","content":"<h1 id=\"【css】滚动贴合\"><a href=\"#【css】滚动贴合\" class=\"headerlink\" title=\"【css】滚动贴合\"></a>【css】滚动贴合</h1><h2 id=\"scroll-snap-type\"><a href=\"#scroll-snap-type\" class=\"headerlink\" title=\"scroll-snap-type\"></a>scroll-snap-type</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以设置滚动贴合的方向和方式。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>none</code></p>\n<p>  没有贴合点的效果</p>\n</li>\n<li><p><code>x</code>&#x2F;<code>y</code> 或者 <code>inline</code>&#x2F;<code>block</code></p>\n<ul>\n<li><p><code>x</code>: </p>\n<p>  可以设置水平轴上的捕捉位置</p>\n</li>\n<li><p><code>y</code>: </p>\n<p>  可以设置垂直轴上的捕捉位置</p>\n</li>\n<li><p><code>block</code></p>\n<p>  可以设置块状元素排列一个滚动方向的捕捉位置，默认文档流指的是垂直方向</p>\n</li>\n<li><p><code>inline</code></p>\n<p>  可以设置内联状元素排列一个滚动方向的捕捉位置，默认文档流指的是水平方向</p>\n</li>\n</ul>\n<p>  在默认文档流的情况下，这<code>x</code>和<code>inline</code>, <code>y</code>和<code>block</code>的表现都是一样的。但其实际上还是有区别的</p>\n<blockquote>\n<p><code>x</code>和<code>y</code>是物理轴，x对应于水平滚动，y对应于垂直滚动。</p>\n</blockquote>\n<blockquote>\n<p><code>block</code>和<code>inline</code>是逻辑轴，block对应于垂直滚动，inline对应于水平滚动。</p>\n</blockquote>\n<p>  在改变文档流(<code>writing-mode</code>)之后，那么<code>x</code>和<code>inline</code>的表现就会不一致了。</p>\n<p>  <font color=red>普通</font>文档流的情况下，设置的<code>x</code>属性，贴合属性的<font color=red>生效</font><br>  <a href=\"https://imgse.com/i/pC5wZWV\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wZWV.png\" alt=\"pC5wZWV.png\"></a></p>\n<p>  <font color=red>改变</font>文档流的情况下，设置的<code>x</code>属性，贴合属性的<font color=red>不生效</font><br>  <a href=\"https://imgse.com/i/pC5wnQU\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wnQU.png\" alt=\"pC5wnQU.png\"></a></p>\n<p>  <font color=red>改变</font>文档流的情况下，设置的<code>inline</code>属性，贴合属性的<font color=red>生效</font><br>  <a href=\"https://imgse.com/i/pC5wuyF\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wuyF.png\" alt=\"pC5wuyF.png\"></a></p>\n</li>\n<li><p><code>both</code></p>\n<p> 滚动容器会独立捕捉到其两个轴上的位置（可能会捕捉到每个轴上的不同元素）</p>\n<p> 不管是正常文档流和改变文档流后，都会被捕获</p>\n</li>\n<li><p><code>mandatory</code>和<code>proximity</code></p>\n<ul>\n<li><p><code>mandatory</code>    </p>\n<p>  滚动操作结束后，滚动容器必须对齐到最近的一个滚动捕捉点。无论用户滚动的距离有多远，都会强制对齐到最近的捕捉点。这种模式下，用户不能停在两个捕捉点之间。</p>\n</li>\n<li><p><code>proximity</code><br>  当滚动操作结束后，只有当最近的滚动捕捉点在一定范围内时，滚动容器才会对齐到该捕捉点。如果最近的捕捉点距离太远，用户可以停在两个捕捉点之间。</p>\n</li>\n</ul>\n<p>  所以，<code>mandatory</code>比<code>proximity</code>更严格，它会强制滚动容器对齐到最近的滚动捕捉点，而<code>proximity</code>则允许用户在两个滚动捕捉点之间停下。</p>\n</li>\n</ul>\n<h2 id=\"scroll-snap-align\"><a href=\"#scroll-snap-align\" class=\"headerlink\" title=\"scroll-snap-align\"></a>scroll-snap-align</h2><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>用于子元素的属性，设置其捕获点</p>\n<h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>start</code></p>\n<p>  设置捕获点为元素的起始位置</p>\n<p>  <a href=\"https://imgse.com/i/pC5woYq\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5woYq.png\" alt=\"pC5woYq.png\"></a></p>\n</li>\n<li><p><code>center</code></p>\n<p>  设置捕获点是元素居中</p>\n<p>  <a href=\"https://imgse.com/i/pC5wHpV\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wHpV.png\" alt=\"pC5wHpV.png\"></a></p>\n</li>\n<li><p><code>start</code></p>\n<p>  设置捕获点为元素的结束位置</p>\n<p>  <a href=\"https://imgse.com/i/pC5wblT\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wblT.png\" alt=\"pC5wblT.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"scroll-margin-scroll-padding\"><a href=\"#scroll-margin-scroll-padding\" class=\"headerlink\" title=\"scroll-margin &#x2F; scroll-padding\"></a>scroll-margin &#x2F; scroll-padding</h2><h3 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以设置贴合间距</p>\n<p><a href=\"https://imgse.com/i/pC5rEBF\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5rEBF.png\" alt=\"pC5rEBF.png\"></a></p>\n<p><code>scroll-margin</code>是作用于子元素的，而<code>scroll-margin</code>是父元素才生效的。这两个属性和<code>margin</code>&#x2F;<code>padding</code>一样，可以设置例如<code>scroll-margin-top</code>这些属性用于不同方向的样式</p>\n<h2 id=\"scroll-behavior\"><a href=\"#scroll-behavior\" class=\"headerlink\" title=\"scroll-behavior\"></a>scroll-behavior</h2><h3 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以设置滚动时是否需要显示动画</p>\n<h3 id=\"属性-2\"><a href=\"#属性-2\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>auto</code></p>\n<p>  默认值，表示滚动行为立即跳转到目标位置，没有过渡效果</p>\n</li>\n<li><p><code>smooth</code></p>\n<p>  滚动行为会平滑地过渡到目标位置，产生一种动画效果。</p>\n</li>\n</ul>\n<h2 id=\"overscroll-behavior\"><a href=\"#overscroll-behavior\" class=\"headerlink\" title=\"overscroll-behavior\"></a><code>overscroll-behavior</code></h2><h3 id=\"作用-4\"><a href=\"#作用-4\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>用于控制页面在滚动到底部或顶部时的行为。即如果子元素滚动到最底部后继续滚动，是否需要连带父元素滚动</p>\n<h3 id=\"属性-3\"><a href=\"#属性-3\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>auto</code></p>\n<p>  允许滚动行为传播到父元素</p>\n</li>\n<li><p><code>contain</code></p>\n<p>  防止滚动行为传播到父元素，但允许页面的弹性滚动效果（比如在移动设备上，滚动到底部时页面会稍微弹一下）</p>\n</li>\n<li><p><code>none</code></p>\n<p>  不允许滚动行为传播到父元素</p>\n</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><ol>\n<li><p><code>scroll-snap-type</code> 和 <code>scroll-snap-align</code>：这两个属性在所有主流浏览器中都得到了支持，包括 Firefox、Chrome、Edge、Opera 和 Safari。</p>\n</li>\n<li><p><code>scroll-margin</code>：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了支持，但在 Safari 中的支持情况不太理想。</p>\n</li>\n<li><p><code>overscroll-behavior</code>和<code>scroll-behavior</code>：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了很好的支持，但在 Safari 中尚未被支持。</p>\n</li>\n</ol>\n","excerpt":"","more":"<h1 id=\"【css】滚动贴合\"><a href=\"#【css】滚动贴合\" class=\"headerlink\" title=\"【css】滚动贴合\"></a>【css】滚动贴合</h1><h2 id=\"scroll-snap-type\"><a href=\"#scroll-snap-type\" class=\"headerlink\" title=\"scroll-snap-type\"></a>scroll-snap-type</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以设置滚动贴合的方向和方式。</p>\n<h3 id=\"属性\"><a href=\"#属性\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>none</code></p>\n<p>  没有贴合点的效果</p>\n</li>\n<li><p><code>x</code>&#x2F;<code>y</code> 或者 <code>inline</code>&#x2F;<code>block</code></p>\n<ul>\n<li><p><code>x</code>: </p>\n<p>  可以设置水平轴上的捕捉位置</p>\n</li>\n<li><p><code>y</code>: </p>\n<p>  可以设置垂直轴上的捕捉位置</p>\n</li>\n<li><p><code>block</code></p>\n<p>  可以设置块状元素排列一个滚动方向的捕捉位置，默认文档流指的是垂直方向</p>\n</li>\n<li><p><code>inline</code></p>\n<p>  可以设置内联状元素排列一个滚动方向的捕捉位置，默认文档流指的是水平方向</p>\n</li>\n</ul>\n<p>  在默认文档流的情况下，这<code>x</code>和<code>inline</code>, <code>y</code>和<code>block</code>的表现都是一样的。但其实际上还是有区别的</p>\n<blockquote>\n<p><code>x</code>和<code>y</code>是物理轴，x对应于水平滚动，y对应于垂直滚动。</p>\n</blockquote>\n<blockquote>\n<p><code>block</code>和<code>inline</code>是逻辑轴，block对应于垂直滚动，inline对应于水平滚动。</p>\n</blockquote>\n<p>  在改变文档流(<code>writing-mode</code>)之后，那么<code>x</code>和<code>inline</code>的表现就会不一致了。</p>\n<p>  <font color=red>普通</font>文档流的情况下，设置的<code>x</code>属性，贴合属性的<font color=red>生效</font><br>  <a href=\"https://imgse.com/i/pC5wZWV\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wZWV.png\" alt=\"pC5wZWV.png\"></a></p>\n<p>  <font color=red>改变</font>文档流的情况下，设置的<code>x</code>属性，贴合属性的<font color=red>不生效</font><br>  <a href=\"https://imgse.com/i/pC5wnQU\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wnQU.png\" alt=\"pC5wnQU.png\"></a></p>\n<p>  <font color=red>改变</font>文档流的情况下，设置的<code>inline</code>属性，贴合属性的<font color=red>生效</font><br>  <a href=\"https://imgse.com/i/pC5wuyF\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wuyF.png\" alt=\"pC5wuyF.png\"></a></p>\n</li>\n<li><p><code>both</code></p>\n<p> 滚动容器会独立捕捉到其两个轴上的位置（可能会捕捉到每个轴上的不同元素）</p>\n<p> 不管是正常文档流和改变文档流后，都会被捕获</p>\n</li>\n<li><p><code>mandatory</code>和<code>proximity</code></p>\n<ul>\n<li><p><code>mandatory</code>    </p>\n<p>  滚动操作结束后，滚动容器必须对齐到最近的一个滚动捕捉点。无论用户滚动的距离有多远，都会强制对齐到最近的捕捉点。这种模式下，用户不能停在两个捕捉点之间。</p>\n</li>\n<li><p><code>proximity</code><br>  当滚动操作结束后，只有当最近的滚动捕捉点在一定范围内时，滚动容器才会对齐到该捕捉点。如果最近的捕捉点距离太远，用户可以停在两个捕捉点之间。</p>\n</li>\n</ul>\n<p>  所以，<code>mandatory</code>比<code>proximity</code>更严格，它会强制滚动容器对齐到最近的滚动捕捉点，而<code>proximity</code>则允许用户在两个滚动捕捉点之间停下。</p>\n</li>\n</ul>\n<h2 id=\"scroll-snap-align\"><a href=\"#scroll-snap-align\" class=\"headerlink\" title=\"scroll-snap-align\"></a>scroll-snap-align</h2><h3 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>用于子元素的属性，设置其捕获点</p>\n<h3 id=\"属性-1\"><a href=\"#属性-1\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>start</code></p>\n<p>  设置捕获点为元素的起始位置</p>\n<p>  <a href=\"https://imgse.com/i/pC5woYq\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5woYq.png\" alt=\"pC5woYq.png\"></a></p>\n</li>\n<li><p><code>center</code></p>\n<p>  设置捕获点是元素居中</p>\n<p>  <a href=\"https://imgse.com/i/pC5wHpV\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wHpV.png\" alt=\"pC5wHpV.png\"></a></p>\n</li>\n<li><p><code>start</code></p>\n<p>  设置捕获点为元素的结束位置</p>\n<p>  <a href=\"https://imgse.com/i/pC5wblT\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5wblT.png\" alt=\"pC5wblT.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"scroll-margin-scroll-padding\"><a href=\"#scroll-margin-scroll-padding\" class=\"headerlink\" title=\"scroll-margin &#x2F; scroll-padding\"></a>scroll-margin &#x2F; scroll-padding</h2><h3 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以设置贴合间距</p>\n<p><a href=\"https://imgse.com/i/pC5rEBF\"><img src=\"https://s1.ax1x.com/2023/07/15/pC5rEBF.png\" alt=\"pC5rEBF.png\"></a></p>\n<p><code>scroll-margin</code>是作用于子元素的，而<code>scroll-margin</code>是父元素才生效的。这两个属性和<code>margin</code>&#x2F;<code>padding</code>一样，可以设置例如<code>scroll-margin-top</code>这些属性用于不同方向的样式</p>\n<h2 id=\"scroll-behavior\"><a href=\"#scroll-behavior\" class=\"headerlink\" title=\"scroll-behavior\"></a>scroll-behavior</h2><h3 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>可以设置滚动时是否需要显示动画</p>\n<h3 id=\"属性-2\"><a href=\"#属性-2\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>auto</code></p>\n<p>  默认值，表示滚动行为立即跳转到目标位置，没有过渡效果</p>\n</li>\n<li><p><code>smooth</code></p>\n<p>  滚动行为会平滑地过渡到目标位置，产生一种动画效果。</p>\n</li>\n</ul>\n<h2 id=\"overscroll-behavior\"><a href=\"#overscroll-behavior\" class=\"headerlink\" title=\"overscroll-behavior\"></a><code>overscroll-behavior</code></h2><h3 id=\"作用-4\"><a href=\"#作用-4\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>用于控制页面在滚动到底部或顶部时的行为。即如果子元素滚动到最底部后继续滚动，是否需要连带父元素滚动</p>\n<h3 id=\"属性-3\"><a href=\"#属性-3\" class=\"headerlink\" title=\"属性\"></a>属性</h3><ul>\n<li><p><code>auto</code></p>\n<p>  允许滚动行为传播到父元素</p>\n</li>\n<li><p><code>contain</code></p>\n<p>  防止滚动行为传播到父元素，但允许页面的弹性滚动效果（比如在移动设备上，滚动到底部时页面会稍微弹一下）</p>\n</li>\n<li><p><code>none</code></p>\n<p>  不允许滚动行为传播到父元素</p>\n</li>\n</ul>\n<h2 id=\"兼容性\"><a href=\"#兼容性\" class=\"headerlink\" title=\"兼容性\"></a>兼容性</h2><ol>\n<li><p><code>scroll-snap-type</code> 和 <code>scroll-snap-align</code>：这两个属性在所有主流浏览器中都得到了支持，包括 Firefox、Chrome、Edge、Opera 和 Safari。</p>\n</li>\n<li><p><code>scroll-margin</code>：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了支持，但在 Safari 中的支持情况不太理想。</p>\n</li>\n<li><p><code>overscroll-behavior</code>和<code>scroll-behavior</code>：这个属性在 Firefox 和 Chrome（包括基于 Chromium 的浏览器如 Edge 和 Opera）中得到了很好的支持，但在 Safari 中尚未被支持。</p>\n</li>\n</ol>\n"},{"title":"【css】属性值定义语法","date":"2023-10-14T06:00:00.000Z","_content":"# 【css】属性值定义语法\n\ncss属性定义语法是专门用于限定css属性合法取值的语法，其包含3种基本组成元素：\n\n- 关键字\n\n- 数据类型\n\n- 符号\n\n## 分类\n\n### 关键字\n\n其分为通用关键字和全局关键字\n\n- 通用关键字：\n  \n  `auto`, `none`, `ease`等是通用关键字，或者称为普通关键字，这些只能被一部分的css属性支持\n\n- 全局关键字\n\n  `inherit`, `initial`, `unset`和`revert`是全局关键字，被所有css属性支持的特殊关键字\n\n### 数据类型\n\ncss的数据类型有很多，至少有50个，例如number、percent、rgb等，这些都是。以及还有`shape-box`，`basic-shape`，`image`也属于数据类型\n\n- shape-box\n\n  box、margin-box、content-box、padding-box、border-box都是属于其支持的属性值\n\n- basic-shape\n\n  inset()、circle()、ellipse()、polygon()、path()、clip-path和offset-path都属于\n\n- image\n\n  <url>，<gradient>，element()，image()，image-set()，cross-fade()，paint()\n\n### 符号\n\ncss的符号分为字面符号、组合符号以及数量符号\n\n#### 字面符号\n\n指css属性种原本就支持的合法符号，这些符号会在css语法中按照其原本的字面意思呈现\n\n| 符号 | 名称 | 描述 |\n|-----|------| -----|\n|, | 并列分隔符 | 用于分隔数个并列值，或者分隔函数的参数值 |\n| / | 缩写分隔符 | 用于分隔一个值的多个部分，在css缩写中用于分离类型相同但属于不同css属性的值，以及用在部分css函数中 |\n\n#### 组合符号\n\n用于表示数个基本元素之间的组合关系\n\n| 符号 | 名称 | 描述 |\n|-----|------| -----|\n|  | 并列 | 符号为空格字符，表示各部分必须出现，同时需要按照顺序出现 |\n| && | 与 | 各部分必须出现，但可以不按顺序出现 |\n| \\|\\| | 或 | 各部分至少出现一个，可以不按顺序出现 |\n| \\| | 互斥 | 各部分恰好出现其中一个 |\n| [] | 方括号 | 将各部分进行分组以绕过上面几个符号的优先规则，其优先级最高|\n\n#### 数量符号\n\n用于描述一个元素可以出现次数，数量符号不能叠加，且优先级高于组合符号\n\n\n| 符号 | 名称 | 描述 |\n|-----|------| -----|\n|  | 无数量符号 | 恰好出现一次 |\n| * | 星号 | 可以出现任意次数 |\n| + | 加号 | 可以出现一次或者多次 |\n| ？ | 问号 | 可以出现零次或者一次 |\n| {A, B} | 花括号 | 出现最少A次，最多B次 |\n| # | 井号 | 可以出现一次或者多次，但多次出现时必须以逗号分隔 |\n| ！ | 叹号 | 表示当前分组必须产生一个值，该符号多出现在组合符号方括号的后面 |","source":"_posts/css/【css】属性值定义语法.md","raw":"---\ntitle: 【css】属性值定义语法\ndate: 2023-10-14 14:00\ncategories: css\ntag: css\n---\n# 【css】属性值定义语法\n\ncss属性定义语法是专门用于限定css属性合法取值的语法，其包含3种基本组成元素：\n\n- 关键字\n\n- 数据类型\n\n- 符号\n\n## 分类\n\n### 关键字\n\n其分为通用关键字和全局关键字\n\n- 通用关键字：\n  \n  `auto`, `none`, `ease`等是通用关键字，或者称为普通关键字，这些只能被一部分的css属性支持\n\n- 全局关键字\n\n  `inherit`, `initial`, `unset`和`revert`是全局关键字，被所有css属性支持的特殊关键字\n\n### 数据类型\n\ncss的数据类型有很多，至少有50个，例如number、percent、rgb等，这些都是。以及还有`shape-box`，`basic-shape`，`image`也属于数据类型\n\n- shape-box\n\n  box、margin-box、content-box、padding-box、border-box都是属于其支持的属性值\n\n- basic-shape\n\n  inset()、circle()、ellipse()、polygon()、path()、clip-path和offset-path都属于\n\n- image\n\n  <url>，<gradient>，element()，image()，image-set()，cross-fade()，paint()\n\n### 符号\n\ncss的符号分为字面符号、组合符号以及数量符号\n\n#### 字面符号\n\n指css属性种原本就支持的合法符号，这些符号会在css语法中按照其原本的字面意思呈现\n\n| 符号 | 名称 | 描述 |\n|-----|------| -----|\n|, | 并列分隔符 | 用于分隔数个并列值，或者分隔函数的参数值 |\n| / | 缩写分隔符 | 用于分隔一个值的多个部分，在css缩写中用于分离类型相同但属于不同css属性的值，以及用在部分css函数中 |\n\n#### 组合符号\n\n用于表示数个基本元素之间的组合关系\n\n| 符号 | 名称 | 描述 |\n|-----|------| -----|\n|  | 并列 | 符号为空格字符，表示各部分必须出现，同时需要按照顺序出现 |\n| && | 与 | 各部分必须出现，但可以不按顺序出现 |\n| \\|\\| | 或 | 各部分至少出现一个，可以不按顺序出现 |\n| \\| | 互斥 | 各部分恰好出现其中一个 |\n| [] | 方括号 | 将各部分进行分组以绕过上面几个符号的优先规则，其优先级最高|\n\n#### 数量符号\n\n用于描述一个元素可以出现次数，数量符号不能叠加，且优先级高于组合符号\n\n\n| 符号 | 名称 | 描述 |\n|-----|------| -----|\n|  | 无数量符号 | 恰好出现一次 |\n| * | 星号 | 可以出现任意次数 |\n| + | 加号 | 可以出现一次或者多次 |\n| ？ | 问号 | 可以出现零次或者一次 |\n| {A, B} | 花括号 | 出现最少A次，最多B次 |\n| # | 井号 | 可以出现一次或者多次，但多次出现时必须以逗号分隔 |\n| ！ | 叹号 | 表示当前分组必须产生一个值，该符号多出现在组合符号方括号的后面 |","slug":"css/【css】属性值定义语法","published":1,"updated":"2025-03-06T09:08:26.516Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xv001vbofm600p89jh","content":"<h1 id=\"【css】属性值定义语法\"><a href=\"#【css】属性值定义语法\" class=\"headerlink\" title=\"【css】属性值定义语法\"></a>【css】属性值定义语法</h1><p>css属性定义语法是专门用于限定css属性合法取值的语法，其包含3种基本组成元素：</p>\n<ul>\n<li><p>关键字</p>\n</li>\n<li><p>数据类型</p>\n</li>\n<li><p>符号</p>\n</li>\n</ul>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>其分为通用关键字和全局关键字</p>\n<ul>\n<li><p>通用关键字：</p>\n<p><code>auto</code>, <code>none</code>, <code>ease</code>等是通用关键字，或者称为普通关键字，这些只能被一部分的css属性支持</p>\n</li>\n<li><p>全局关键字</p>\n<p><code>inherit</code>, <code>initial</code>, <code>unset</code>和<code>revert</code>是全局关键字，被所有css属性支持的特殊关键字</p>\n</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>css的数据类型有很多，至少有50个，例如number、percent、rgb等，这些都是。以及还有<code>shape-box</code>，<code>basic-shape</code>，<code>image</code>也属于数据类型</p>\n<ul>\n<li><p>shape-box</p>\n<p>box、margin-box、content-box、padding-box、border-box都是属于其支持的属性值</p>\n</li>\n<li><p>basic-shape</p>\n<p>inset()、circle()、ellipse()、polygon()、path()、clip-path和offset-path都属于</p>\n</li>\n<li><p>image</p>\n<p><url>，<gradient>，element()，image()，image-set()，cross-fade()，paint()</p>\n</li>\n</ul>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h3><p>css的符号分为字面符号、组合符号以及数量符号</p>\n<h4 id=\"字面符号\"><a href=\"#字面符号\" class=\"headerlink\" title=\"字面符号\"></a>字面符号</h4><p>指css属性种原本就支持的合法符号，这些符号会在css语法中按照其原本的字面意思呈现</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>,</td>\n<td>并列分隔符</td>\n<td>用于分隔数个并列值，或者分隔函数的参数值</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>缩写分隔符</td>\n<td>用于分隔一个值的多个部分，在css缩写中用于分离类型相同但属于不同css属性的值，以及用在部分css函数中</td>\n</tr>\n</tbody></table>\n<h4 id=\"组合符号\"><a href=\"#组合符号\" class=\"headerlink\" title=\"组合符号\"></a>组合符号</h4><p>用于表示数个基本元素之间的组合关系</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>并列</td>\n<td>符号为空格字符，表示各部分必须出现，同时需要按照顺序出现</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>各部分必须出现，但可以不按顺序出现</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>各部分至少出现一个，可以不按顺序出现</td>\n</tr>\n<tr>\n<td>|</td>\n<td>互斥</td>\n<td>各部分恰好出现其中一个</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>方括号</td>\n<td>将各部分进行分组以绕过上面几个符号的优先规则，其优先级最高</td>\n</tr>\n</tbody></table>\n<h4 id=\"数量符号\"><a href=\"#数量符号\" class=\"headerlink\" title=\"数量符号\"></a>数量符号</h4><p>用于描述一个元素可以出现次数，数量符号不能叠加，且优先级高于组合符号</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>无数量符号</td>\n<td>恰好出现一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>星号</td>\n<td>可以出现任意次数</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>可以出现一次或者多次</td>\n</tr>\n<tr>\n<td>？</td>\n<td>问号</td>\n<td>可以出现零次或者一次</td>\n</tr>\n<tr>\n<td>{A, B}</td>\n<td>花括号</td>\n<td>出现最少A次，最多B次</td>\n</tr>\n<tr>\n<td>#</td>\n<td>井号</td>\n<td>可以出现一次或者多次，但多次出现时必须以逗号分隔</td>\n</tr>\n<tr>\n<td>！</td>\n<td>叹号</td>\n<td>表示当前分组必须产生一个值，该符号多出现在组合符号方括号的后面</td>\n</tr>\n</tbody></table>\n","excerpt":"","more":"<h1 id=\"【css】属性值定义语法\"><a href=\"#【css】属性值定义语法\" class=\"headerlink\" title=\"【css】属性值定义语法\"></a>【css】属性值定义语法</h1><p>css属性定义语法是专门用于限定css属性合法取值的语法，其包含3种基本组成元素：</p>\n<ul>\n<li><p>关键字</p>\n</li>\n<li><p>数据类型</p>\n</li>\n<li><p>符号</p>\n</li>\n</ul>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>其分为通用关键字和全局关键字</p>\n<ul>\n<li><p>通用关键字：</p>\n<p><code>auto</code>, <code>none</code>, <code>ease</code>等是通用关键字，或者称为普通关键字，这些只能被一部分的css属性支持</p>\n</li>\n<li><p>全局关键字</p>\n<p><code>inherit</code>, <code>initial</code>, <code>unset</code>和<code>revert</code>是全局关键字，被所有css属性支持的特殊关键字</p>\n</li>\n</ul>\n<h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>css的数据类型有很多，至少有50个，例如number、percent、rgb等，这些都是。以及还有<code>shape-box</code>，<code>basic-shape</code>，<code>image</code>也属于数据类型</p>\n<ul>\n<li><p>shape-box</p>\n<p>box、margin-box、content-box、padding-box、border-box都是属于其支持的属性值</p>\n</li>\n<li><p>basic-shape</p>\n<p>inset()、circle()、ellipse()、polygon()、path()、clip-path和offset-path都属于</p>\n</li>\n<li><p>image</p>\n<p><url>，<gradient>，element()，image()，image-set()，cross-fade()，paint()</p>\n</li>\n</ul>\n<h3 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h3><p>css的符号分为字面符号、组合符号以及数量符号</p>\n<h4 id=\"字面符号\"><a href=\"#字面符号\" class=\"headerlink\" title=\"字面符号\"></a>字面符号</h4><p>指css属性种原本就支持的合法符号，这些符号会在css语法中按照其原本的字面意思呈现</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>,</td>\n<td>并列分隔符</td>\n<td>用于分隔数个并列值，或者分隔函数的参数值</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>缩写分隔符</td>\n<td>用于分隔一个值的多个部分，在css缩写中用于分离类型相同但属于不同css属性的值，以及用在部分css函数中</td>\n</tr>\n</tbody></table>\n<h4 id=\"组合符号\"><a href=\"#组合符号\" class=\"headerlink\" title=\"组合符号\"></a>组合符号</h4><p>用于表示数个基本元素之间的组合关系</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>并列</td>\n<td>符号为空格字符，表示各部分必须出现，同时需要按照顺序出现</td>\n</tr>\n<tr>\n<td>&amp;&amp;</td>\n<td>与</td>\n<td>各部分必须出现，但可以不按顺序出现</td>\n</tr>\n<tr>\n<td>||</td>\n<td>或</td>\n<td>各部分至少出现一个，可以不按顺序出现</td>\n</tr>\n<tr>\n<td>|</td>\n<td>互斥</td>\n<td>各部分恰好出现其中一个</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>方括号</td>\n<td>将各部分进行分组以绕过上面几个符号的优先规则，其优先级最高</td>\n</tr>\n</tbody></table>\n<h4 id=\"数量符号\"><a href=\"#数量符号\" class=\"headerlink\" title=\"数量符号\"></a>数量符号</h4><p>用于描述一个元素可以出现次数，数量符号不能叠加，且优先级高于组合符号</p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>无数量符号</td>\n<td>恰好出现一次</td>\n</tr>\n<tr>\n<td>*</td>\n<td>星号</td>\n<td>可以出现任意次数</td>\n</tr>\n<tr>\n<td>+</td>\n<td>加号</td>\n<td>可以出现一次或者多次</td>\n</tr>\n<tr>\n<td>？</td>\n<td>问号</td>\n<td>可以出现零次或者一次</td>\n</tr>\n<tr>\n<td>{A, B}</td>\n<td>花括号</td>\n<td>出现最少A次，最多B次</td>\n</tr>\n<tr>\n<td>#</td>\n<td>井号</td>\n<td>可以出现一次或者多次，但多次出现时必须以逗号分隔</td>\n</tr>\n<tr>\n<td>！</td>\n<td>叹号</td>\n<td>表示当前分组必须产生一个值，该符号多出现在组合符号方括号的后面</td>\n</tr>\n</tbody></table>\n"},{"title":"【css】小点","_content":"\n### 块级和行内\n\n行内多为描述性标记，块级多为结构性标记。块级元素即使声明了宽度也独占一行\n\n### link和@import\n\n- 从属关系：\n    - @import是css提供的语法，只有导入样式表的作用\n    - link是html提供的标签，可以加载css文件，也可以定义rss、rel链接属性等\n\n- 加载顺序\n    - @import引入的将会在页面解析完成后被加载\n    - link引入的同时css被加载\n\n- 兼容性\n    - @import是css2.1的特性，在ie5之后才可以使用\n    - link是html标签，兼容性好\n\n- dom可控性\n    - 无法使用@import的方式插入样式，因为dom方法基于文档\n    - 插入link标签可以改变样式，通过js操作dom即可\n\n### css的引入方式\n\n- 内联样式:style\n- 内部样式表:<style></style>标签\n- link引入\n- @import引入\n\n### css3新特性\n- 阴影: box-shadow、text-shadow\n- 圆角: border-raduis\n- 盒子模型: box-sizing\n- 渐变: linear-gradient、radial-gradient\n- 颜色:新增RGB、HSLA模式\n- 过渡: transition\n- 背景: background-size、background-origin、background-clip\n- 伪元素: selection(唯一在css3中新增的)\n- 新增伪类\n    - p: first-of-type: 选择属于其父元素的首个p元素的每个p元素\n    - p:only-of-type: 选择属于其父元素唯一的p元素的每个p元素\n    - p:last-of-type: 选择属于其父元素的最后一个p元素的每个p元素\n    - p:only-child: 选择属于其父元素的唯一子元素的每个p元素\n    - p:nth-child(n): 选择属于其父元素的第n个子元素的每个p元素\n    - :enabled、:disabled: 控制表单控件的禁用状态\n    - :checked: 单选框或复选框被选中\n\n### 为什么需要初始化css\n\n- 浏览器差异\n\n    由于各家浏览器内核可能使用不同,不同浏览器对有些标签的默认值是不同的,如果没有初始化,那么就在不同浏览器中表现会有差异\n\n- 提高编码质量\n\n    如果不初始化,整个页面较乱,重复的css有很多\n\n### 浏览器解析css选择器\n\n浏览器解析加载资源与渲染顺序\n\n- 浏览器下周的顺序从上到下,渲染也是从上到下,下载和渲染并行\n- 渲染在某一部分时,其上的所有部分都已经下载完成(不是所有相关联的元素都已经下载完成,例如img)\n- 如果遇到语义解释性的标签嵌入文件(例如css或js文件),那么ie的下载过程会启用单独连接进行下载,且在下载后进行解析,解析过程中,停止后续元素的下载渲染.此时渲染会被阻塞,必须等js或者css资源加载完毕后才进行后续的渲染\n- 样式表下载完成后,将和之前下载的所有样式表一起进行解析.解析完成后,将会对之前所有的元素(包括已经渲染的)重新进行渲染.\n\n浏览器对css选择器的解析规则\n\n解析是从右到左的,例如p .classA,会先查找classA的元素,再\n去查找classA元素的父元素是否是p标签\n\n### 隐藏元素方法\n\n- display:none\n\n    点击失效,不会占位置\n\n- opacity:0\n\n    占位置,有点击事件\n\n- visible:hidden\n\n    占位置,无点击事件\n\n- background:transparent\n\n    背景色透明化\n\n- position:absolute/fixed + left: -100vw\n\n    移出屏幕\n\n- filter:blur(0)\n\n    将元素模糊度设置为0,从而使元素消失在页面中\n\n- height: 0 + width: 0\n\n    将高度和宽度设置为0,使元素消失在页面中\n\n#### visible:hidden和display:none的区别\n\n- 当父元素设置的visibility:hidden时,子元素会继承这个样式,若子元素设置的visible不是hidden,那么子元素可以显示在页面中\n- transition动画中,visible生效,但是display是无用的\n- visible:hidden不会影响计数器的计数,display:none会\n\ndisplay=none不显示对应的元素及其子元素,在文档布局中不再分配空间(回流+重绘)\n\nvisible=hidden只不再显示当前元素,但是在文档空间中还是会保留这个元素的(重绘)\n\n### css选择器有哪些,哪些可以继承\n\n- class: 可继承\n- id\n- 标签: 可继承\n- 后代选择器: 可继承\n- 群组选择器: 可继承\n\n### font属性设置\n\n缩写:`font: 变体、字号、行高、字体`,使用顺序不区分,但是一般字号和行高写一起,中间用/分开,例如10px/20px\n\nfont属性\n- 大小:font-size\n- 样式:font-style\n- 字重: font-weight\n- 行高: line-height\n- 字体: font-family\n- 大小写: text-transform: uppercase(大写)/lowercase(小写)/capitalize(首字母大写)\n- 修饰: text-decoration: underline(下划线)/overline(上划线)/line-through(删除线)/none(无修饰)\n- 变体: font-variant: small-caps(小型大写字母)/normal(正常)\n\n### line-height\n\n影响\n\n- 代替元素:line-height无影响\n- 非代替元素: line-height影响\n- 行内元素: line-height用于计算line-box高度\n- 块级元素: line-height指定元素内部line-box的最小高度\n\n值类型:\n\n- normal: 取决于用户代理,浏览器使用默认值,大概1.2\n- number: 无单位情况是number * 元素字体大小\n- length: 指定length用于计算line-box高度\n- percentage: 与元素自身的字体大小有关,计算值是给定的百分比 * 元素计算后的字体大小\n\n默认值: normal,可以继承.如果父元素的值是一个百分比,那么子级继承的是父级计算之后的结果\n\n行高: 上下文本行的基线间的垂直距离\n\n行距:一行底线到下一行定县的垂直距离,即第一行线和第二行线之间的垂直距离\n\n半行距=行距的一半=(行高-字体size)/2\n\n### css优化\n\n- 压缩\n- 合理设计,复用,减少渲染时间\n- 合并属性\n- 减少抵消代码例如滤镜、!import引入等\n- 减少css嵌套\n- 减少css rest使用\n- 考虑继承\n- 渲染: 慎用高性能属性(float/定位等); 减少页面重绘重排\n\n### 字体用偶数还是奇数\n\n- 使用偶数较容易和页面中其他部分的字号构成一个比例关系\n- 浏览器原因:低版本的ie6会把奇数字号转为偶数\n- ui设计稿给的大部分是偶数(PS提供偶数)\n\n### first-child和first-of-type区别\n\nfirst-child表示的是父元素其下的第一个元素\n\nfirst-of-type表示的是父元素其下,符合条件的第一个元素,可能并不是第一个元素\n\n### 伪类和伪元素\n\n伪类: 表示元素处于的某种状态\n\n伪元素: 某个元素的子元素,虽然在逻辑上存在,但实际不存在于文档流中\n\n### inline-block和float区别\n\ninline-block: 具有block的属性,但是排列顺序按照inline来定\n\nfloat:当设置元素浮动时,相邻元素会一句自身大小排满一行,如果父容器宽度不够换行.当设置了元素浮动时,元素就已经脱离了文档流了,相邻元素会呈环绕装排列\n\n都可以并行显示,可以设置宽高\n\n区别:\n- inline-block:水平排列一行,即使元素高度不一致,会以高度最大的元素高度未行高,即使高度小的元素周围留空,也不会有第二行的元素上浮补位.可以设置默认的垂直对齐基线\n\n- float: 让元素脱离文档流,呈环绕状排列,如果遇到上行有空白,且当前元素宽度小于等于空白处,那么元素会上行补位.默认顶部对齐\n\n### absolute和float区别\n\nfloat主要调节包围文字,position主要用于调节定位\n\nfloat可以将元素从文档里抽出,并不占文档流的空间.position的absolute和fixed也不会占据文档流,但这两个不适合用于给整个网页做布局,因为这样需要为页面上的每一个元素设置坐标来定位\n\nfloat可以用来做布局\n\n### web安全色\n\n不同的平台(mac,pc等)有不同的调色板,不同浏览器也有不同的调色板,那么就可能会导致同一个图片,在mac和pc浏览器的显示效果有差异\n\n将颜色的十进制/rgb转为十六进制使用S\n\n### float元素浮动\n\n浮动规则: 向指定方向移动,直到碰到包含它的元素或同样float元素的边框.如果元素浮动则不占空间,block元素浮动会失去block属性变为inline-block.但与absolute的元素不影响其他元素不同,float有时会影响周边元素\n\n- float元素前面是非block元素,且这些元素在同一行,则浮动会影响它前面的元素,把它前面的非block元素挤到边上\n- 如果前面非block元素放不下,则去影响它的下一行,此时可以把过长的inline元素们作为一个整体当block去看.如果float元素下面是非block元素,则会把该元素往边上挤;如果下面是block元素,则会覆盖上该元素,但只是背景的覆盖,依然会把该block元素内容挤到边上\n- 如果浮动元素面积够大,并且下面不出现清理浮动的css,那么下面的元素都会有影响\n- 如果给float元素加上偏移,则会挡住其他元素,不管这个元素是block还是inline\n\n#### @font-face\n\ncss功能,允许使用自定义的网络字体\n\n### opacity和background透明色\n\n- opacity:0: 作用于元素以及元素内所有内容的透明度\n- transparent: 只能用于元素颜色或者背景色\n\n### css雪碧图\n\n优点:\n\n- 减少http请求次数,提高页面性能\n- 减少图片总字节,3个图片字节＜3个图片合成的1张图片字节\n- 解决图片命名很多\n- 更换风格方便\n\n缺点\n\n- 在图片合并时,需要把多张图片有序合理的合并为一张图片,还需要留好足够的空间,防止出现不必要的背景.在宽屏、高分辨率的屏幕下自适应页面,如果图片不够宽,容易出现背景断裂\n- 雪碧图在开发时比较麻烦,需要测量每个单元背景的精确位置\n- 维护麻烦,一个图标的改动就需要改动合并的图片\n\n### 获取元素背景色\n\n`getComputedStyle`, 但还需要考虑\n- 硬件加速时,存在layer squashing的情况\n- 存在floating元素显示在任意元素上方的情况\n- 考虑opacity\n- zindex\n\n但当多个元素堆叠在一起或背景色带透明度情况下, 可以使用alpha blending\n\n### px,em和rem\n\npx: 实际上就是像素,用px设置字体时比较稳定和准确.但px不支持用户进行浏览器缩放或者不同移动端的兼容,因为像素是固定的,屏幕大小可能会有变化\n\n    - ie无法调整使用px作为单位的字体大小\n    - px是相对长度单位,是相对于显示器屏幕分辨率而言的\n\nem: 依据父元素的fontsize来决定的.\n\n    - em是相对长度单位,如果当前未对行内文本的字体尺寸设置,那么则相对于浏览器的默认字体尺寸\n    - em不是固定的,会继承父级的字体大小\n\nrem: 依据根元素的fontsize来决定的.\n\n    - 一般来说,1em=1rem=100&=16px\n\n### 屏幕适配方法\n\n- 响应式\n\n    主要是工作量大,维护难\n- 设置viewport进行缩放\n\n    可能会导致页面元素模糊\n- 固定宽度\n\n    在大屏手机上页面看起来小\n\n- 流式布局\n\n    页面布局通过百分比来定义宽度,高度大都使用px固定.因此在大屏幕手机下显示效果比较大,宽度很大\n","source":"_posts/css/小点.md","raw":"---\ntitle: 【css】小点\ncategories: css\n---\n\n### 块级和行内\n\n行内多为描述性标记，块级多为结构性标记。块级元素即使声明了宽度也独占一行\n\n### link和@import\n\n- 从属关系：\n    - @import是css提供的语法，只有导入样式表的作用\n    - link是html提供的标签，可以加载css文件，也可以定义rss、rel链接属性等\n\n- 加载顺序\n    - @import引入的将会在页面解析完成后被加载\n    - link引入的同时css被加载\n\n- 兼容性\n    - @import是css2.1的特性，在ie5之后才可以使用\n    - link是html标签，兼容性好\n\n- dom可控性\n    - 无法使用@import的方式插入样式，因为dom方法基于文档\n    - 插入link标签可以改变样式，通过js操作dom即可\n\n### css的引入方式\n\n- 内联样式:style\n- 内部样式表:<style></style>标签\n- link引入\n- @import引入\n\n### css3新特性\n- 阴影: box-shadow、text-shadow\n- 圆角: border-raduis\n- 盒子模型: box-sizing\n- 渐变: linear-gradient、radial-gradient\n- 颜色:新增RGB、HSLA模式\n- 过渡: transition\n- 背景: background-size、background-origin、background-clip\n- 伪元素: selection(唯一在css3中新增的)\n- 新增伪类\n    - p: first-of-type: 选择属于其父元素的首个p元素的每个p元素\n    - p:only-of-type: 选择属于其父元素唯一的p元素的每个p元素\n    - p:last-of-type: 选择属于其父元素的最后一个p元素的每个p元素\n    - p:only-child: 选择属于其父元素的唯一子元素的每个p元素\n    - p:nth-child(n): 选择属于其父元素的第n个子元素的每个p元素\n    - :enabled、:disabled: 控制表单控件的禁用状态\n    - :checked: 单选框或复选框被选中\n\n### 为什么需要初始化css\n\n- 浏览器差异\n\n    由于各家浏览器内核可能使用不同,不同浏览器对有些标签的默认值是不同的,如果没有初始化,那么就在不同浏览器中表现会有差异\n\n- 提高编码质量\n\n    如果不初始化,整个页面较乱,重复的css有很多\n\n### 浏览器解析css选择器\n\n浏览器解析加载资源与渲染顺序\n\n- 浏览器下周的顺序从上到下,渲染也是从上到下,下载和渲染并行\n- 渲染在某一部分时,其上的所有部分都已经下载完成(不是所有相关联的元素都已经下载完成,例如img)\n- 如果遇到语义解释性的标签嵌入文件(例如css或js文件),那么ie的下载过程会启用单独连接进行下载,且在下载后进行解析,解析过程中,停止后续元素的下载渲染.此时渲染会被阻塞,必须等js或者css资源加载完毕后才进行后续的渲染\n- 样式表下载完成后,将和之前下载的所有样式表一起进行解析.解析完成后,将会对之前所有的元素(包括已经渲染的)重新进行渲染.\n\n浏览器对css选择器的解析规则\n\n解析是从右到左的,例如p .classA,会先查找classA的元素,再\n去查找classA元素的父元素是否是p标签\n\n### 隐藏元素方法\n\n- display:none\n\n    点击失效,不会占位置\n\n- opacity:0\n\n    占位置,有点击事件\n\n- visible:hidden\n\n    占位置,无点击事件\n\n- background:transparent\n\n    背景色透明化\n\n- position:absolute/fixed + left: -100vw\n\n    移出屏幕\n\n- filter:blur(0)\n\n    将元素模糊度设置为0,从而使元素消失在页面中\n\n- height: 0 + width: 0\n\n    将高度和宽度设置为0,使元素消失在页面中\n\n#### visible:hidden和display:none的区别\n\n- 当父元素设置的visibility:hidden时,子元素会继承这个样式,若子元素设置的visible不是hidden,那么子元素可以显示在页面中\n- transition动画中,visible生效,但是display是无用的\n- visible:hidden不会影响计数器的计数,display:none会\n\ndisplay=none不显示对应的元素及其子元素,在文档布局中不再分配空间(回流+重绘)\n\nvisible=hidden只不再显示当前元素,但是在文档空间中还是会保留这个元素的(重绘)\n\n### css选择器有哪些,哪些可以继承\n\n- class: 可继承\n- id\n- 标签: 可继承\n- 后代选择器: 可继承\n- 群组选择器: 可继承\n\n### font属性设置\n\n缩写:`font: 变体、字号、行高、字体`,使用顺序不区分,但是一般字号和行高写一起,中间用/分开,例如10px/20px\n\nfont属性\n- 大小:font-size\n- 样式:font-style\n- 字重: font-weight\n- 行高: line-height\n- 字体: font-family\n- 大小写: text-transform: uppercase(大写)/lowercase(小写)/capitalize(首字母大写)\n- 修饰: text-decoration: underline(下划线)/overline(上划线)/line-through(删除线)/none(无修饰)\n- 变体: font-variant: small-caps(小型大写字母)/normal(正常)\n\n### line-height\n\n影响\n\n- 代替元素:line-height无影响\n- 非代替元素: line-height影响\n- 行内元素: line-height用于计算line-box高度\n- 块级元素: line-height指定元素内部line-box的最小高度\n\n值类型:\n\n- normal: 取决于用户代理,浏览器使用默认值,大概1.2\n- number: 无单位情况是number * 元素字体大小\n- length: 指定length用于计算line-box高度\n- percentage: 与元素自身的字体大小有关,计算值是给定的百分比 * 元素计算后的字体大小\n\n默认值: normal,可以继承.如果父元素的值是一个百分比,那么子级继承的是父级计算之后的结果\n\n行高: 上下文本行的基线间的垂直距离\n\n行距:一行底线到下一行定县的垂直距离,即第一行线和第二行线之间的垂直距离\n\n半行距=行距的一半=(行高-字体size)/2\n\n### css优化\n\n- 压缩\n- 合理设计,复用,减少渲染时间\n- 合并属性\n- 减少抵消代码例如滤镜、!import引入等\n- 减少css嵌套\n- 减少css rest使用\n- 考虑继承\n- 渲染: 慎用高性能属性(float/定位等); 减少页面重绘重排\n\n### 字体用偶数还是奇数\n\n- 使用偶数较容易和页面中其他部分的字号构成一个比例关系\n- 浏览器原因:低版本的ie6会把奇数字号转为偶数\n- ui设计稿给的大部分是偶数(PS提供偶数)\n\n### first-child和first-of-type区别\n\nfirst-child表示的是父元素其下的第一个元素\n\nfirst-of-type表示的是父元素其下,符合条件的第一个元素,可能并不是第一个元素\n\n### 伪类和伪元素\n\n伪类: 表示元素处于的某种状态\n\n伪元素: 某个元素的子元素,虽然在逻辑上存在,但实际不存在于文档流中\n\n### inline-block和float区别\n\ninline-block: 具有block的属性,但是排列顺序按照inline来定\n\nfloat:当设置元素浮动时,相邻元素会一句自身大小排满一行,如果父容器宽度不够换行.当设置了元素浮动时,元素就已经脱离了文档流了,相邻元素会呈环绕装排列\n\n都可以并行显示,可以设置宽高\n\n区别:\n- inline-block:水平排列一行,即使元素高度不一致,会以高度最大的元素高度未行高,即使高度小的元素周围留空,也不会有第二行的元素上浮补位.可以设置默认的垂直对齐基线\n\n- float: 让元素脱离文档流,呈环绕状排列,如果遇到上行有空白,且当前元素宽度小于等于空白处,那么元素会上行补位.默认顶部对齐\n\n### absolute和float区别\n\nfloat主要调节包围文字,position主要用于调节定位\n\nfloat可以将元素从文档里抽出,并不占文档流的空间.position的absolute和fixed也不会占据文档流,但这两个不适合用于给整个网页做布局,因为这样需要为页面上的每一个元素设置坐标来定位\n\nfloat可以用来做布局\n\n### web安全色\n\n不同的平台(mac,pc等)有不同的调色板,不同浏览器也有不同的调色板,那么就可能会导致同一个图片,在mac和pc浏览器的显示效果有差异\n\n将颜色的十进制/rgb转为十六进制使用S\n\n### float元素浮动\n\n浮动规则: 向指定方向移动,直到碰到包含它的元素或同样float元素的边框.如果元素浮动则不占空间,block元素浮动会失去block属性变为inline-block.但与absolute的元素不影响其他元素不同,float有时会影响周边元素\n\n- float元素前面是非block元素,且这些元素在同一行,则浮动会影响它前面的元素,把它前面的非block元素挤到边上\n- 如果前面非block元素放不下,则去影响它的下一行,此时可以把过长的inline元素们作为一个整体当block去看.如果float元素下面是非block元素,则会把该元素往边上挤;如果下面是block元素,则会覆盖上该元素,但只是背景的覆盖,依然会把该block元素内容挤到边上\n- 如果浮动元素面积够大,并且下面不出现清理浮动的css,那么下面的元素都会有影响\n- 如果给float元素加上偏移,则会挡住其他元素,不管这个元素是block还是inline\n\n#### @font-face\n\ncss功能,允许使用自定义的网络字体\n\n### opacity和background透明色\n\n- opacity:0: 作用于元素以及元素内所有内容的透明度\n- transparent: 只能用于元素颜色或者背景色\n\n### css雪碧图\n\n优点:\n\n- 减少http请求次数,提高页面性能\n- 减少图片总字节,3个图片字节＜3个图片合成的1张图片字节\n- 解决图片命名很多\n- 更换风格方便\n\n缺点\n\n- 在图片合并时,需要把多张图片有序合理的合并为一张图片,还需要留好足够的空间,防止出现不必要的背景.在宽屏、高分辨率的屏幕下自适应页面,如果图片不够宽,容易出现背景断裂\n- 雪碧图在开发时比较麻烦,需要测量每个单元背景的精确位置\n- 维护麻烦,一个图标的改动就需要改动合并的图片\n\n### 获取元素背景色\n\n`getComputedStyle`, 但还需要考虑\n- 硬件加速时,存在layer squashing的情况\n- 存在floating元素显示在任意元素上方的情况\n- 考虑opacity\n- zindex\n\n但当多个元素堆叠在一起或背景色带透明度情况下, 可以使用alpha blending\n\n### px,em和rem\n\npx: 实际上就是像素,用px设置字体时比较稳定和准确.但px不支持用户进行浏览器缩放或者不同移动端的兼容,因为像素是固定的,屏幕大小可能会有变化\n\n    - ie无法调整使用px作为单位的字体大小\n    - px是相对长度单位,是相对于显示器屏幕分辨率而言的\n\nem: 依据父元素的fontsize来决定的.\n\n    - em是相对长度单位,如果当前未对行内文本的字体尺寸设置,那么则相对于浏览器的默认字体尺寸\n    - em不是固定的,会继承父级的字体大小\n\nrem: 依据根元素的fontsize来决定的.\n\n    - 一般来说,1em=1rem=100&=16px\n\n### 屏幕适配方法\n\n- 响应式\n\n    主要是工作量大,维护难\n- 设置viewport进行缩放\n\n    可能会导致页面元素模糊\n- 固定宽度\n\n    在大屏手机上页面看起来小\n\n- 流式布局\n\n    页面布局通过百分比来定义宽度,高度大都使用px固定.因此在大屏幕手机下显示效果比较大,宽度很大\n","slug":"css/小点","published":1,"date":"2025-08-13T07:29:09.403Z","updated":"2025-05-04T01:06:06.798Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xw001xbofm97cf6lrz","content":"<h3 id=\"块级和行内\"><a href=\"#块级和行内\" class=\"headerlink\" title=\"块级和行内\"></a>块级和行内</h3><p>行内多为描述性标记，块级多为结构性标记。块级元素即使声明了宽度也独占一行</p>\n<h3 id=\"link和-import\"><a href=\"#link和-import\" class=\"headerlink\" title=\"link和@import\"></a>link和@import</h3><ul>\n<li><p>从属关系：</p>\n<ul>\n<li>@import是css提供的语法，只有导入样式表的作用</li>\n<li>link是html提供的标签，可以加载css文件，也可以定义rss、rel链接属性等</li>\n</ul>\n</li>\n<li><p>加载顺序</p>\n<ul>\n<li>@import引入的将会在页面解析完成后被加载</li>\n<li>link引入的同时css被加载</li>\n</ul>\n</li>\n<li><p>兼容性</p>\n<ul>\n<li>@import是css2.1的特性，在ie5之后才可以使用</li>\n<li>link是html标签，兼容性好</li>\n</ul>\n</li>\n<li><p>dom可控性</p>\n<ul>\n<li>无法使用@import的方式插入样式，因为dom方法基于文档</li>\n<li>插入link标签可以改变样式，通过js操作dom即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"css的引入方式\"><a href=\"#css的引入方式\" class=\"headerlink\" title=\"css的引入方式\"></a>css的引入方式</h3><ul>\n<li>内联样式:style</li>\n<li>内部样式表:<style></style>标签</li>\n<li>link引入</li>\n<li>@import引入</li>\n</ul>\n<h3 id=\"css3新特性\"><a href=\"#css3新特性\" class=\"headerlink\" title=\"css3新特性\"></a>css3新特性</h3><ul>\n<li>阴影: box-shadow、text-shadow</li>\n<li>圆角: border-raduis</li>\n<li>盒子模型: box-sizing</li>\n<li>渐变: linear-gradient、radial-gradient</li>\n<li>颜色:新增RGB、HSLA模式</li>\n<li>过渡: transition</li>\n<li>背景: background-size、background-origin、background-clip</li>\n<li>伪元素: selection(唯一在css3中新增的)</li>\n<li>新增伪类<ul>\n<li>p: first-of-type: 选择属于其父元素的首个p元素的每个p元素</li>\n<li>p:only-of-type: 选择属于其父元素唯一的p元素的每个p元素</li>\n<li>p:last-of-type: 选择属于其父元素的最后一个p元素的每个p元素</li>\n<li>p:only-child: 选择属于其父元素的唯一子元素的每个p元素</li>\n<li>p:nth-child(n): 选择属于其父元素的第n个子元素的每个p元素</li>\n<li>:enabled、:disabled: 控制表单控件的禁用状态</li>\n<li>:checked: 单选框或复选框被选中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么需要初始化css\"><a href=\"#为什么需要初始化css\" class=\"headerlink\" title=\"为什么需要初始化css\"></a>为什么需要初始化css</h3><ul>\n<li><p>浏览器差异</p>\n<p>  由于各家浏览器内核可能使用不同,不同浏览器对有些标签的默认值是不同的,如果没有初始化,那么就在不同浏览器中表现会有差异</p>\n</li>\n<li><p>提高编码质量</p>\n<p>  如果不初始化,整个页面较乱,重复的css有很多</p>\n</li>\n</ul>\n<h3 id=\"浏览器解析css选择器\"><a href=\"#浏览器解析css选择器\" class=\"headerlink\" title=\"浏览器解析css选择器\"></a>浏览器解析css选择器</h3><p>浏览器解析加载资源与渲染顺序</p>\n<ul>\n<li>浏览器下周的顺序从上到下,渲染也是从上到下,下载和渲染并行</li>\n<li>渲染在某一部分时,其上的所有部分都已经下载完成(不是所有相关联的元素都已经下载完成,例如img)</li>\n<li>如果遇到语义解释性的标签嵌入文件(例如css或js文件),那么ie的下载过程会启用单独连接进行下载,且在下载后进行解析,解析过程中,停止后续元素的下载渲染.此时渲染会被阻塞,必须等js或者css资源加载完毕后才进行后续的渲染</li>\n<li>样式表下载完成后,将和之前下载的所有样式表一起进行解析.解析完成后,将会对之前所有的元素(包括已经渲染的)重新进行渲染.</li>\n</ul>\n<p>浏览器对css选择器的解析规则</p>\n<p>解析是从右到左的,例如p .classA,会先查找classA的元素,再<br>去查找classA元素的父元素是否是p标签</p>\n<h3 id=\"隐藏元素方法\"><a href=\"#隐藏元素方法\" class=\"headerlink\" title=\"隐藏元素方法\"></a>隐藏元素方法</h3><ul>\n<li><p>display:none</p>\n<p>  点击失效,不会占位置</p>\n</li>\n<li><p>opacity:0</p>\n<p>  占位置,有点击事件</p>\n</li>\n<li><p>visible:hidden</p>\n<p>  占位置,无点击事件</p>\n</li>\n<li><p>background:transparent</p>\n<p>  背景色透明化</p>\n</li>\n<li><p>position:absolute&#x2F;fixed + left: -100vw</p>\n<p>  移出屏幕</p>\n</li>\n<li><p>filter:blur(0)</p>\n<p>  将元素模糊度设置为0,从而使元素消失在页面中</p>\n</li>\n<li><p>height: 0 + width: 0</p>\n<p>  将高度和宽度设置为0,使元素消失在页面中</p>\n</li>\n</ul>\n<h4 id=\"visible-hidden和display-none的区别\"><a href=\"#visible-hidden和display-none的区别\" class=\"headerlink\" title=\"visible:hidden和display:none的区别\"></a>visible:hidden和display:none的区别</h4><ul>\n<li>当父元素设置的visibility:hidden时,子元素会继承这个样式,若子元素设置的visible不是hidden,那么子元素可以显示在页面中</li>\n<li>transition动画中,visible生效,但是display是无用的</li>\n<li>visible:hidden不会影响计数器的计数,display:none会</li>\n</ul>\n<p>display&#x3D;none不显示对应的元素及其子元素,在文档布局中不再分配空间(回流+重绘)</p>\n<p>visible&#x3D;hidden只不再显示当前元素,但是在文档空间中还是会保留这个元素的(重绘)</p>\n<h3 id=\"css选择器有哪些-哪些可以继承\"><a href=\"#css选择器有哪些-哪些可以继承\" class=\"headerlink\" title=\"css选择器有哪些,哪些可以继承\"></a>css选择器有哪些,哪些可以继承</h3><ul>\n<li>class: 可继承</li>\n<li>id</li>\n<li>标签: 可继承</li>\n<li>后代选择器: 可继承</li>\n<li>群组选择器: 可继承</li>\n</ul>\n<h3 id=\"font属性设置\"><a href=\"#font属性设置\" class=\"headerlink\" title=\"font属性设置\"></a>font属性设置</h3><p>缩写:<code>font: 变体、字号、行高、字体</code>,使用顺序不区分,但是一般字号和行高写一起,中间用&#x2F;分开,例如10px&#x2F;20px</p>\n<p>font属性</p>\n<ul>\n<li>大小:font-size</li>\n<li>样式:font-style</li>\n<li>字重: font-weight</li>\n<li>行高: line-height</li>\n<li>字体: font-family</li>\n<li>大小写: text-transform: uppercase(大写)&#x2F;lowercase(小写)&#x2F;capitalize(首字母大写)</li>\n<li>修饰: text-decoration: underline(下划线)&#x2F;overline(上划线)&#x2F;line-through(删除线)&#x2F;none(无修饰)</li>\n<li>变体: font-variant: small-caps(小型大写字母)&#x2F;normal(正常)</li>\n</ul>\n<h3 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h3><p>影响</p>\n<ul>\n<li>代替元素:line-height无影响</li>\n<li>非代替元素: line-height影响</li>\n<li>行内元素: line-height用于计算line-box高度</li>\n<li>块级元素: line-height指定元素内部line-box的最小高度</li>\n</ul>\n<p>值类型:</p>\n<ul>\n<li>normal: 取决于用户代理,浏览器使用默认值,大概1.2</li>\n<li>number: 无单位情况是number * 元素字体大小</li>\n<li>length: 指定length用于计算line-box高度</li>\n<li>percentage: 与元素自身的字体大小有关,计算值是给定的百分比 * 元素计算后的字体大小</li>\n</ul>\n<p>默认值: normal,可以继承.如果父元素的值是一个百分比,那么子级继承的是父级计算之后的结果</p>\n<p>行高: 上下文本行的基线间的垂直距离</p>\n<p>行距:一行底线到下一行定县的垂直距离,即第一行线和第二行线之间的垂直距离</p>\n<p>半行距&#x3D;行距的一半&#x3D;(行高-字体size)&#x2F;2</p>\n<h3 id=\"css优化\"><a href=\"#css优化\" class=\"headerlink\" title=\"css优化\"></a>css优化</h3><ul>\n<li>压缩</li>\n<li>合理设计,复用,减少渲染时间</li>\n<li>合并属性</li>\n<li>减少抵消代码例如滤镜、!import引入等</li>\n<li>减少css嵌套</li>\n<li>减少css rest使用</li>\n<li>考虑继承</li>\n<li>渲染: 慎用高性能属性(float&#x2F;定位等); 减少页面重绘重排</li>\n</ul>\n<h3 id=\"字体用偶数还是奇数\"><a href=\"#字体用偶数还是奇数\" class=\"headerlink\" title=\"字体用偶数还是奇数\"></a>字体用偶数还是奇数</h3><ul>\n<li>使用偶数较容易和页面中其他部分的字号构成一个比例关系</li>\n<li>浏览器原因:低版本的ie6会把奇数字号转为偶数</li>\n<li>ui设计稿给的大部分是偶数(PS提供偶数)</li>\n</ul>\n<h3 id=\"first-child和first-of-type区别\"><a href=\"#first-child和first-of-type区别\" class=\"headerlink\" title=\"first-child和first-of-type区别\"></a>first-child和first-of-type区别</h3><p>first-child表示的是父元素其下的第一个元素</p>\n<p>first-of-type表示的是父元素其下,符合条件的第一个元素,可能并不是第一个元素</p>\n<h3 id=\"伪类和伪元素\"><a href=\"#伪类和伪元素\" class=\"headerlink\" title=\"伪类和伪元素\"></a>伪类和伪元素</h3><p>伪类: 表示元素处于的某种状态</p>\n<p>伪元素: 某个元素的子元素,虽然在逻辑上存在,但实际不存在于文档流中</p>\n<h3 id=\"inline-block和float区别\"><a href=\"#inline-block和float区别\" class=\"headerlink\" title=\"inline-block和float区别\"></a>inline-block和float区别</h3><p>inline-block: 具有block的属性,但是排列顺序按照inline来定</p>\n<p>float:当设置元素浮动时,相邻元素会一句自身大小排满一行,如果父容器宽度不够换行.当设置了元素浮动时,元素就已经脱离了文档流了,相邻元素会呈环绕装排列</p>\n<p>都可以并行显示,可以设置宽高</p>\n<p>区别:</p>\n<ul>\n<li><p>inline-block:水平排列一行,即使元素高度不一致,会以高度最大的元素高度未行高,即使高度小的元素周围留空,也不会有第二行的元素上浮补位.可以设置默认的垂直对齐基线</p>\n</li>\n<li><p>float: 让元素脱离文档流,呈环绕状排列,如果遇到上行有空白,且当前元素宽度小于等于空白处,那么元素会上行补位.默认顶部对齐</p>\n</li>\n</ul>\n<h3 id=\"absolute和float区别\"><a href=\"#absolute和float区别\" class=\"headerlink\" title=\"absolute和float区别\"></a>absolute和float区别</h3><p>float主要调节包围文字,position主要用于调节定位</p>\n<p>float可以将元素从文档里抽出,并不占文档流的空间.position的absolute和fixed也不会占据文档流,但这两个不适合用于给整个网页做布局,因为这样需要为页面上的每一个元素设置坐标来定位</p>\n<p>float可以用来做布局</p>\n<h3 id=\"web安全色\"><a href=\"#web安全色\" class=\"headerlink\" title=\"web安全色\"></a>web安全色</h3><p>不同的平台(mac,pc等)有不同的调色板,不同浏览器也有不同的调色板,那么就可能会导致同一个图片,在mac和pc浏览器的显示效果有差异</p>\n<p>将颜色的十进制&#x2F;rgb转为十六进制使用S</p>\n<h3 id=\"float元素浮动\"><a href=\"#float元素浮动\" class=\"headerlink\" title=\"float元素浮动\"></a>float元素浮动</h3><p>浮动规则: 向指定方向移动,直到碰到包含它的元素或同样float元素的边框.如果元素浮动则不占空间,block元素浮动会失去block属性变为inline-block.但与absolute的元素不影响其他元素不同,float有时会影响周边元素</p>\n<ul>\n<li>float元素前面是非block元素,且这些元素在同一行,则浮动会影响它前面的元素,把它前面的非block元素挤到边上</li>\n<li>如果前面非block元素放不下,则去影响它的下一行,此时可以把过长的inline元素们作为一个整体当block去看.如果float元素下面是非block元素,则会把该元素往边上挤;如果下面是block元素,则会覆盖上该元素,但只是背景的覆盖,依然会把该block元素内容挤到边上</li>\n<li>如果浮动元素面积够大,并且下面不出现清理浮动的css,那么下面的元素都会有影响</li>\n<li>如果给float元素加上偏移,则会挡住其他元素,不管这个元素是block还是inline</li>\n</ul>\n<h4 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h4><p>css功能,允许使用自定义的网络字体</p>\n<h3 id=\"opacity和background透明色\"><a href=\"#opacity和background透明色\" class=\"headerlink\" title=\"opacity和background透明色\"></a>opacity和background透明色</h3><ul>\n<li>opacity:0: 作用于元素以及元素内所有内容的透明度</li>\n<li>transparent: 只能用于元素颜色或者背景色</li>\n</ul>\n<h3 id=\"css雪碧图\"><a href=\"#css雪碧图\" class=\"headerlink\" title=\"css雪碧图\"></a>css雪碧图</h3><p>优点:</p>\n<ul>\n<li>减少http请求次数,提高页面性能</li>\n<li>减少图片总字节,3个图片字节＜3个图片合成的1张图片字节</li>\n<li>解决图片命名很多</li>\n<li>更换风格方便</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>在图片合并时,需要把多张图片有序合理的合并为一张图片,还需要留好足够的空间,防止出现不必要的背景.在宽屏、高分辨率的屏幕下自适应页面,如果图片不够宽,容易出现背景断裂</li>\n<li>雪碧图在开发时比较麻烦,需要测量每个单元背景的精确位置</li>\n<li>维护麻烦,一个图标的改动就需要改动合并的图片</li>\n</ul>\n<h3 id=\"获取元素背景色\"><a href=\"#获取元素背景色\" class=\"headerlink\" title=\"获取元素背景色\"></a>获取元素背景色</h3><p><code>getComputedStyle</code>, 但还需要考虑</p>\n<ul>\n<li>硬件加速时,存在layer squashing的情况</li>\n<li>存在floating元素显示在任意元素上方的情况</li>\n<li>考虑opacity</li>\n<li>zindex</li>\n</ul>\n<p>但当多个元素堆叠在一起或背景色带透明度情况下, 可以使用alpha blending</p>\n<h3 id=\"px-em和rem\"><a href=\"#px-em和rem\" class=\"headerlink\" title=\"px,em和rem\"></a>px,em和rem</h3><p>px: 实际上就是像素,用px设置字体时比较稳定和准确.但px不支持用户进行浏览器缩放或者不同移动端的兼容,因为像素是固定的,屏幕大小可能会有变化</p>\n<pre><code>- ie无法调整使用px作为单位的字体大小\n- px是相对长度单位,是相对于显示器屏幕分辨率而言的\n</code></pre>\n<p>em: 依据父元素的fontsize来决定的.</p>\n<pre><code>- em是相对长度单位,如果当前未对行内文本的字体尺寸设置,那么则相对于浏览器的默认字体尺寸\n- em不是固定的,会继承父级的字体大小\n</code></pre>\n<p>rem: 依据根元素的fontsize来决定的.</p>\n<pre><code>- 一般来说,1em=1rem=100&amp;=16px\n</code></pre>\n<h3 id=\"屏幕适配方法\"><a href=\"#屏幕适配方法\" class=\"headerlink\" title=\"屏幕适配方法\"></a>屏幕适配方法</h3><ul>\n<li><p>响应式</p>\n<p>  主要是工作量大,维护难</p>\n</li>\n<li><p>设置viewport进行缩放</p>\n<p>  可能会导致页面元素模糊</p>\n</li>\n<li><p>固定宽度</p>\n<p>  在大屏手机上页面看起来小</p>\n</li>\n<li><p>流式布局</p>\n<p>  页面布局通过百分比来定义宽度,高度大都使用px固定.因此在大屏幕手机下显示效果比较大,宽度很大</p>\n</li>\n</ul>\n","excerpt":"","more":"<h3 id=\"块级和行内\"><a href=\"#块级和行内\" class=\"headerlink\" title=\"块级和行内\"></a>块级和行内</h3><p>行内多为描述性标记，块级多为结构性标记。块级元素即使声明了宽度也独占一行</p>\n<h3 id=\"link和-import\"><a href=\"#link和-import\" class=\"headerlink\" title=\"link和@import\"></a>link和@import</h3><ul>\n<li><p>从属关系：</p>\n<ul>\n<li>@import是css提供的语法，只有导入样式表的作用</li>\n<li>link是html提供的标签，可以加载css文件，也可以定义rss、rel链接属性等</li>\n</ul>\n</li>\n<li><p>加载顺序</p>\n<ul>\n<li>@import引入的将会在页面解析完成后被加载</li>\n<li>link引入的同时css被加载</li>\n</ul>\n</li>\n<li><p>兼容性</p>\n<ul>\n<li>@import是css2.1的特性，在ie5之后才可以使用</li>\n<li>link是html标签，兼容性好</li>\n</ul>\n</li>\n<li><p>dom可控性</p>\n<ul>\n<li>无法使用@import的方式插入样式，因为dom方法基于文档</li>\n<li>插入link标签可以改变样式，通过js操作dom即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"css的引入方式\"><a href=\"#css的引入方式\" class=\"headerlink\" title=\"css的引入方式\"></a>css的引入方式</h3><ul>\n<li>内联样式:style</li>\n<li>内部样式表:<style></style>标签</li>\n<li>link引入</li>\n<li>@import引入</li>\n</ul>\n<h3 id=\"css3新特性\"><a href=\"#css3新特性\" class=\"headerlink\" title=\"css3新特性\"></a>css3新特性</h3><ul>\n<li>阴影: box-shadow、text-shadow</li>\n<li>圆角: border-raduis</li>\n<li>盒子模型: box-sizing</li>\n<li>渐变: linear-gradient、radial-gradient</li>\n<li>颜色:新增RGB、HSLA模式</li>\n<li>过渡: transition</li>\n<li>背景: background-size、background-origin、background-clip</li>\n<li>伪元素: selection(唯一在css3中新增的)</li>\n<li>新增伪类<ul>\n<li>p: first-of-type: 选择属于其父元素的首个p元素的每个p元素</li>\n<li>p:only-of-type: 选择属于其父元素唯一的p元素的每个p元素</li>\n<li>p:last-of-type: 选择属于其父元素的最后一个p元素的每个p元素</li>\n<li>p:only-child: 选择属于其父元素的唯一子元素的每个p元素</li>\n<li>p:nth-child(n): 选择属于其父元素的第n个子元素的每个p元素</li>\n<li>:enabled、:disabled: 控制表单控件的禁用状态</li>\n<li>:checked: 单选框或复选框被选中</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"为什么需要初始化css\"><a href=\"#为什么需要初始化css\" class=\"headerlink\" title=\"为什么需要初始化css\"></a>为什么需要初始化css</h3><ul>\n<li><p>浏览器差异</p>\n<p>  由于各家浏览器内核可能使用不同,不同浏览器对有些标签的默认值是不同的,如果没有初始化,那么就在不同浏览器中表现会有差异</p>\n</li>\n<li><p>提高编码质量</p>\n<p>  如果不初始化,整个页面较乱,重复的css有很多</p>\n</li>\n</ul>\n<h3 id=\"浏览器解析css选择器\"><a href=\"#浏览器解析css选择器\" class=\"headerlink\" title=\"浏览器解析css选择器\"></a>浏览器解析css选择器</h3><p>浏览器解析加载资源与渲染顺序</p>\n<ul>\n<li>浏览器下周的顺序从上到下,渲染也是从上到下,下载和渲染并行</li>\n<li>渲染在某一部分时,其上的所有部分都已经下载完成(不是所有相关联的元素都已经下载完成,例如img)</li>\n<li>如果遇到语义解释性的标签嵌入文件(例如css或js文件),那么ie的下载过程会启用单独连接进行下载,且在下载后进行解析,解析过程中,停止后续元素的下载渲染.此时渲染会被阻塞,必须等js或者css资源加载完毕后才进行后续的渲染</li>\n<li>样式表下载完成后,将和之前下载的所有样式表一起进行解析.解析完成后,将会对之前所有的元素(包括已经渲染的)重新进行渲染.</li>\n</ul>\n<p>浏览器对css选择器的解析规则</p>\n<p>解析是从右到左的,例如p .classA,会先查找classA的元素,再<br>去查找classA元素的父元素是否是p标签</p>\n<h3 id=\"隐藏元素方法\"><a href=\"#隐藏元素方法\" class=\"headerlink\" title=\"隐藏元素方法\"></a>隐藏元素方法</h3><ul>\n<li><p>display:none</p>\n<p>  点击失效,不会占位置</p>\n</li>\n<li><p>opacity:0</p>\n<p>  占位置,有点击事件</p>\n</li>\n<li><p>visible:hidden</p>\n<p>  占位置,无点击事件</p>\n</li>\n<li><p>background:transparent</p>\n<p>  背景色透明化</p>\n</li>\n<li><p>position:absolute&#x2F;fixed + left: -100vw</p>\n<p>  移出屏幕</p>\n</li>\n<li><p>filter:blur(0)</p>\n<p>  将元素模糊度设置为0,从而使元素消失在页面中</p>\n</li>\n<li><p>height: 0 + width: 0</p>\n<p>  将高度和宽度设置为0,使元素消失在页面中</p>\n</li>\n</ul>\n<h4 id=\"visible-hidden和display-none的区别\"><a href=\"#visible-hidden和display-none的区别\" class=\"headerlink\" title=\"visible:hidden和display:none的区别\"></a>visible:hidden和display:none的区别</h4><ul>\n<li>当父元素设置的visibility:hidden时,子元素会继承这个样式,若子元素设置的visible不是hidden,那么子元素可以显示在页面中</li>\n<li>transition动画中,visible生效,但是display是无用的</li>\n<li>visible:hidden不会影响计数器的计数,display:none会</li>\n</ul>\n<p>display&#x3D;none不显示对应的元素及其子元素,在文档布局中不再分配空间(回流+重绘)</p>\n<p>visible&#x3D;hidden只不再显示当前元素,但是在文档空间中还是会保留这个元素的(重绘)</p>\n<h3 id=\"css选择器有哪些-哪些可以继承\"><a href=\"#css选择器有哪些-哪些可以继承\" class=\"headerlink\" title=\"css选择器有哪些,哪些可以继承\"></a>css选择器有哪些,哪些可以继承</h3><ul>\n<li>class: 可继承</li>\n<li>id</li>\n<li>标签: 可继承</li>\n<li>后代选择器: 可继承</li>\n<li>群组选择器: 可继承</li>\n</ul>\n<h3 id=\"font属性设置\"><a href=\"#font属性设置\" class=\"headerlink\" title=\"font属性设置\"></a>font属性设置</h3><p>缩写:<code>font: 变体、字号、行高、字体</code>,使用顺序不区分,但是一般字号和行高写一起,中间用&#x2F;分开,例如10px&#x2F;20px</p>\n<p>font属性</p>\n<ul>\n<li>大小:font-size</li>\n<li>样式:font-style</li>\n<li>字重: font-weight</li>\n<li>行高: line-height</li>\n<li>字体: font-family</li>\n<li>大小写: text-transform: uppercase(大写)&#x2F;lowercase(小写)&#x2F;capitalize(首字母大写)</li>\n<li>修饰: text-decoration: underline(下划线)&#x2F;overline(上划线)&#x2F;line-through(删除线)&#x2F;none(无修饰)</li>\n<li>变体: font-variant: small-caps(小型大写字母)&#x2F;normal(正常)</li>\n</ul>\n<h3 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h3><p>影响</p>\n<ul>\n<li>代替元素:line-height无影响</li>\n<li>非代替元素: line-height影响</li>\n<li>行内元素: line-height用于计算line-box高度</li>\n<li>块级元素: line-height指定元素内部line-box的最小高度</li>\n</ul>\n<p>值类型:</p>\n<ul>\n<li>normal: 取决于用户代理,浏览器使用默认值,大概1.2</li>\n<li>number: 无单位情况是number * 元素字体大小</li>\n<li>length: 指定length用于计算line-box高度</li>\n<li>percentage: 与元素自身的字体大小有关,计算值是给定的百分比 * 元素计算后的字体大小</li>\n</ul>\n<p>默认值: normal,可以继承.如果父元素的值是一个百分比,那么子级继承的是父级计算之后的结果</p>\n<p>行高: 上下文本行的基线间的垂直距离</p>\n<p>行距:一行底线到下一行定县的垂直距离,即第一行线和第二行线之间的垂直距离</p>\n<p>半行距&#x3D;行距的一半&#x3D;(行高-字体size)&#x2F;2</p>\n<h3 id=\"css优化\"><a href=\"#css优化\" class=\"headerlink\" title=\"css优化\"></a>css优化</h3><ul>\n<li>压缩</li>\n<li>合理设计,复用,减少渲染时间</li>\n<li>合并属性</li>\n<li>减少抵消代码例如滤镜、!import引入等</li>\n<li>减少css嵌套</li>\n<li>减少css rest使用</li>\n<li>考虑继承</li>\n<li>渲染: 慎用高性能属性(float&#x2F;定位等); 减少页面重绘重排</li>\n</ul>\n<h3 id=\"字体用偶数还是奇数\"><a href=\"#字体用偶数还是奇数\" class=\"headerlink\" title=\"字体用偶数还是奇数\"></a>字体用偶数还是奇数</h3><ul>\n<li>使用偶数较容易和页面中其他部分的字号构成一个比例关系</li>\n<li>浏览器原因:低版本的ie6会把奇数字号转为偶数</li>\n<li>ui设计稿给的大部分是偶数(PS提供偶数)</li>\n</ul>\n<h3 id=\"first-child和first-of-type区别\"><a href=\"#first-child和first-of-type区别\" class=\"headerlink\" title=\"first-child和first-of-type区别\"></a>first-child和first-of-type区别</h3><p>first-child表示的是父元素其下的第一个元素</p>\n<p>first-of-type表示的是父元素其下,符合条件的第一个元素,可能并不是第一个元素</p>\n<h3 id=\"伪类和伪元素\"><a href=\"#伪类和伪元素\" class=\"headerlink\" title=\"伪类和伪元素\"></a>伪类和伪元素</h3><p>伪类: 表示元素处于的某种状态</p>\n<p>伪元素: 某个元素的子元素,虽然在逻辑上存在,但实际不存在于文档流中</p>\n<h3 id=\"inline-block和float区别\"><a href=\"#inline-block和float区别\" class=\"headerlink\" title=\"inline-block和float区别\"></a>inline-block和float区别</h3><p>inline-block: 具有block的属性,但是排列顺序按照inline来定</p>\n<p>float:当设置元素浮动时,相邻元素会一句自身大小排满一行,如果父容器宽度不够换行.当设置了元素浮动时,元素就已经脱离了文档流了,相邻元素会呈环绕装排列</p>\n<p>都可以并行显示,可以设置宽高</p>\n<p>区别:</p>\n<ul>\n<li><p>inline-block:水平排列一行,即使元素高度不一致,会以高度最大的元素高度未行高,即使高度小的元素周围留空,也不会有第二行的元素上浮补位.可以设置默认的垂直对齐基线</p>\n</li>\n<li><p>float: 让元素脱离文档流,呈环绕状排列,如果遇到上行有空白,且当前元素宽度小于等于空白处,那么元素会上行补位.默认顶部对齐</p>\n</li>\n</ul>\n<h3 id=\"absolute和float区别\"><a href=\"#absolute和float区别\" class=\"headerlink\" title=\"absolute和float区别\"></a>absolute和float区别</h3><p>float主要调节包围文字,position主要用于调节定位</p>\n<p>float可以将元素从文档里抽出,并不占文档流的空间.position的absolute和fixed也不会占据文档流,但这两个不适合用于给整个网页做布局,因为这样需要为页面上的每一个元素设置坐标来定位</p>\n<p>float可以用来做布局</p>\n<h3 id=\"web安全色\"><a href=\"#web安全色\" class=\"headerlink\" title=\"web安全色\"></a>web安全色</h3><p>不同的平台(mac,pc等)有不同的调色板,不同浏览器也有不同的调色板,那么就可能会导致同一个图片,在mac和pc浏览器的显示效果有差异</p>\n<p>将颜色的十进制&#x2F;rgb转为十六进制使用S</p>\n<h3 id=\"float元素浮动\"><a href=\"#float元素浮动\" class=\"headerlink\" title=\"float元素浮动\"></a>float元素浮动</h3><p>浮动规则: 向指定方向移动,直到碰到包含它的元素或同样float元素的边框.如果元素浮动则不占空间,block元素浮动会失去block属性变为inline-block.但与absolute的元素不影响其他元素不同,float有时会影响周边元素</p>\n<ul>\n<li>float元素前面是非block元素,且这些元素在同一行,则浮动会影响它前面的元素,把它前面的非block元素挤到边上</li>\n<li>如果前面非block元素放不下,则去影响它的下一行,此时可以把过长的inline元素们作为一个整体当block去看.如果float元素下面是非block元素,则会把该元素往边上挤;如果下面是block元素,则会覆盖上该元素,但只是背景的覆盖,依然会把该block元素内容挤到边上</li>\n<li>如果浮动元素面积够大,并且下面不出现清理浮动的css,那么下面的元素都会有影响</li>\n<li>如果给float元素加上偏移,则会挡住其他元素,不管这个元素是block还是inline</li>\n</ul>\n<h4 id=\"font-face\"><a href=\"#font-face\" class=\"headerlink\" title=\"@font-face\"></a>@font-face</h4><p>css功能,允许使用自定义的网络字体</p>\n<h3 id=\"opacity和background透明色\"><a href=\"#opacity和background透明色\" class=\"headerlink\" title=\"opacity和background透明色\"></a>opacity和background透明色</h3><ul>\n<li>opacity:0: 作用于元素以及元素内所有内容的透明度</li>\n<li>transparent: 只能用于元素颜色或者背景色</li>\n</ul>\n<h3 id=\"css雪碧图\"><a href=\"#css雪碧图\" class=\"headerlink\" title=\"css雪碧图\"></a>css雪碧图</h3><p>优点:</p>\n<ul>\n<li>减少http请求次数,提高页面性能</li>\n<li>减少图片总字节,3个图片字节＜3个图片合成的1张图片字节</li>\n<li>解决图片命名很多</li>\n<li>更换风格方便</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>在图片合并时,需要把多张图片有序合理的合并为一张图片,还需要留好足够的空间,防止出现不必要的背景.在宽屏、高分辨率的屏幕下自适应页面,如果图片不够宽,容易出现背景断裂</li>\n<li>雪碧图在开发时比较麻烦,需要测量每个单元背景的精确位置</li>\n<li>维护麻烦,一个图标的改动就需要改动合并的图片</li>\n</ul>\n<h3 id=\"获取元素背景色\"><a href=\"#获取元素背景色\" class=\"headerlink\" title=\"获取元素背景色\"></a>获取元素背景色</h3><p><code>getComputedStyle</code>, 但还需要考虑</p>\n<ul>\n<li>硬件加速时,存在layer squashing的情况</li>\n<li>存在floating元素显示在任意元素上方的情况</li>\n<li>考虑opacity</li>\n<li>zindex</li>\n</ul>\n<p>但当多个元素堆叠在一起或背景色带透明度情况下, 可以使用alpha blending</p>\n<h3 id=\"px-em和rem\"><a href=\"#px-em和rem\" class=\"headerlink\" title=\"px,em和rem\"></a>px,em和rem</h3><p>px: 实际上就是像素,用px设置字体时比较稳定和准确.但px不支持用户进行浏览器缩放或者不同移动端的兼容,因为像素是固定的,屏幕大小可能会有变化</p>\n<pre><code>- ie无法调整使用px作为单位的字体大小\n- px是相对长度单位,是相对于显示器屏幕分辨率而言的\n</code></pre>\n<p>em: 依据父元素的fontsize来决定的.</p>\n<pre><code>- em是相对长度单位,如果当前未对行内文本的字体尺寸设置,那么则相对于浏览器的默认字体尺寸\n- em不是固定的,会继承父级的字体大小\n</code></pre>\n<p>rem: 依据根元素的fontsize来决定的.</p>\n<pre><code>- 一般来说,1em=1rem=100&amp;=16px\n</code></pre>\n<h3 id=\"屏幕适配方法\"><a href=\"#屏幕适配方法\" class=\"headerlink\" title=\"屏幕适配方法\"></a>屏幕适配方法</h3><ul>\n<li><p>响应式</p>\n<p>  主要是工作量大,维护难</p>\n</li>\n<li><p>设置viewport进行缩放</p>\n<p>  可能会导致页面元素模糊</p>\n</li>\n<li><p>固定宽度</p>\n<p>  在大屏手机上页面看起来小</p>\n</li>\n<li><p>流式布局</p>\n<p>  页面布局通过百分比来定义宽度,高度大都使用px固定.因此在大屏幕手机下显示效果比较大,宽度很大</p>\n</li>\n</ul>\n"},{"title":"【css】记录小点","_content":"\n## border：0与border：none区别\n\n### 相同点\n\n两者都可以将元素的边框设为不可见\n\n### 不同点\n\n- 性能差异\n\n- border：0\n\n其表示为将元素边框设置为0像素，虽然在页面上无法看见，但是浏览器依旧会对边框进行渲染。因此渲染的是一个像素为0的b order。\n\n即border：0依旧会占用内存\n\n- border：none\n\n其表示的是将元素边框设置无，因此浏览器在解析时，并不会对其进行渲染\n\n即其不会占用浏览器内存\n\n- 兼容\n\n在ie6/7的button元素中，border：none并不会生效\n\n## 垂直居中\n\n### 图片\n\n``` js\ndisplay: table-cell;\n// 子元素\nvertical-align: center;\n```\n\n### 文字\n\n- line-height\n\n``` css\nheight: 20px;\nline-height: 20px;\n```\n\n## line-height\n\n- line-height指的是两行文字基线与基线之间的高度\n\n- 单位为%时，计算规则是相对于当前元素的font-size计算的，即0.x*fontsize\n\n- 无单位时，是相对于当前元素的font-size计算的，即x*fontsize\n\n\n## vertical-align\n\n\n- 元素没有设置时，继承的是父元素line-height的像素值，即如果父元素的line-height是%单位，那么浏览器计算出来的实际line-height值才会被子元素继承。\n\n## 元素选择器\n\n| 选择器 | 说明 |\n|---|---|\n| # | id选择器 |\n| . | class选择器 |\n| M N | 后代选择器，选择M元素内部后代的所有N元素 |\n| M>N | 子代选择器，选择M元素内部后代的第一个子级N元素 |\n| M～N | 兄弟选择器，选择M元素后所有的同级N元素 |\n| M+N | 相邻选择器，选择M元素相邻的下一个N元素，M和N是同一级 |\n\n属性选择器:\n- A[attr]: 下面其带有指定属性的元素,可以有多个,例如.name[title][id]:选择name的class下同时带有title和id属性的元素\n- A[attribute~=value]: 选取属性值中包含指定词汇的元素.例如p[class~=name],只要是个p元素且class包含的name的元素就符合\n- A[attribute|=value]: 选取属性值中全等于指定词汇的元素,例如p[class|=name],只要是p元素且class属性是name的元素就符合,如果class有其他的,那就不符合\n- A[attribute^=value]: 选取属性值以value开头的元素\n- A[attribute$=value]: 选取属性值以value结尾的元素\n- A[attribute*=value]: 选取属性值包含value的元素\n- A[attribute|=value]: 选取属性值等于value或者以value开头的元素\n\n## 包含块\n\n### 作用\n\n与css盒子模型类似。作用是为这个矩形内部的后代元素提供一个参考，一个元素的大小和定位往往是由该元素所在的包含块决定的。\n\n### 类型\n\n- 根元素\n\nhtml元素，它没有父元素，是页面中最顶端的元素。根元素存在的包含块，被称为初始包含块。\n\n- 固定定位元素\n\n若元素的position=fixed，那么它的包含块是当前可视窗口，即当前浏览器的窗口\n\n注意：**小程序**中position=fixed会**受到box-shadow**的影响\n\n    box-shadow 会创建一个新的层级上下文，这可能会影响 fixed 元素的层级表现，导致它不如预期地固定在视口上。\n\n- 静态定位和相对定位元素\n\n若元素的position=relative/absolute，那么其包含块是由离他最近的块级祖先元素创建的。祖先元素必须是block、inline-block或table-cell\n\n- 绝对定位元素\n\n若元素的position=absolute，那么其包含块是最近的position！=static的元素。祖先元素可以是块元素，也可以是行内元素\n\n## em\n\nem是相对于当前元素的父元素计算的\n\n但是当用于fontsize时，如果多有个嵌套的元素，那么从父层到子层，其元素字号会越来越小\n\n## background-size: auto 渲染规则\n\n- 如果图像没有内在尺寸和内在比例\n\n按背景定位区域的大小进行渲染，等同于设置属性100%\n\n- 水平和垂直方向同时具有内在尺寸\n\n按图像原始大小进行渲染\n\n- 没有内在尺寸，但有内在比例\n\n渲染效果等同于contain\n\n- 只有一个方向有内在尺寸，但具有内在比例\n\n图像会拉伸到该内在尺寸的大小，同时宽高比符合内在比例\n\n- 只有一个方向有内在尺寸，没有内在比例\n\n图像有内在尺寸的一侧会拉伸到该内在尺寸大小，没有设置内在尺寸的一侧会拉伸到背景定位区域大小\n\n##background-size：一个为auto，一个为非auto\n\n- 有内在比例\n\n会拉伸到指定的尺寸，宽高依然保持原有的比例\n\n- 没有内在比例\n\n图像会拉伸到指定尺寸。\n\n如果图像有内在尺寸，则auto到计算尺寸就是图像的尺寸\n\n如果图像没有内在尺寸，那么auto的计算尺寸就是背景定位区域的尺寸\n\n## background-position\n\n- 只有一个值\n\n例如：20px == 20px center\n\n如果只有一个值，那么无论是具体的数值或者百分比或者是关键字，另一个值一定是center\n\n- 两个值\n\n- 两个都是关键属性值\n\nleft、right表示水平，top、bottom表示垂直。\n\n不能包含对立的方位，即top bottom是无效的\n\n- 一个是关键属性值，一个是数值或者百分比\n\n如果第一个值是百分比或者数值，那么表示水平方向，另一个关键属性值表示垂直方向\n\n如果第一个值是关键属性值，那么表示水平方向，另一个百分比或者数值表示垂直方向\n\n- 两个值都是数值或者百分比\n\n第一个表示水平方向，第二个表示垂直方向\n\n- 3个值或者4个值\n\n数值和百分比表示偏移量，第一个值一定要是关键属性值，这个关键属性值表示偏移方向\n\n## opacity\n\nopacity不等于1的元素会创建一个层叠上下文，层叠顺序会变高\n\n## border-raduis\n\n### 语法\n\n- 只有一个值\n\n表示圆角属性作用在全部四个角上\n\n- 有两个值\n\n第一个作用于左上角和右下角，第二个作用于右上角和左下角\n\n- 三个值\n\n第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角\n\n- 四个值\n\n按照顺时针的方向，左上、右上、右下、左下\n\n### 水平半径和垂直半径\n\n``` css\nborder-left-top-radius: 10px 20px\nborder-raduis：10px / 20px\n```\n表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的\n\n### 重叠曲线\n\nf=min(Lh/Sh, Lv/Sv)\n\nS为半径之和，L为元素宽高，h和v表示方向，f为计算值。\n\nLh：元素宽\n\nSh：垂直方向的半径和\n\nLv：元素高度\n\nSv：水平方向的半径和\n\n如果f计算值小于1，那么所有圆角半径都乘以f\n\neg：\n\n``` css\nborder-top-left-raduis：30px 100%；\nborder-bottom-left-raduis：30px 100%；\nwidth：150px；\nheight：100px；\n```\n左上角和左下角的垂直半径是100%（元素高），水平半径是30px\nf=min（150/60，100/200）=0.5\n\n所以渲染结果为\n\n``` css\nborder-top-left-raduis：15px 50%；\nborder-bottom-left-raduis：15px 50%；\n```","source":"_posts/css/【css】记录小点.md","raw":"---\ntitle: 【css】记录小点\ncategories: css\n---\n\n## border：0与border：none区别\n\n### 相同点\n\n两者都可以将元素的边框设为不可见\n\n### 不同点\n\n- 性能差异\n\n- border：0\n\n其表示为将元素边框设置为0像素，虽然在页面上无法看见，但是浏览器依旧会对边框进行渲染。因此渲染的是一个像素为0的b order。\n\n即border：0依旧会占用内存\n\n- border：none\n\n其表示的是将元素边框设置无，因此浏览器在解析时，并不会对其进行渲染\n\n即其不会占用浏览器内存\n\n- 兼容\n\n在ie6/7的button元素中，border：none并不会生效\n\n## 垂直居中\n\n### 图片\n\n``` js\ndisplay: table-cell;\n// 子元素\nvertical-align: center;\n```\n\n### 文字\n\n- line-height\n\n``` css\nheight: 20px;\nline-height: 20px;\n```\n\n## line-height\n\n- line-height指的是两行文字基线与基线之间的高度\n\n- 单位为%时，计算规则是相对于当前元素的font-size计算的，即0.x*fontsize\n\n- 无单位时，是相对于当前元素的font-size计算的，即x*fontsize\n\n\n## vertical-align\n\n\n- 元素没有设置时，继承的是父元素line-height的像素值，即如果父元素的line-height是%单位，那么浏览器计算出来的实际line-height值才会被子元素继承。\n\n## 元素选择器\n\n| 选择器 | 说明 |\n|---|---|\n| # | id选择器 |\n| . | class选择器 |\n| M N | 后代选择器，选择M元素内部后代的所有N元素 |\n| M>N | 子代选择器，选择M元素内部后代的第一个子级N元素 |\n| M～N | 兄弟选择器，选择M元素后所有的同级N元素 |\n| M+N | 相邻选择器，选择M元素相邻的下一个N元素，M和N是同一级 |\n\n属性选择器:\n- A[attr]: 下面其带有指定属性的元素,可以有多个,例如.name[title][id]:选择name的class下同时带有title和id属性的元素\n- A[attribute~=value]: 选取属性值中包含指定词汇的元素.例如p[class~=name],只要是个p元素且class包含的name的元素就符合\n- A[attribute|=value]: 选取属性值中全等于指定词汇的元素,例如p[class|=name],只要是p元素且class属性是name的元素就符合,如果class有其他的,那就不符合\n- A[attribute^=value]: 选取属性值以value开头的元素\n- A[attribute$=value]: 选取属性值以value结尾的元素\n- A[attribute*=value]: 选取属性值包含value的元素\n- A[attribute|=value]: 选取属性值等于value或者以value开头的元素\n\n## 包含块\n\n### 作用\n\n与css盒子模型类似。作用是为这个矩形内部的后代元素提供一个参考，一个元素的大小和定位往往是由该元素所在的包含块决定的。\n\n### 类型\n\n- 根元素\n\nhtml元素，它没有父元素，是页面中最顶端的元素。根元素存在的包含块，被称为初始包含块。\n\n- 固定定位元素\n\n若元素的position=fixed，那么它的包含块是当前可视窗口，即当前浏览器的窗口\n\n注意：**小程序**中position=fixed会**受到box-shadow**的影响\n\n    box-shadow 会创建一个新的层级上下文，这可能会影响 fixed 元素的层级表现，导致它不如预期地固定在视口上。\n\n- 静态定位和相对定位元素\n\n若元素的position=relative/absolute，那么其包含块是由离他最近的块级祖先元素创建的。祖先元素必须是block、inline-block或table-cell\n\n- 绝对定位元素\n\n若元素的position=absolute，那么其包含块是最近的position！=static的元素。祖先元素可以是块元素，也可以是行内元素\n\n## em\n\nem是相对于当前元素的父元素计算的\n\n但是当用于fontsize时，如果多有个嵌套的元素，那么从父层到子层，其元素字号会越来越小\n\n## background-size: auto 渲染规则\n\n- 如果图像没有内在尺寸和内在比例\n\n按背景定位区域的大小进行渲染，等同于设置属性100%\n\n- 水平和垂直方向同时具有内在尺寸\n\n按图像原始大小进行渲染\n\n- 没有内在尺寸，但有内在比例\n\n渲染效果等同于contain\n\n- 只有一个方向有内在尺寸，但具有内在比例\n\n图像会拉伸到该内在尺寸的大小，同时宽高比符合内在比例\n\n- 只有一个方向有内在尺寸，没有内在比例\n\n图像有内在尺寸的一侧会拉伸到该内在尺寸大小，没有设置内在尺寸的一侧会拉伸到背景定位区域大小\n\n##background-size：一个为auto，一个为非auto\n\n- 有内在比例\n\n会拉伸到指定的尺寸，宽高依然保持原有的比例\n\n- 没有内在比例\n\n图像会拉伸到指定尺寸。\n\n如果图像有内在尺寸，则auto到计算尺寸就是图像的尺寸\n\n如果图像没有内在尺寸，那么auto的计算尺寸就是背景定位区域的尺寸\n\n## background-position\n\n- 只有一个值\n\n例如：20px == 20px center\n\n如果只有一个值，那么无论是具体的数值或者百分比或者是关键字，另一个值一定是center\n\n- 两个值\n\n- 两个都是关键属性值\n\nleft、right表示水平，top、bottom表示垂直。\n\n不能包含对立的方位，即top bottom是无效的\n\n- 一个是关键属性值，一个是数值或者百分比\n\n如果第一个值是百分比或者数值，那么表示水平方向，另一个关键属性值表示垂直方向\n\n如果第一个值是关键属性值，那么表示水平方向，另一个百分比或者数值表示垂直方向\n\n- 两个值都是数值或者百分比\n\n第一个表示水平方向，第二个表示垂直方向\n\n- 3个值或者4个值\n\n数值和百分比表示偏移量，第一个值一定要是关键属性值，这个关键属性值表示偏移方向\n\n## opacity\n\nopacity不等于1的元素会创建一个层叠上下文，层叠顺序会变高\n\n## border-raduis\n\n### 语法\n\n- 只有一个值\n\n表示圆角属性作用在全部四个角上\n\n- 有两个值\n\n第一个作用于左上角和右下角，第二个作用于右上角和左下角\n\n- 三个值\n\n第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角\n\n- 四个值\n\n按照顺时针的方向，左上、右上、右下、左下\n\n### 水平半径和垂直半径\n\n``` css\nborder-left-top-radius: 10px 20px\nborder-raduis：10px / 20px\n```\n表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的\n\n### 重叠曲线\n\nf=min(Lh/Sh, Lv/Sv)\n\nS为半径之和，L为元素宽高，h和v表示方向，f为计算值。\n\nLh：元素宽\n\nSh：垂直方向的半径和\n\nLv：元素高度\n\nSv：水平方向的半径和\n\n如果f计算值小于1，那么所有圆角半径都乘以f\n\neg：\n\n``` css\nborder-top-left-raduis：30px 100%；\nborder-bottom-left-raduis：30px 100%；\nwidth：150px；\nheight：100px；\n```\n左上角和左下角的垂直半径是100%（元素高），水平半径是30px\nf=min（150/60，100/200）=0.5\n\n所以渲染结果为\n\n``` css\nborder-top-left-raduis：15px 50%；\nborder-bottom-left-raduis：15px 50%；\n```","slug":"css/【css】记录小点","published":1,"date":"2025-08-13T07:29:09.401Z","updated":"2025-05-03T03:49:02.371Z","comments":1,"layout":"post","photos":[],"_id":"cme9nh6xw0020bofm9sra84de","content":"<h2 id=\"border：0与border：none区别\"><a href=\"#border：0与border：none区别\" class=\"headerlink\" title=\"border：0与border：none区别\"></a>border：0与border：none区别</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>两者都可以将元素的边框设为不可见</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li><p>性能差异</p>\n</li>\n<li><p>border：0</p>\n</li>\n</ul>\n<p>其表示为将元素边框设置为0像素，虽然在页面上无法看见，但是浏览器依旧会对边框进行渲染。因此渲染的是一个像素为0的b order。</p>\n<p>即border：0依旧会占用内存</p>\n<ul>\n<li>border：none</li>\n</ul>\n<p>其表示的是将元素边框设置无，因此浏览器在解析时，并不会对其进行渲染</p>\n<p>即其不会占用浏览器内存</p>\n<ul>\n<li>兼容</li>\n</ul>\n<p>在ie6&#x2F;7的button元素中，border：none并不会生效</p>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">display</span>: table-cell;</span><br><span class=\"line\"><span class=\"comment\">// 子元素</span></span><br><span class=\"line\">vertical-<span class=\"attr\">align</span>: center;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h3><ul>\n<li>line-height</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><ul>\n<li><p>line-height指的是两行文字基线与基线之间的高度</p>\n</li>\n<li><p>单位为%时，计算规则是相对于当前元素的font-size计算的，即0.x*fontsize</p>\n</li>\n<li><p>无单位时，是相对于当前元素的font-size计算的，即x*fontsize</p>\n</li>\n</ul>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><ul>\n<li>元素没有设置时，继承的是父元素line-height的像素值，即如果父元素的line-height是%单位，那么浏览器计算出来的实际line-height值才会被子元素继承。</li>\n</ul>\n<h2 id=\"元素选择器\"><a href=\"#元素选择器\" class=\"headerlink\" title=\"元素选择器\"></a>元素选择器</h2><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#</td>\n<td>id选择器</td>\n</tr>\n<tr>\n<td>.</td>\n<td>class选择器</td>\n</tr>\n<tr>\n<td>M N</td>\n<td>后代选择器，选择M元素内部后代的所有N元素</td>\n</tr>\n<tr>\n<td>M&gt;N</td>\n<td>子代选择器，选择M元素内部后代的第一个子级N元素</td>\n</tr>\n<tr>\n<td>M～N</td>\n<td>兄弟选择器，选择M元素后所有的同级N元素</td>\n</tr>\n<tr>\n<td>M+N</td>\n<td>相邻选择器，选择M元素相邻的下一个N元素，M和N是同一级</td>\n</tr>\n</tbody></table>\n<p>属性选择器:</p>\n<ul>\n<li>A[attr]: 下面其带有指定属性的元素,可以有多个,例如.name[title][id]:选择name的class下同时带有title和id属性的元素</li>\n<li>A[attribute<del>&#x3D;value]: 选取属性值中包含指定词汇的元素.例如p[class</del>&#x3D;name],只要是个p元素且class包含的name的元素就符合</li>\n<li>A[attribute|&#x3D;value]: 选取属性值中全等于指定词汇的元素,例如p[class|&#x3D;name],只要是p元素且class属性是name的元素就符合,如果class有其他的,那就不符合</li>\n<li>A[attribute^&#x3D;value]: 选取属性值以value开头的元素</li>\n<li>A[attribute$&#x3D;value]: 选取属性值以value结尾的元素</li>\n<li>A[attribute*&#x3D;value]: 选取属性值包含value的元素</li>\n<li>A[attribute|&#x3D;value]: 选取属性值等于value或者以value开头的元素</li>\n</ul>\n<h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>与css盒子模型类似。作用是为这个矩形内部的后代元素提供一个参考，一个元素的大小和定位往往是由该元素所在的包含块决定的。</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ul>\n<li>根元素</li>\n</ul>\n<p>html元素，它没有父元素，是页面中最顶端的元素。根元素存在的包含块，被称为初始包含块。</p>\n<ul>\n<li>固定定位元素</li>\n</ul>\n<p>若元素的position&#x3D;fixed，那么它的包含块是当前可视窗口，即当前浏览器的窗口</p>\n<p>注意：<strong>小程序</strong>中position&#x3D;fixed会<strong>受到box-shadow</strong>的影响</p>\n<pre><code>box-shadow 会创建一个新的层级上下文，这可能会影响 fixed 元素的层级表现，导致它不如预期地固定在视口上。\n</code></pre>\n<ul>\n<li>静态定位和相对定位元素</li>\n</ul>\n<p>若元素的position&#x3D;relative&#x2F;absolute，那么其包含块是由离他最近的块级祖先元素创建的。祖先元素必须是block、inline-block或table-cell</p>\n<ul>\n<li>绝对定位元素</li>\n</ul>\n<p>若元素的position&#x3D;absolute，那么其包含块是最近的position！&#x3D;static的元素。祖先元素可以是块元素，也可以是行内元素</p>\n<h2 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h2><p>em是相对于当前元素的父元素计算的</p>\n<p>但是当用于fontsize时，如果多有个嵌套的元素，那么从父层到子层，其元素字号会越来越小</p>\n<h2 id=\"background-size-auto-渲染规则\"><a href=\"#background-size-auto-渲染规则\" class=\"headerlink\" title=\"background-size: auto 渲染规则\"></a>background-size: auto 渲染规则</h2><ul>\n<li>如果图像没有内在尺寸和内在比例</li>\n</ul>\n<p>按背景定位区域的大小进行渲染，等同于设置属性100%</p>\n<ul>\n<li>水平和垂直方向同时具有内在尺寸</li>\n</ul>\n<p>按图像原始大小进行渲染</p>\n<ul>\n<li>没有内在尺寸，但有内在比例</li>\n</ul>\n<p>渲染效果等同于contain</p>\n<ul>\n<li>只有一个方向有内在尺寸，但具有内在比例</li>\n</ul>\n<p>图像会拉伸到该内在尺寸的大小，同时宽高比符合内在比例</p>\n<ul>\n<li>只有一个方向有内在尺寸，没有内在比例</li>\n</ul>\n<p>图像有内在尺寸的一侧会拉伸到该内在尺寸大小，没有设置内在尺寸的一侧会拉伸到背景定位区域大小</p>\n<p>##background-size：一个为auto，一个为非auto</p>\n<ul>\n<li>有内在比例</li>\n</ul>\n<p>会拉伸到指定的尺寸，宽高依然保持原有的比例</p>\n<ul>\n<li>没有内在比例</li>\n</ul>\n<p>图像会拉伸到指定尺寸。</p>\n<p>如果图像有内在尺寸，则auto到计算尺寸就是图像的尺寸</p>\n<p>如果图像没有内在尺寸，那么auto的计算尺寸就是背景定位区域的尺寸</p>\n<h2 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h2><ul>\n<li>只有一个值</li>\n</ul>\n<p>例如：20px &#x3D;&#x3D; 20px center</p>\n<p>如果只有一个值，那么无论是具体的数值或者百分比或者是关键字，另一个值一定是center</p>\n<ul>\n<li><p>两个值</p>\n</li>\n<li><p>两个都是关键属性值</p>\n</li>\n</ul>\n<p>left、right表示水平，top、bottom表示垂直。</p>\n<p>不能包含对立的方位，即top bottom是无效的</p>\n<ul>\n<li>一个是关键属性值，一个是数值或者百分比</li>\n</ul>\n<p>如果第一个值是百分比或者数值，那么表示水平方向，另一个关键属性值表示垂直方向</p>\n<p>如果第一个值是关键属性值，那么表示水平方向，另一个百分比或者数值表示垂直方向</p>\n<ul>\n<li>两个值都是数值或者百分比</li>\n</ul>\n<p>第一个表示水平方向，第二个表示垂直方向</p>\n<ul>\n<li>3个值或者4个值</li>\n</ul>\n<p>数值和百分比表示偏移量，第一个值一定要是关键属性值，这个关键属性值表示偏移方向</p>\n<h2 id=\"opacity\"><a href=\"#opacity\" class=\"headerlink\" title=\"opacity\"></a>opacity</h2><p>opacity不等于1的元素会创建一个层叠上下文，层叠顺序会变高</p>\n<h2 id=\"border-raduis\"><a href=\"#border-raduis\" class=\"headerlink\" title=\"border-raduis\"></a>border-raduis</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>只有一个值</li>\n</ul>\n<p>表示圆角属性作用在全部四个角上</p>\n<ul>\n<li>有两个值</li>\n</ul>\n<p>第一个作用于左上角和右下角，第二个作用于右上角和左下角</p>\n<ul>\n<li>三个值</li>\n</ul>\n<p>第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角</p>\n<ul>\n<li>四个值</li>\n</ul>\n<p>按照顺时针的方向，左上、右上、右下、左下</p>\n<h3 id=\"水平半径和垂直半径\"><a href=\"#水平半径和垂直半径\" class=\"headerlink\" title=\"水平半径和垂直半径\"></a>水平半径和垂直半径</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-left</span>-<span class=\"attribute\">top</span>-radius: <span class=\"number\">10px</span> <span class=\"number\">20px</span></span><br><span class=\"line\">border-raduis：<span class=\"number\">10px</span> / <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的</p>\n<h3 id=\"重叠曲线\"><a href=\"#重叠曲线\" class=\"headerlink\" title=\"重叠曲线\"></a>重叠曲线</h3><p>f&#x3D;min(Lh&#x2F;Sh, Lv&#x2F;Sv)</p>\n<p>S为半径之和，L为元素宽高，h和v表示方向，f为计算值。</p>\n<p>Lh：元素宽</p>\n<p>Sh：垂直方向的半径和</p>\n<p>Lv：元素高度</p>\n<p>Sv：水平方向的半径和</p>\n<p>如果f计算值小于1，那么所有圆角半径都乘以f</p>\n<p>eg：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">width</span>：<span class=\"number\">150px</span>；</span><br><span class=\"line\"><span class=\"attribute\">height</span>：<span class=\"number\">100px</span>；</span><br></pre></td></tr></table></figure>\n<p>左上角和左下角的垂直半径是100%（元素高），水平半径是30px<br>f&#x3D;min（150&#x2F;60，100&#x2F;200）&#x3D;0.5</p>\n<p>所以渲染结果为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"border：0与border：none区别\"><a href=\"#border：0与border：none区别\" class=\"headerlink\" title=\"border：0与border：none区别\"></a>border：0与border：none区别</h2><h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>两者都可以将元素的边框设为不可见</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li><p>性能差异</p>\n</li>\n<li><p>border：0</p>\n</li>\n</ul>\n<p>其表示为将元素边框设置为0像素，虽然在页面上无法看见，但是浏览器依旧会对边框进行渲染。因此渲染的是一个像素为0的b order。</p>\n<p>即border：0依旧会占用内存</p>\n<ul>\n<li>border：none</li>\n</ul>\n<p>其表示的是将元素边框设置无，因此浏览器在解析时，并不会对其进行渲染</p>\n<p>即其不会占用浏览器内存</p>\n<ul>\n<li>兼容</li>\n</ul>\n<p>在ie6&#x2F;7的button元素中，border：none并不会生效</p>\n<h2 id=\"垂直居中\"><a href=\"#垂直居中\" class=\"headerlink\" title=\"垂直居中\"></a>垂直居中</h2><h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">display</span>: table-cell;</span><br><span class=\"line\"><span class=\"comment\">// 子元素</span></span><br><span class=\"line\">vertical-<span class=\"attr\">align</span>: center;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"文字\"><a href=\"#文字\" class=\"headerlink\" title=\"文字\"></a>文字</h3><ul>\n<li>line-height</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">height</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\"><span class=\"attribute\">line-height</span>: <span class=\"number\">20px</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"line-height\"><a href=\"#line-height\" class=\"headerlink\" title=\"line-height\"></a>line-height</h2><ul>\n<li><p>line-height指的是两行文字基线与基线之间的高度</p>\n</li>\n<li><p>单位为%时，计算规则是相对于当前元素的font-size计算的，即0.x*fontsize</p>\n</li>\n<li><p>无单位时，是相对于当前元素的font-size计算的，即x*fontsize</p>\n</li>\n</ul>\n<h2 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h2><ul>\n<li>元素没有设置时，继承的是父元素line-height的像素值，即如果父元素的line-height是%单位，那么浏览器计算出来的实际line-height值才会被子元素继承。</li>\n</ul>\n<h2 id=\"元素选择器\"><a href=\"#元素选择器\" class=\"headerlink\" title=\"元素选择器\"></a>元素选择器</h2><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#</td>\n<td>id选择器</td>\n</tr>\n<tr>\n<td>.</td>\n<td>class选择器</td>\n</tr>\n<tr>\n<td>M N</td>\n<td>后代选择器，选择M元素内部后代的所有N元素</td>\n</tr>\n<tr>\n<td>M&gt;N</td>\n<td>子代选择器，选择M元素内部后代的第一个子级N元素</td>\n</tr>\n<tr>\n<td>M～N</td>\n<td>兄弟选择器，选择M元素后所有的同级N元素</td>\n</tr>\n<tr>\n<td>M+N</td>\n<td>相邻选择器，选择M元素相邻的下一个N元素，M和N是同一级</td>\n</tr>\n</tbody></table>\n<p>属性选择器:</p>\n<ul>\n<li>A[attr]: 下面其带有指定属性的元素,可以有多个,例如.name[title][id]:选择name的class下同时带有title和id属性的元素</li>\n<li>A[attribute<del>&#x3D;value]: 选取属性值中包含指定词汇的元素.例如p[class</del>&#x3D;name],只要是个p元素且class包含的name的元素就符合</li>\n<li>A[attribute|&#x3D;value]: 选取属性值中全等于指定词汇的元素,例如p[class|&#x3D;name],只要是p元素且class属性是name的元素就符合,如果class有其他的,那就不符合</li>\n<li>A[attribute^&#x3D;value]: 选取属性值以value开头的元素</li>\n<li>A[attribute$&#x3D;value]: 选取属性值以value结尾的元素</li>\n<li>A[attribute*&#x3D;value]: 选取属性值包含value的元素</li>\n<li>A[attribute|&#x3D;value]: 选取属性值等于value或者以value开头的元素</li>\n</ul>\n<h2 id=\"包含块\"><a href=\"#包含块\" class=\"headerlink\" title=\"包含块\"></a>包含块</h2><h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h3><p>与css盒子模型类似。作用是为这个矩形内部的后代元素提供一个参考，一个元素的大小和定位往往是由该元素所在的包含块决定的。</p>\n<h3 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h3><ul>\n<li>根元素</li>\n</ul>\n<p>html元素，它没有父元素，是页面中最顶端的元素。根元素存在的包含块，被称为初始包含块。</p>\n<ul>\n<li>固定定位元素</li>\n</ul>\n<p>若元素的position&#x3D;fixed，那么它的包含块是当前可视窗口，即当前浏览器的窗口</p>\n<p>注意：<strong>小程序</strong>中position&#x3D;fixed会<strong>受到box-shadow</strong>的影响</p>\n<pre><code>box-shadow 会创建一个新的层级上下文，这可能会影响 fixed 元素的层级表现，导致它不如预期地固定在视口上。\n</code></pre>\n<ul>\n<li>静态定位和相对定位元素</li>\n</ul>\n<p>若元素的position&#x3D;relative&#x2F;absolute，那么其包含块是由离他最近的块级祖先元素创建的。祖先元素必须是block、inline-block或table-cell</p>\n<ul>\n<li>绝对定位元素</li>\n</ul>\n<p>若元素的position&#x3D;absolute，那么其包含块是最近的position！&#x3D;static的元素。祖先元素可以是块元素，也可以是行内元素</p>\n<h2 id=\"em\"><a href=\"#em\" class=\"headerlink\" title=\"em\"></a>em</h2><p>em是相对于当前元素的父元素计算的</p>\n<p>但是当用于fontsize时，如果多有个嵌套的元素，那么从父层到子层，其元素字号会越来越小</p>\n<h2 id=\"background-size-auto-渲染规则\"><a href=\"#background-size-auto-渲染规则\" class=\"headerlink\" title=\"background-size: auto 渲染规则\"></a>background-size: auto 渲染规则</h2><ul>\n<li>如果图像没有内在尺寸和内在比例</li>\n</ul>\n<p>按背景定位区域的大小进行渲染，等同于设置属性100%</p>\n<ul>\n<li>水平和垂直方向同时具有内在尺寸</li>\n</ul>\n<p>按图像原始大小进行渲染</p>\n<ul>\n<li>没有内在尺寸，但有内在比例</li>\n</ul>\n<p>渲染效果等同于contain</p>\n<ul>\n<li>只有一个方向有内在尺寸，但具有内在比例</li>\n</ul>\n<p>图像会拉伸到该内在尺寸的大小，同时宽高比符合内在比例</p>\n<ul>\n<li>只有一个方向有内在尺寸，没有内在比例</li>\n</ul>\n<p>图像有内在尺寸的一侧会拉伸到该内在尺寸大小，没有设置内在尺寸的一侧会拉伸到背景定位区域大小</p>\n<p>##background-size：一个为auto，一个为非auto</p>\n<ul>\n<li>有内在比例</li>\n</ul>\n<p>会拉伸到指定的尺寸，宽高依然保持原有的比例</p>\n<ul>\n<li>没有内在比例</li>\n</ul>\n<p>图像会拉伸到指定尺寸。</p>\n<p>如果图像有内在尺寸，则auto到计算尺寸就是图像的尺寸</p>\n<p>如果图像没有内在尺寸，那么auto的计算尺寸就是背景定位区域的尺寸</p>\n<h2 id=\"background-position\"><a href=\"#background-position\" class=\"headerlink\" title=\"background-position\"></a>background-position</h2><ul>\n<li>只有一个值</li>\n</ul>\n<p>例如：20px &#x3D;&#x3D; 20px center</p>\n<p>如果只有一个值，那么无论是具体的数值或者百分比或者是关键字，另一个值一定是center</p>\n<ul>\n<li><p>两个值</p>\n</li>\n<li><p>两个都是关键属性值</p>\n</li>\n</ul>\n<p>left、right表示水平，top、bottom表示垂直。</p>\n<p>不能包含对立的方位，即top bottom是无效的</p>\n<ul>\n<li>一个是关键属性值，一个是数值或者百分比</li>\n</ul>\n<p>如果第一个值是百分比或者数值，那么表示水平方向，另一个关键属性值表示垂直方向</p>\n<p>如果第一个值是关键属性值，那么表示水平方向，另一个百分比或者数值表示垂直方向</p>\n<ul>\n<li>两个值都是数值或者百分比</li>\n</ul>\n<p>第一个表示水平方向，第二个表示垂直方向</p>\n<ul>\n<li>3个值或者4个值</li>\n</ul>\n<p>数值和百分比表示偏移量，第一个值一定要是关键属性值，这个关键属性值表示偏移方向</p>\n<h2 id=\"opacity\"><a href=\"#opacity\" class=\"headerlink\" title=\"opacity\"></a>opacity</h2><p>opacity不等于1的元素会创建一个层叠上下文，层叠顺序会变高</p>\n<h2 id=\"border-raduis\"><a href=\"#border-raduis\" class=\"headerlink\" title=\"border-raduis\"></a>border-raduis</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>只有一个值</li>\n</ul>\n<p>表示圆角属性作用在全部四个角上</p>\n<ul>\n<li>有两个值</li>\n</ul>\n<p>第一个作用于左上角和右下角，第二个作用于右上角和左下角</p>\n<ul>\n<li>三个值</li>\n</ul>\n<p>第一个作用于左上角，第二个作用于右上角和左下角，第三个作用于右下角</p>\n<ul>\n<li>四个值</li>\n</ul>\n<p>按照顺时针的方向，左上、右上、右下、左下</p>\n<h3 id=\"水平半径和垂直半径\"><a href=\"#水平半径和垂直半径\" class=\"headerlink\" title=\"水平半径和垂直半径\"></a>水平半径和垂直半径</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-left</span>-<span class=\"attribute\">top</span>-radius: <span class=\"number\">10px</span> <span class=\"number\">20px</span></span><br><span class=\"line\">border-raduis：<span class=\"number\">10px</span> / <span class=\"number\">20px</span></span><br></pre></td></tr></table></figure>\n<p>表示圆角是水平半径为10px，垂直半径为20px的椭圆产生的</p>\n<h3 id=\"重叠曲线\"><a href=\"#重叠曲线\" class=\"headerlink\" title=\"重叠曲线\"></a>重叠曲线</h3><p>f&#x3D;min(Lh&#x2F;Sh, Lv&#x2F;Sv)</p>\n<p>S为半径之和，L为元素宽高，h和v表示方向，f为计算值。</p>\n<p>Lh：元素宽</p>\n<p>Sh：垂直方向的半径和</p>\n<p>Lv：元素高度</p>\n<p>Sv：水平方向的半径和</p>\n<p>如果f计算值小于1，那么所有圆角半径都乘以f</p>\n<p>eg：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">30px</span> <span class=\"number\">100%</span>；</span><br><span class=\"line\"><span class=\"attribute\">width</span>：<span class=\"number\">150px</span>；</span><br><span class=\"line\"><span class=\"attribute\">height</span>：<span class=\"number\">100px</span>；</span><br></pre></td></tr></table></figure>\n<p>左上角和左下角的垂直半径是100%（元素高），水平半径是30px<br>f&#x3D;min（150&#x2F;60，100&#x2F;200）&#x3D;0.5</p>\n<p>所以渲染结果为</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">border-top</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br><span class=\"line\"><span class=\"attribute\">border-bottom</span>-<span class=\"attribute\">left</span>-raduis：<span class=\"number\">15px</span> <span class=\"number\">50%</span>；</span><br></pre></td></tr></table></figure>"},{"title":"【HTML】记录","_content":"\n### input type=file的cancel事件\n\nmdn并未写明当前的`input`标签支持cancel事件\n\n#### 触发条件\n\n在pc端中，点击上传的输入框，然后在弹出的文件选择器中点击取消按钮，即可触发当前这个事件\n\n#### 表现\n\n``` html\n<!-- 子组件 -->\n<input type=\"file\" id=\"ipt1\" @cancel=\"cancle2\" placeholder=\"上传123\"></input>\n\n<!-- 父组件 -->\n<childComp @cancel=\"cancle1\"></childComp>\n```\n\n在vue3项目中，会触发子组件的`cancle2`事件\n\n若在子组件中没有`cancle2`事件，那么这个事件会冒泡到父组件中，执行`cancle1`事件。因此若父组件有监听子组件的cancel事件，那么在这个情况下会直接执行，可能会导致触发其他问题\n\n浏览器：谷歌、火狐都支持\n\n#### 监听\n\n> vue\n- 组件直接监听\n- 子组件未监听，父组件监听\n- window.addEventListener('cancel'): 会执行两次，触发元素是window\n- document.getElementById('').addEventListener('cancel'): 不执行\n\n> 普通html\n- window.addEventListener('cancel'): 只执行一次，触发元素是window\n- document.getElementById('').addEventListener('cancel'): 只执行一次，触发元素是对应的元素\n\n技术栈：vue3+ts+pinia+vite+vantui\n项目介绍：PC+H5，支持多种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送\n\n● 负责核心复杂功能模块的设计与实现\n1、资料上传：支持pdf、图片、公众号等5种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送","source":"_posts/HTML/【HTML】记录.md","raw":"---\ntitle: 【HTML】记录\ncategories: HTML\ntag: HTML\n---\n\n### input type=file的cancel事件\n\nmdn并未写明当前的`input`标签支持cancel事件\n\n#### 触发条件\n\n在pc端中，点击上传的输入框，然后在弹出的文件选择器中点击取消按钮，即可触发当前这个事件\n\n#### 表现\n\n``` html\n<!-- 子组件 -->\n<input type=\"file\" id=\"ipt1\" @cancel=\"cancle2\" placeholder=\"上传123\"></input>\n\n<!-- 父组件 -->\n<childComp @cancel=\"cancle1\"></childComp>\n```\n\n在vue3项目中，会触发子组件的`cancle2`事件\n\n若在子组件中没有`cancle2`事件，那么这个事件会冒泡到父组件中，执行`cancle1`事件。因此若父组件有监听子组件的cancel事件，那么在这个情况下会直接执行，可能会导致触发其他问题\n\n浏览器：谷歌、火狐都支持\n\n#### 监听\n\n> vue\n- 组件直接监听\n- 子组件未监听，父组件监听\n- window.addEventListener('cancel'): 会执行两次，触发元素是window\n- document.getElementById('').addEventListener('cancel'): 不执行\n\n> 普通html\n- window.addEventListener('cancel'): 只执行一次，触发元素是window\n- document.getElementById('').addEventListener('cancel'): 只执行一次，触发元素是对应的元素\n\n技术栈：vue3+ts+pinia+vite+vantui\n项目介绍：PC+H5，支持多种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送\n\n● 负责核心复杂功能模块的设计与实现\n1、资料上传：支持pdf、图片、公众号等5种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送","slug":"HTML/【HTML】记录","published":1,"date":"2025-08-13T07:29:09.432Z","updated":"2025-08-13T07:33:55.507Z","_id":"cme9nmf8000001ofm2c41flcv","comments":1,"layout":"post","photos":[],"content":"<h3 id=\"input-type-file的cancel事件\"><a href=\"#input-type-file的cancel事件\" class=\"headerlink\" title=\"input type&#x3D;file的cancel事件\"></a>input type&#x3D;file的cancel事件</h3><p>mdn并未写明当前的<code>input</code>标签支持cancel事件</p>\n<h4 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h4><p>在pc端中，点击上传的输入框，然后在弹出的文件选择器中点击取消按钮，即可触发当前这个事件</p>\n<h4 id=\"表现\"><a href=\"#表现\" class=\"headerlink\" title=\"表现\"></a>表现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ipt1&quot;</span> @<span class=\"attr\">cancel</span>=<span class=\"string\">&quot;cancle2&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;上传123&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">childComp</span> @<span class=\"attr\">cancel</span>=<span class=\"string\">&quot;cancle1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">childComp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在vue3项目中，会触发子组件的<code>cancle2</code>事件</p>\n<p>若在子组件中没有<code>cancle2</code>事件，那么这个事件会冒泡到父组件中，执行<code>cancle1</code>事件。因此若父组件有监听子组件的cancel事件，那么在这个情况下会直接执行，可能会导致触发其他问题</p>\n<p>浏览器：谷歌、火狐都支持</p>\n<h4 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h4><blockquote>\n<p>vue</p>\n</blockquote>\n<ul>\n<li>组件直接监听</li>\n<li>子组件未监听，父组件监听</li>\n<li>window.addEventListener(‘cancel’): 会执行两次，触发元素是window</li>\n<li>document.getElementById(‘’).addEventListener(‘cancel’): 不执行</li>\n</ul>\n<blockquote>\n<p>普通html</p>\n</blockquote>\n<ul>\n<li>window.addEventListener(‘cancel’): 只执行一次，触发元素是window</li>\n<li>document.getElementById(‘’).addEventListener(‘cancel’): 只执行一次，触发元素是对应的元素</li>\n</ul>\n<p>技术栈：vue3+ts+pinia+vite+vantui<br>项目介绍：PC+H5，支持多种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送</p>\n<p>● 负责核心复杂功能模块的设计与实现<br>1、资料上传：支持pdf、图片、公众号等5种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送</p>\n","excerpt":"","more":"<h3 id=\"input-type-file的cancel事件\"><a href=\"#input-type-file的cancel事件\" class=\"headerlink\" title=\"input type&#x3D;file的cancel事件\"></a>input type&#x3D;file的cancel事件</h3><p>mdn并未写明当前的<code>input</code>标签支持cancel事件</p>\n<h4 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h4><p>在pc端中，点击上传的输入框，然后在弹出的文件选择器中点击取消按钮，即可触发当前这个事件</p>\n<h4 id=\"表现\"><a href=\"#表现\" class=\"headerlink\" title=\"表现\"></a>表现</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 子组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;file&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;ipt1&quot;</span> @<span class=\"attr\">cancel</span>=<span class=\"string\">&quot;cancle2&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;上传123&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">input</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 父组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">childComp</span> @<span class=\"attr\">cancel</span>=<span class=\"string\">&quot;cancle1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">childComp</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在vue3项目中，会触发子组件的<code>cancle2</code>事件</p>\n<p>若在子组件中没有<code>cancle2</code>事件，那么这个事件会冒泡到父组件中，执行<code>cancle1</code>事件。因此若父组件有监听子组件的cancel事件，那么在这个情况下会直接执行，可能会导致触发其他问题</p>\n<p>浏览器：谷歌、火狐都支持</p>\n<h4 id=\"监听\"><a href=\"#监听\" class=\"headerlink\" title=\"监听\"></a>监听</h4><blockquote>\n<p>vue</p>\n</blockquote>\n<ul>\n<li>组件直接监听</li>\n<li>子组件未监听，父组件监听</li>\n<li>window.addEventListener(‘cancel’): 会执行两次，触发元素是window</li>\n<li>document.getElementById(‘’).addEventListener(‘cancel’): 不执行</li>\n</ul>\n<blockquote>\n<p>普通html</p>\n</blockquote>\n<ul>\n<li>window.addEventListener(‘cancel’): 只执行一次，触发元素是window</li>\n<li>document.getElementById(‘’).addEventListener(‘cancel’): 只执行一次，触发元素是对应的元素</li>\n</ul>\n<p>技术栈：vue3+ts+pinia+vite+vantui<br>项目介绍：PC+H5，支持多种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送</p>\n<p>● 负责核心复杂功能模块的设计与实现<br>1、资料上传：支持pdf、图片、公众号等5种资料类型上传，可配置资料留资，悬浮码等功能，增加内容分发等功能，企业微信侧边栏可快速发送</p>\n"},{"title":"【RN】环境搭建","_content":"\n# 【React Native】环境搭建\n\n## 环境\n\n- Nodejs: `v16.16.0`\n\n- react-native: `0.72.3`\n\n- react-native-cli: `2.0.13`\n\n- webStorm: `2023.1.2`\n\n- Android Studio: `2022.2.1.20`\n\n## 基本环境配置\n\n### 安装nodejs\n\n[Node.Js中文网](https://nodejs.p2hp.com/)\n\n### 安装react-native及其脚手架\n\n> npm i -g react-native react-native-cli\n\n### 安装Android Studio\n\n这个是配置安卓环境的，需要配置好后，才能运行成功。\n\n[官网下载](https://developer.android.google.cn/studio/)\n\n[安装流程](https://reactnative.cn/docs/environment-setup)\n\n- 必须安装的SDK：\n\n    - `Android SDK`\n    - `Android SDK Platform`\n    - `Android Virtual Device`\n\n安装过程由于下载内容较多，因此安装过程较慢。\n\n- 安装后，需要额外安装的SDK\n\n    - `Android SDK Platform 33`\n    \n    - `Intel x86 Atom_64 System Image`\n    \n    - `Android SDK Build-Tools 33.0.0`\n\n    从设置按钮-》settings-》Appearance & Behavior -》 System Settings -》 Android SDK\n    [![pCbGec8.png](https://s1.ax1x.com/2023/07/21/pCbGec8.png)](https://imgse.com/i/pCbGec8)\n\n    [![pCb8Xfx.png](https://s1.ax1x.com/2023/07/21/pCb8Xfx.png)](https://imgse.com/i/pCb8Xfx)\n\n    [![pCbGJ3V.png](https://s1.ax1x.com/2023/07/21/pCbGJ3V.png)](https://imgse.com/i/pCbGJ3V)\n\n- 配置路径\n\n    在环境变量中设置以下路径：\n\n    > `ANDROID_HOME`: `上个步骤中tab中的Android SDK Location`\n\n    在`Path`的环境变量中，添加如下文案：\n\n    - `%ANDROID_HOME%\\platform-tools`\n    - `%ANDROID_HOME%\\emulator`\n    - `%ANDROID_HOME%\\tools`\n    - `%ANDROID_HOME%\\tools\\bin`\n\n    设置完成后，点击应用即可\n\n### 安装webStorm\n\n[安装教程](https://www.bilibili.com/read/cv24375178/)\n\n注：如果破解的code不生效，可以重启电脑然后再填入对应的code\n\n## 新建项目\n\n- 在webStorm新建一个React Native项目\n\n    [![pCbJkb4.png](https://s1.ax1x.com/2023/07/21/pCbJkb4.png)](https://imgse.com/i/pCbJkb4)\n\n- 创建项目的文件目录\n\n    [![pCbJ1qe.png](https://s1.ax1x.com/2023/07/21/pCbJ1qe.png)](https://imgse.com/i/pCbJ1qe)\n\n- 右上角的命令的edit，进入命令的编辑页面\n\n    [![pCbJ4LF.png](https://s1.ax1x.com/2023/07/21/pCbJ4LF.png)](https://imgse.com/i/pCbJ4LF)\n\n    [![pCbJodJ.png](https://s1.ax1x.com/2023/07/21/pCbJodJ.png)](https://imgse.com/i/pCbJodJ)\n\n- 在Before launch的标签栏，点击+，选择`Run External Tool`，选择+\n\n    [![pCbwt0K.png](https://s1.ax1x.com/2023/07/21/pCbwt0K.png)](https://imgse.com/i/pCbwt0K)\n\n    [![pCbwwfH.png](https://s1.ax1x.com/2023/07/21/pCbwwfH.png)](https://imgse.com/i/pCbwwfH)\n\n- 填写相关信息\n\n    Name为该按钮的名字\n\n    Program为react Native的路径，win终端命令:where react-native \n\n    working directory：该输入框中,先点击右边的insert macro,选择ProjectFileDir.\n\n    [![pCb0mjI.png](https://s1.ax1x.com/2023/07/21/pCb0mjI.png)](https://imgse.com/i/pCb0mjI)\n\n    填写内容：\n\n    [![pCb0KDP.png](https://s1.ax1x.com/2023/07/21/pCb0KDP.png)](https://imgse.com/i/pCb0KDP)\n\n- 保存以上操作，然后执行刚刚配置好的命令\n\n    [![pCb0D5F.png](https://s1.ax1x.com/2023/07/21/pCb0D5F.png)](https://imgse.com/i/pCb0D5F)\n\n## 参链\n\n- [搭建开发环境](https://reactnative.cn/docs/environment-setup)\n\n- [webstorm破解激活2023最新永久教程「亲测有效」](https://www.bilibili.com/read/cv24375178/)\n\n- [WebStorm里配置运行React Native](https://blog.csdn.net/sinat_36279113/article/details/100576426)\n","source":"_posts/【RN】环境搭建.md","raw":"---\ntitle: 【RN】环境搭建\ncategories: \"React Native\"\n---\n\n# 【React Native】环境搭建\n\n## 环境\n\n- Nodejs: `v16.16.0`\n\n- react-native: `0.72.3`\n\n- react-native-cli: `2.0.13`\n\n- webStorm: `2023.1.2`\n\n- Android Studio: `2022.2.1.20`\n\n## 基本环境配置\n\n### 安装nodejs\n\n[Node.Js中文网](https://nodejs.p2hp.com/)\n\n### 安装react-native及其脚手架\n\n> npm i -g react-native react-native-cli\n\n### 安装Android Studio\n\n这个是配置安卓环境的，需要配置好后，才能运行成功。\n\n[官网下载](https://developer.android.google.cn/studio/)\n\n[安装流程](https://reactnative.cn/docs/environment-setup)\n\n- 必须安装的SDK：\n\n    - `Android SDK`\n    - `Android SDK Platform`\n    - `Android Virtual Device`\n\n安装过程由于下载内容较多，因此安装过程较慢。\n\n- 安装后，需要额外安装的SDK\n\n    - `Android SDK Platform 33`\n    \n    - `Intel x86 Atom_64 System Image`\n    \n    - `Android SDK Build-Tools 33.0.0`\n\n    从设置按钮-》settings-》Appearance & Behavior -》 System Settings -》 Android SDK\n    [![pCbGec8.png](https://s1.ax1x.com/2023/07/21/pCbGec8.png)](https://imgse.com/i/pCbGec8)\n\n    [![pCb8Xfx.png](https://s1.ax1x.com/2023/07/21/pCb8Xfx.png)](https://imgse.com/i/pCb8Xfx)\n\n    [![pCbGJ3V.png](https://s1.ax1x.com/2023/07/21/pCbGJ3V.png)](https://imgse.com/i/pCbGJ3V)\n\n- 配置路径\n\n    在环境变量中设置以下路径：\n\n    > `ANDROID_HOME`: `上个步骤中tab中的Android SDK Location`\n\n    在`Path`的环境变量中，添加如下文案：\n\n    - `%ANDROID_HOME%\\platform-tools`\n    - `%ANDROID_HOME%\\emulator`\n    - `%ANDROID_HOME%\\tools`\n    - `%ANDROID_HOME%\\tools\\bin`\n\n    设置完成后，点击应用即可\n\n### 安装webStorm\n\n[安装教程](https://www.bilibili.com/read/cv24375178/)\n\n注：如果破解的code不生效，可以重启电脑然后再填入对应的code\n\n## 新建项目\n\n- 在webStorm新建一个React Native项目\n\n    [![pCbJkb4.png](https://s1.ax1x.com/2023/07/21/pCbJkb4.png)](https://imgse.com/i/pCbJkb4)\n\n- 创建项目的文件目录\n\n    [![pCbJ1qe.png](https://s1.ax1x.com/2023/07/21/pCbJ1qe.png)](https://imgse.com/i/pCbJ1qe)\n\n- 右上角的命令的edit，进入命令的编辑页面\n\n    [![pCbJ4LF.png](https://s1.ax1x.com/2023/07/21/pCbJ4LF.png)](https://imgse.com/i/pCbJ4LF)\n\n    [![pCbJodJ.png](https://s1.ax1x.com/2023/07/21/pCbJodJ.png)](https://imgse.com/i/pCbJodJ)\n\n- 在Before launch的标签栏，点击+，选择`Run External Tool`，选择+\n\n    [![pCbwt0K.png](https://s1.ax1x.com/2023/07/21/pCbwt0K.png)](https://imgse.com/i/pCbwt0K)\n\n    [![pCbwwfH.png](https://s1.ax1x.com/2023/07/21/pCbwwfH.png)](https://imgse.com/i/pCbwwfH)\n\n- 填写相关信息\n\n    Name为该按钮的名字\n\n    Program为react Native的路径，win终端命令:where react-native \n\n    working directory：该输入框中,先点击右边的insert macro,选择ProjectFileDir.\n\n    [![pCb0mjI.png](https://s1.ax1x.com/2023/07/21/pCb0mjI.png)](https://imgse.com/i/pCb0mjI)\n\n    填写内容：\n\n    [![pCb0KDP.png](https://s1.ax1x.com/2023/07/21/pCb0KDP.png)](https://imgse.com/i/pCb0KDP)\n\n- 保存以上操作，然后执行刚刚配置好的命令\n\n    [![pCb0D5F.png](https://s1.ax1x.com/2023/07/21/pCb0D5F.png)](https://imgse.com/i/pCb0D5F)\n\n## 参链\n\n- [搭建开发环境](https://reactnative.cn/docs/environment-setup)\n\n- [webstorm破解激活2023最新永久教程「亲测有效」](https://www.bilibili.com/read/cv24375178/)\n\n- [WebStorm里配置运行React Native](https://blog.csdn.net/sinat_36279113/article/details/100576426)\n","slug":"【RN】环境搭建","published":1,"date":"2025-08-13T07:28:27.593Z","updated":"2025-08-13T07:35:15.651Z","_id":"cme9nnvka0000hsfmg4jrennl","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"【React-Native】环境搭建\"><a href=\"#【React-Native】环境搭建\" class=\"headerlink\" title=\"【React Native】环境搭建\"></a>【React Native】环境搭建</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>Nodejs: <code>v16.16.0</code></p>\n</li>\n<li><p>react-native: <code>0.72.3</code></p>\n</li>\n<li><p>react-native-cli: <code>2.0.13</code></p>\n</li>\n<li><p>webStorm: <code>2023.1.2</code></p>\n</li>\n<li><p>Android Studio: <code>2022.2.1.20</code></p>\n</li>\n</ul>\n<h2 id=\"基本环境配置\"><a href=\"#基本环境配置\" class=\"headerlink\" title=\"基本环境配置\"></a>基本环境配置</h2><h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><p><a href=\"https://nodejs.p2hp.com/\">Node.Js中文网</a></p>\n<h3 id=\"安装react-native及其脚手架\"><a href=\"#安装react-native及其脚手架\" class=\"headerlink\" title=\"安装react-native及其脚手架\"></a>安装react-native及其脚手架</h3><blockquote>\n<p>npm i -g react-native react-native-cli</p>\n</blockquote>\n<h3 id=\"安装Android-Studio\"><a href=\"#安装Android-Studio\" class=\"headerlink\" title=\"安装Android Studio\"></a>安装Android Studio</h3><p>这个是配置安卓环境的，需要配置好后，才能运行成功。</p>\n<p><a href=\"https://developer.android.google.cn/studio/\">官网下载</a></p>\n<p><a href=\"https://reactnative.cn/docs/environment-setup\">安装流程</a></p>\n<ul>\n<li><p>必须安装的SDK：</p>\n<ul>\n<li><code>Android SDK</code></li>\n<li><code>Android SDK Platform</code></li>\n<li><code>Android Virtual Device</code></li>\n</ul>\n</li>\n</ul>\n<p>安装过程由于下载内容较多，因此安装过程较慢。</p>\n<ul>\n<li><p>安装后，需要额外安装的SDK</p>\n<ul>\n<li><p><code>Android SDK Platform 33</code></p>\n</li>\n<li><p><code>Intel x86 Atom_64 System Image</code></p>\n</li>\n<li><p><code>Android SDK Build-Tools 33.0.0</code></p>\n</li>\n</ul>\n<p>  从设置按钮-》settings-》Appearance &amp; Behavior -》 System Settings -》 Android SDK<br>  <a href=\"https://imgse.com/i/pCbGec8\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbGec8.png\" alt=\"pCbGec8.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCb8Xfx\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb8Xfx.png\" alt=\"pCb8Xfx.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCbGJ3V\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbGJ3V.png\" alt=\"pCbGJ3V.png\"></a></p>\n</li>\n<li><p>配置路径</p>\n<p>  在环境变量中设置以下路径：</p>\n<blockquote>\n<p><code>ANDROID_HOME</code>: <code>上个步骤中tab中的Android SDK Location</code></p>\n</blockquote>\n<p>  在<code>Path</code>的环境变量中，添加如下文案：</p>\n<ul>\n<li><code>%ANDROID_HOME%\\platform-tools</code></li>\n<li><code>%ANDROID_HOME%\\emulator</code></li>\n<li><code>%ANDROID_HOME%\\tools</code></li>\n<li><code>%ANDROID_HOME%\\tools\\bin</code></li>\n</ul>\n<p>  设置完成后，点击应用即可</p>\n</li>\n</ul>\n<h3 id=\"安装webStorm\"><a href=\"#安装webStorm\" class=\"headerlink\" title=\"安装webStorm\"></a>安装webStorm</h3><p><a href=\"https://www.bilibili.com/read/cv24375178/\">安装教程</a></p>\n<p>注：如果破解的code不生效，可以重启电脑然后再填入对应的code</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><ul>\n<li><p>在webStorm新建一个React Native项目</p>\n<p>  <a href=\"https://imgse.com/i/pCbJkb4\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJkb4.png\" alt=\"pCbJkb4.png\"></a></p>\n</li>\n<li><p>创建项目的文件目录</p>\n<p>  <a href=\"https://imgse.com/i/pCbJ1qe\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJ1qe.png\" alt=\"pCbJ1qe.png\"></a></p>\n</li>\n<li><p>右上角的命令的edit，进入命令的编辑页面</p>\n<p>  <a href=\"https://imgse.com/i/pCbJ4LF\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJ4LF.png\" alt=\"pCbJ4LF.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCbJodJ\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJodJ.png\" alt=\"pCbJodJ.png\"></a></p>\n</li>\n<li><p>在Before launch的标签栏，点击+，选择<code>Run External Tool</code>，选择+</p>\n<p>  <a href=\"https://imgse.com/i/pCbwt0K\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbwt0K.png\" alt=\"pCbwt0K.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCbwwfH\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbwwfH.png\" alt=\"pCbwwfH.png\"></a></p>\n</li>\n<li><p>填写相关信息</p>\n<p>  Name为该按钮的名字</p>\n<p>  Program为react Native的路径，win终端命令:where react-native </p>\n<p>  working directory：该输入框中,先点击右边的insert macro,选择ProjectFileDir.</p>\n<p>  <a href=\"https://imgse.com/i/pCb0mjI\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb0mjI.png\" alt=\"pCb0mjI.png\"></a></p>\n<p>  填写内容：</p>\n<p>  <a href=\"https://imgse.com/i/pCb0KDP\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb0KDP.png\" alt=\"pCb0KDP.png\"></a></p>\n</li>\n<li><p>保存以上操作，然后执行刚刚配置好的命令</p>\n<p>  <a href=\"https://imgse.com/i/pCb0D5F\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb0D5F.png\" alt=\"pCb0D5F.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><ul>\n<li><p><a href=\"https://reactnative.cn/docs/environment-setup\">搭建开发环境</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/read/cv24375178/\">webstorm破解激活2023最新永久教程「亲测有效」</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/sinat_36279113/article/details/100576426\">WebStorm里配置运行React Native</a></p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"【React-Native】环境搭建\"><a href=\"#【React-Native】环境搭建\" class=\"headerlink\" title=\"【React Native】环境搭建\"></a>【React Native】环境搭建</h1><h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li><p>Nodejs: <code>v16.16.0</code></p>\n</li>\n<li><p>react-native: <code>0.72.3</code></p>\n</li>\n<li><p>react-native-cli: <code>2.0.13</code></p>\n</li>\n<li><p>webStorm: <code>2023.1.2</code></p>\n</li>\n<li><p>Android Studio: <code>2022.2.1.20</code></p>\n</li>\n</ul>\n<h2 id=\"基本环境配置\"><a href=\"#基本环境配置\" class=\"headerlink\" title=\"基本环境配置\"></a>基本环境配置</h2><h3 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h3><p><a href=\"https://nodejs.p2hp.com/\">Node.Js中文网</a></p>\n<h3 id=\"安装react-native及其脚手架\"><a href=\"#安装react-native及其脚手架\" class=\"headerlink\" title=\"安装react-native及其脚手架\"></a>安装react-native及其脚手架</h3><blockquote>\n<p>npm i -g react-native react-native-cli</p>\n</blockquote>\n<h3 id=\"安装Android-Studio\"><a href=\"#安装Android-Studio\" class=\"headerlink\" title=\"安装Android Studio\"></a>安装Android Studio</h3><p>这个是配置安卓环境的，需要配置好后，才能运行成功。</p>\n<p><a href=\"https://developer.android.google.cn/studio/\">官网下载</a></p>\n<p><a href=\"https://reactnative.cn/docs/environment-setup\">安装流程</a></p>\n<ul>\n<li><p>必须安装的SDK：</p>\n<ul>\n<li><code>Android SDK</code></li>\n<li><code>Android SDK Platform</code></li>\n<li><code>Android Virtual Device</code></li>\n</ul>\n</li>\n</ul>\n<p>安装过程由于下载内容较多，因此安装过程较慢。</p>\n<ul>\n<li><p>安装后，需要额外安装的SDK</p>\n<ul>\n<li><p><code>Android SDK Platform 33</code></p>\n</li>\n<li><p><code>Intel x86 Atom_64 System Image</code></p>\n</li>\n<li><p><code>Android SDK Build-Tools 33.0.0</code></p>\n</li>\n</ul>\n<p>  从设置按钮-》settings-》Appearance &amp; Behavior -》 System Settings -》 Android SDK<br>  <a href=\"https://imgse.com/i/pCbGec8\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbGec8.png\" alt=\"pCbGec8.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCb8Xfx\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb8Xfx.png\" alt=\"pCb8Xfx.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCbGJ3V\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbGJ3V.png\" alt=\"pCbGJ3V.png\"></a></p>\n</li>\n<li><p>配置路径</p>\n<p>  在环境变量中设置以下路径：</p>\n<blockquote>\n<p><code>ANDROID_HOME</code>: <code>上个步骤中tab中的Android SDK Location</code></p>\n</blockquote>\n<p>  在<code>Path</code>的环境变量中，添加如下文案：</p>\n<ul>\n<li><code>%ANDROID_HOME%\\platform-tools</code></li>\n<li><code>%ANDROID_HOME%\\emulator</code></li>\n<li><code>%ANDROID_HOME%\\tools</code></li>\n<li><code>%ANDROID_HOME%\\tools\\bin</code></li>\n</ul>\n<p>  设置完成后，点击应用即可</p>\n</li>\n</ul>\n<h3 id=\"安装webStorm\"><a href=\"#安装webStorm\" class=\"headerlink\" title=\"安装webStorm\"></a>安装webStorm</h3><p><a href=\"https://www.bilibili.com/read/cv24375178/\">安装教程</a></p>\n<p>注：如果破解的code不生效，可以重启电脑然后再填入对应的code</p>\n<h2 id=\"新建项目\"><a href=\"#新建项目\" class=\"headerlink\" title=\"新建项目\"></a>新建项目</h2><ul>\n<li><p>在webStorm新建一个React Native项目</p>\n<p>  <a href=\"https://imgse.com/i/pCbJkb4\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJkb4.png\" alt=\"pCbJkb4.png\"></a></p>\n</li>\n<li><p>创建项目的文件目录</p>\n<p>  <a href=\"https://imgse.com/i/pCbJ1qe\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJ1qe.png\" alt=\"pCbJ1qe.png\"></a></p>\n</li>\n<li><p>右上角的命令的edit，进入命令的编辑页面</p>\n<p>  <a href=\"https://imgse.com/i/pCbJ4LF\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJ4LF.png\" alt=\"pCbJ4LF.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCbJodJ\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbJodJ.png\" alt=\"pCbJodJ.png\"></a></p>\n</li>\n<li><p>在Before launch的标签栏，点击+，选择<code>Run External Tool</code>，选择+</p>\n<p>  <a href=\"https://imgse.com/i/pCbwt0K\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbwt0K.png\" alt=\"pCbwt0K.png\"></a></p>\n<p>  <a href=\"https://imgse.com/i/pCbwwfH\"><img src=\"https://s1.ax1x.com/2023/07/21/pCbwwfH.png\" alt=\"pCbwwfH.png\"></a></p>\n</li>\n<li><p>填写相关信息</p>\n<p>  Name为该按钮的名字</p>\n<p>  Program为react Native的路径，win终端命令:where react-native </p>\n<p>  working directory：该输入框中,先点击右边的insert macro,选择ProjectFileDir.</p>\n<p>  <a href=\"https://imgse.com/i/pCb0mjI\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb0mjI.png\" alt=\"pCb0mjI.png\"></a></p>\n<p>  填写内容：</p>\n<p>  <a href=\"https://imgse.com/i/pCb0KDP\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb0KDP.png\" alt=\"pCb0KDP.png\"></a></p>\n</li>\n<li><p>保存以上操作，然后执行刚刚配置好的命令</p>\n<p>  <a href=\"https://imgse.com/i/pCb0D5F\"><img src=\"https://s1.ax1x.com/2023/07/21/pCb0D5F.png\" alt=\"pCb0D5F.png\"></a></p>\n</li>\n</ul>\n<h2 id=\"参链\"><a href=\"#参链\" class=\"headerlink\" title=\"参链\"></a>参链</h2><ul>\n<li><p><a href=\"https://reactnative.cn/docs/environment-setup\">搭建开发环境</a></p>\n</li>\n<li><p><a href=\"https://www.bilibili.com/read/cv24375178/\">webstorm破解激活2023最新永久教程「亲测有效」</a></p>\n</li>\n<li><p><a href=\"https://blog.csdn.net/sinat_36279113/article/details/100576426\">WebStorm里配置运行React Native</a></p>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cme9nh6wm0000bofm6l69faab","category_id":"cme9nh6wx0002bofm4ds4d841","_id":"cme9nh6x5000bbofm0mgkfrk0"},{"post_id":"cme9nh6wz0004bofmaak91x9m","category_id":"cme9nh6x30007bofm0hlkb0y0","_id":"cme9nh6x7000fbofm83ynel8b"},{"post_id":"cme9nh6x10005bofm9kjdhl5h","category_id":"cme9nh6x6000cbofmfn67dska","_id":"cme9nh6xc000lbofm0ykncmnn"},{"post_id":"cme9nh6x30006bofm6ddgafcu","category_id":"cme9nh6x6000cbofmfn67dska","_id":"cme9nh6xd000obofm3qvlea0q"},{"post_id":"cme9nh6x40009bofm5ntielz2","category_id":"cme9nh6xc000kbofmh76a8khb","_id":"cme9nh6xf000wbofmhsyye68h"},{"post_id":"cme9nh6x5000abofm73125j5i","category_id":"cme9nh6xc000kbofmh76a8khb","_id":"cme9nh6xh0010bofm3b1mhrq6"},{"post_id":"cme9nh6x6000dbofm6elbecrt","category_id":"cme9nh6xc000kbofmh76a8khb","_id":"cme9nh6xj0015bofm6u7ucb1s"},{"post_id":"cme9nh6x7000ebofm0gdu6lha","category_id":"cme9nh6xh000zbofmai0231lv","_id":"cme9nh6xj0017bofm95p6a9yh"},{"post_id":"cme9nh6x9000hbofmfbeld6h9","category_id":"cme9nh6xj0016bofm7188ce79","_id":"cme9nh6xk001abofm2kj60xxq"},{"post_id":"cme9nh6xb000jbofm2y6x3jcg","category_id":"cme9nh6xj0018bofmc3li8iw1","_id":"cme9nh6xk001dbofmbw1g4mey"},{"post_id":"cme9nh6xc000mbofm1clmbo6t","category_id":"cme9nh6xh000zbofmai0231lv","_id":"cme9nh6xk001ebofm3v9a4476"},{"post_id":"cme9nh6xd000nbofm8nfo4pwy","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xl001hbofmg8a435ja"},{"post_id":"cme9nh6xd000rbofmejgz41yo","category_id":"cme9nh6xj0018bofmc3li8iw1","_id":"cme9nh6xl001jbofmenag2h7m"},{"post_id":"cme9nh6xe000tbofmf6gec3l2","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xm001lbofmhpv23g26"},{"post_id":"cme9nh6xf000xbofmgt5ggql0","category_id":"cme9nh6xj0018bofmc3li8iw1","_id":"cme9nh6xm001nbofmcoql1vwj"},{"post_id":"cme9nh6xg000ybofm8j7dgl2i","category_id":"cme9nh6xj0018bofmc3li8iw1","_id":"cme9nh6xn001pbofm3kp66kzd"},{"post_id":"cme9nh6xh0011bofmg6ouh67p","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xn001qbofm4j389oho"},{"post_id":"cme9nh6xi0013bofmez3k9x7z","category_id":"cme9nh6xj0018bofmc3li8iw1","_id":"cme9nh6xn001rbofm03qmdjm3"},{"post_id":"cme9nh6xs001sbofm60feall2","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xv001wbofm4dqv7819"},{"post_id":"cme9nh6xt001tbofmcp5g8dj1","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xw001ybofm14le37ho"},{"post_id":"cme9nh6xu001ubofmhcg5dv7f","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xw0021bofm1ex6ecvx"},{"post_id":"cme9nh6xv001vbofm600p89jh","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xx0022bofm2fi28dp4"},{"post_id":"cme9nh6xw001xbofm97cf6lrz","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xx0023bofmhq5ua2hg"},{"post_id":"cme9nh6xw0020bofm9sra84de","category_id":"cme9nh6xk001cbofmgcifcztw","_id":"cme9nh6xx0024bofm233jczuz"},{"post_id":"cme9nmf8000001ofm2c41flcv","category_id":"cme9nh6xc000kbofmh76a8khb","_id":"cme9nmf8300021ofmbz3l3bv8"},{"post_id":"cme9nnvka0000hsfmg4jrennl","category_id":"cme9no52e0000u4fm3kpx3jdw","_id":"cme9no52f0001u4fm7ivv93ko"}],"PostTag":[{"post_id":"cme9nh6wm0000bofm6l69faab","tag_id":"cme9nh6wz0003bofm6qpshhye","_id":"cme9nh6x40008bofm2ptu6ftl"},{"post_id":"cme9nh6xc000mbofm1clmbo6t","tag_id":"cme9nh6xb000ibofm0hkn41i2","_id":"cme9nh6xd000pbofmhzvjgjjj"},{"post_id":"cme9nh6x7000ebofm0gdu6lha","tag_id":"cme9nh6xb000ibofm0hkn41i2","_id":"cme9nh6xe000sbofmf1896k81"},{"post_id":"cme9nh6xd000rbofmejgz41yo","tag_id":"cme9nh6xf000ubofm8btlezne","_id":"cme9nh6xi0012bofm486sbap8"},{"post_id":"cme9nh6xh0011bofmg6ouh67p","tag_id":"cme9nh6xi0014bofmd7preoyh","_id":"cme9nh6xj0019bofmfjub54qt"},{"post_id":"cme9nh6xv001vbofm600p89jh","tag_id":"cme9nh6xi0014bofmd7preoyh","_id":"cme9nh6xw001zbofmd9lxh013"},{"post_id":"cme9nmf8000001ofm2c41flcv","tag_id":"cme9nmf8300011ofm7bay1d9b","_id":"cme9nmf8400031ofme7f4hfbt"}],"Tag":[{"name":"vue","_id":"cme9nh6wz0003bofm6qpshhye"},{"name":"http","_id":"cme9nh6xb000ibofm0hkn41i2"},{"name":"浏览器 Performance Chrome","_id":"cme9nh6xf000ubofm8btlezne"},{"name":"css","_id":"cme9nh6xi0014bofmd7preoyh"},{"name":"HTML","_id":"cme9nmf8300011ofm7bay1d9b"}]}}